-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | General purpose LLVM bindings
--   
--   llvm-hs is a set of Haskell bindings for LLVM <a>http://llvm.org/</a>.
--   Unlike other current Haskell bindings, it uses an ADT to represent
--   LLVM IR (<a>http://llvm.org/docs/LangRef.html</a>), and so offers two
--   advantages: it handles almost all of the stateful complexities of
--   using the LLVM API to build IR; and it supports moving IR not only
--   from Haskell into LLVM C++ objects, but the other direction - from
--   LLVM C++ into Haskell.
@package llvm-hs
@version 5.1.1


-- | Code generation options, used in specifying TargetMachine
module LLVM.CodeGenOpt

-- | <a>http://llvm.org/doxygen/namespacellvm_1_1CodeGenOpt.html</a>
data Level
None :: Level
Less :: Level
Default :: Level
Aggressive :: Level
instance GHC.Generics.Generic LLVM.CodeGenOpt.Level
instance Data.Data.Data LLVM.CodeGenOpt.Level
instance GHC.Show.Show LLVM.CodeGenOpt.Level
instance GHC.Read.Read LLVM.CodeGenOpt.Level
instance GHC.Classes.Ord LLVM.CodeGenOpt.Level
instance GHC.Classes.Eq LLVM.CodeGenOpt.Level


-- | Relocations, used in specifying TargetMachine
module LLVM.CodeModel

-- | <a>http://llvm.org/doxygen/namespacellvm_1_1CodeModel.html</a>
data Model
Default :: Model
JITDefault :: Model
Small :: Model
Kernel :: Model
Medium :: Model
Large :: Model
instance GHC.Generics.Generic LLVM.CodeModel.Model
instance Data.Data.Data LLVM.CodeModel.Model
instance GHC.Show.Show LLVM.CodeModel.Model
instance GHC.Read.Read LLVM.CodeModel.Model
instance GHC.Classes.Eq LLVM.CodeModel.Model


-- | Diagnostics describe parse errors
module LLVM.Diagnostic

-- | What kind of problem does a diagnostic describe?
data DiagnosticKind
ErrorKind :: DiagnosticKind
WarningKind :: DiagnosticKind
NoteKind :: DiagnosticKind

-- | A <a>Diagnostic</a> described a problem during parsing of LLVM IR
data Diagnostic
Diagnostic :: Int -> Int -> DiagnosticKind -> String -> String -> String -> Diagnostic
[lineNumber] :: Diagnostic -> Int
[columnNumber] :: Diagnostic -> Int
[diagnosticKind] :: Diagnostic -> DiagnosticKind
[filename] :: Diagnostic -> String
[message] :: Diagnostic -> String
[lineContents] :: Diagnostic -> String

-- | Convert a <a>Diagnostic</a> to a printable form.
diagnosticDisplay :: Diagnostic -> String
instance GHC.Show.Show LLVM.Diagnostic.Diagnostic
instance GHC.Read.Read LLVM.Diagnostic.Diagnostic
instance GHC.Classes.Ord LLVM.Diagnostic.Diagnostic
instance GHC.Classes.Eq LLVM.Diagnostic.Diagnostic
instance GHC.Generics.Generic LLVM.Diagnostic.DiagnosticKind
instance Data.Data.Data LLVM.Diagnostic.DiagnosticKind
instance GHC.Show.Show LLVM.Diagnostic.DiagnosticKind
instance GHC.Read.Read LLVM.Diagnostic.DiagnosticKind
instance GHC.Classes.Ord LLVM.Diagnostic.DiagnosticKind
instance GHC.Classes.Eq LLVM.Diagnostic.DiagnosticKind


-- | This module lists all of the exceptions thrown by 'llvm-hs' itself.
--   Note that other exceptions can potentially be thrown by the underlying
--   libraries, e.g., for functions doing file IO.
module LLVM.Exception

-- | Indicates an error during the translation of the AST provided by
--   'llvm-hs-pure' to LLVM’s internal representation.
data EncodeException
EncodeException :: !String -> EncodeException

-- | Indicates an error during the parsing of a module. This is used for
--   errors encountered when parsing LLVM’s human readable assembly format
--   and when parsing the binary bitcode format.
data ParseFailureException
ParseFailureException :: !String -> ParseFailureException

-- | Indicates an error during the linking of two modules.
data LinkException
LinkException :: !String -> LinkException

-- | Indicates an error during the creation of a <a>raw_fd_ostream</a>.
--   This could be caused by a nonexisting file path.
data FdStreamException
FdStreamException :: !String -> FdStreamException

-- | Indicates an error during a call to <a>targetMachineEmit</a>.
data TargetMachineEmitException
TargetMachineEmitException :: !String -> TargetMachineEmitException

-- | Indicates a failure to find the target.
data LookupTargetException
LookupTargetException :: !String -> LookupTargetException

-- | Indicates an error during the verification of a module.
data VerifyException
VerifyException :: !String -> VerifyException
instance GHC.Classes.Ord LLVM.Exception.VerifyException
instance GHC.Classes.Eq LLVM.Exception.VerifyException
instance GHC.Show.Show LLVM.Exception.VerifyException
instance GHC.Classes.Ord LLVM.Exception.LookupTargetException
instance GHC.Classes.Eq LLVM.Exception.LookupTargetException
instance GHC.Show.Show LLVM.Exception.LookupTargetException
instance GHC.Classes.Ord LLVM.Exception.TargetMachineEmitException
instance GHC.Classes.Eq LLVM.Exception.TargetMachineEmitException
instance GHC.Show.Show LLVM.Exception.TargetMachineEmitException
instance GHC.Classes.Ord LLVM.Exception.FdStreamException
instance GHC.Classes.Eq LLVM.Exception.FdStreamException
instance GHC.Show.Show LLVM.Exception.FdStreamException
instance GHC.Classes.Ord LLVM.Exception.LinkException
instance GHC.Classes.Eq LLVM.Exception.LinkException
instance GHC.Show.Show LLVM.Exception.LinkException
instance GHC.Classes.Ord LLVM.Exception.ParseFailureException
instance GHC.Classes.Eq LLVM.Exception.ParseFailureException
instance GHC.Show.Show LLVM.Exception.ParseFailureException
instance GHC.Classes.Ord LLVM.Exception.EncodeException
instance GHC.Classes.Eq LLVM.Exception.EncodeException
instance GHC.Show.Show LLVM.Exception.EncodeException
instance GHC.Exception.Exception LLVM.Exception.VerifyException
instance GHC.Exception.Exception LLVM.Exception.LookupTargetException
instance GHC.Exception.Exception LLVM.Exception.TargetMachineEmitException
instance GHC.Exception.Exception LLVM.Exception.FdStreamException
instance GHC.Exception.Exception LLVM.Exception.LinkException
instance GHC.Exception.Exception LLVM.Exception.ParseFailureException
instance GHC.Exception.Exception LLVM.Exception.EncodeException

module LLVM.Internal.FFI.ByteRangeCallback
type ByteRangeCallback = Ptr CChar -> CSize -> IO ()
wrapByteRangeCallback :: ByteRangeCallback -> IO (FunPtr ByteRangeCallback)

module LLVM.Internal.FFI.CommandLine
parseCommandLineOptions' :: CUInt -> Ptr (Ptr CChar) -> Ptr CChar -> IO ()
parseCommandLineOptions :: (CUInt, Ptr (Ptr CChar)) -> Ptr CChar -> IO ()


-- | Functions for handling the LLVMContext class. In all other LLVM
--   interfaces, | prefer the newer explicitly thread-aware variants which
--   use contexts | over corresponding older variants which implicitly
--   reference a global context. | This choice allows multiple threads to
--   do independent work with LLVM safely.
module LLVM.Internal.FFI.Context

-- | a blind type to correspond to LLVMContext
data Context

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreContext.html#gaac4f39a2d0b9735e64ac7681ab543b4c</a>
contextCreate :: IO (Ptr Context)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreContext.html#ga0055cde9a9b2497b332d639d8844a810</a>
getGlobalContext :: IO (Ptr Context)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreContext.html#ga9cf8b0fb4a546d4cdb6f64b8055f5f57</a>
contextDispose :: Ptr Context -> IO ()

module LLVM.Internal.Context

-- | a Context object holds the state the of LLVM system needs for one
--   thread of | LLVM compilation. Once upon a time, in early versions of
--   LLVM, this state was global. | Then it got packed up in this object to
--   allow multiple threads to compile at once.
data Context
Context :: (Ptr Context) -> Context

-- | Create a Context, run an action (to which it is provided), then
--   destroy the Context.
withContext :: (Context -> IO a) -> IO a


-- | functions for the LLVM Context object which holds thread-scope state
module LLVM.Context

-- | a Context object holds the state the of LLVM system needs for one
--   thread of | LLVM compilation. Once upon a time, in early versions of
--   LLVM, this state was global. | Then it got packed up in this object to
--   allow multiple threads to compile at once.
data Context

-- | Create a Context, run an action (to which it is provided), then
--   destroy the Context.
withContext :: (Context -> IO a) -> IO a


-- | Functions to help handle LLVM iteration patterns
module LLVM.Internal.FFI.Iterate

-- | retrieve a sequence of objects which form a linked list, given an
--   action to | retrieve the first member and an action to proceed through
--   the list
getXs :: IO (Ptr a) -> (Ptr a -> IO (Ptr a)) -> IO [Ptr a]


-- | Define types which correspond cleanly with some simple types on the
--   C/C++ side. Encapsulate hsc macro weirdness here, supporting
--   higher-level tricks elsewhere.
module LLVM.Internal.FFI.LLVMCTypes
newtype LLVMBool
LLVMBool :: CUInt -> LLVMBool

-- | If an FFI function returns a value wrapped in <a>OwnerTransfered</a>,
--   this value needs to be freed after it has been processed. Usually this
--   is done automatically in the <tt>DecodeM</tt> instance.
newtype OwnerTransfered a
OwnerTransfered :: a -> OwnerTransfered a
newtype NothingAsMinusOne h
NothingAsMinusOne :: CInt -> NothingAsMinusOne h
newtype NothingAsEmptyString c
NothingAsEmptyString :: c -> NothingAsEmptyString c
newtype CPPOpcode
CPPOpcode :: CUInt -> CPPOpcode
newtype ICmpPredicate
ICmpPredicate :: CUInt -> ICmpPredicate
iCmpPredEQ :: ICmpPredicate
iCmpPredNE :: ICmpPredicate
iCmpPredUGT :: ICmpPredicate
iCmpPredUGE :: ICmpPredicate
iCmpPredULT :: ICmpPredicate
iCmpPredULE :: ICmpPredicate
iCmpPredSGT :: ICmpPredicate
iCmpPredSGE :: ICmpPredicate
iCmpPredSLT :: ICmpPredicate
iCmpPredSLE :: ICmpPredicate
newtype FCmpPredicate
FCmpPredicate :: CUInt -> FCmpPredicate
fCmpPredFalse :: FCmpPredicate
fCmpPredOEQ :: FCmpPredicate
fCmpPredOGT :: FCmpPredicate
fCmpPredOGE :: FCmpPredicate
fCmpPredOLT :: FCmpPredicate
fCmpPredOLE :: FCmpPredicate
fCmpPredONE :: FCmpPredicate
fCmpPredORD :: FCmpPredicate
fCmpPredUNO :: FCmpPredicate
fCmpPredUEQ :: FCmpPredicate
newtype MDKindID
MDKindID :: CUInt -> MDKindID
fCmpPredUGT :: FCmpPredicate
fCmpPredUGE :: FCmpPredicate
newtype FastMathFlags
FastMathFlags :: CUInt -> FastMathFlags
fCmpPredULT :: FCmpPredicate
fastMathFlagsUnsafeAlgebra :: FastMathFlags
fCmpPredULE :: FCmpPredicate
fastMathFlagsNoNaNs :: FastMathFlags
newtype MemoryOrdering
MemoryOrdering :: CUInt -> MemoryOrdering
fCmpPredUNE :: FCmpPredicate
fastMathFlagsNoInfs :: FastMathFlags
fcmpPredTrue :: FCmpPredicate
memoryOrderingNotAtomic :: MemoryOrdering
fastMathFlagsNoSignedZeros :: FastMathFlags
memoryOrderingUnordered :: MemoryOrdering
newtype UnnamedAddr
UnnamedAddr :: CUInt -> UnnamedAddr
fastMathFlagsAllowReciprocal :: FastMathFlags
memoryOrderingMonotonic :: MemoryOrdering
unnamedAddrNone :: UnnamedAddr
fastMathFlagsAllowContract :: FastMathFlags
memoryOrderingAcquire :: MemoryOrdering
fastMathFlagsP :: QuasiQuoter
unnamedAddrLocal :: UnnamedAddr
newtype SynchronizationScope
SynchronizationScope :: CUInt -> SynchronizationScope
memoryOrderingRelease :: MemoryOrdering
unnamedAddrGlobal :: UnnamedAddr
memoryOrderingAcquireRelease :: MemoryOrdering
synchronizationScopeSingleThread :: SynchronizationScope
unnamedAddrP :: QuasiQuoter
synchronizationScopeSystem :: SynchronizationScope
memoryOrderingSequentiallyConsistent :: MemoryOrdering
newtype TailCallKind
TailCallKind :: CUInt -> TailCallKind
memoryOrderingP :: QuasiQuoter
synchronizationScopeP :: QuasiQuoter
tailCallKindNone :: TailCallKind
tailCallKindTail :: TailCallKind
newtype Linkage
Linkage :: CUInt -> Linkage
tailCallKindMustTail :: TailCallKind
linkageExternal :: Linkage
tailCallKindNoTail :: TailCallKind
linkageAvailableExternally :: Linkage
newtype Visibility
Visibility :: CUInt -> Visibility
tailCallKindP :: QuasiQuoter
linkageLinkOnceAny :: Linkage
visibilityDefault :: Visibility
linkageLinkOnceODR :: Linkage
visibilityHidden :: Visibility
newtype COMDATSelectionKind
COMDATSelectionKind :: CUInt -> COMDATSelectionKind
linkageWeakAny :: Linkage
visibilityProtected :: Visibility
linkageWeakODR :: Linkage
comdatSelectionKindAny :: COMDATSelectionKind
visibilityP :: QuasiQuoter
linkageAppending :: Linkage
comdatSelectionKindExactMatch :: COMDATSelectionKind
newtype DLLStorageClass
DLLStorageClass :: CUInt -> DLLStorageClass
linkageInternal :: Linkage
comdatSelectionKindLargest :: COMDATSelectionKind
dllStorageClassDefault :: DLLStorageClass
linkagePrivate :: Linkage
comdatSelectionKindNoDuplicates :: COMDATSelectionKind
dllStorageClassDLLImport :: DLLStorageClass
newtype CallingConvention
CallingConvention :: CUInt -> CallingConvention
linkageExternalWeak :: Linkage
comdatSelectionKindSameSize :: COMDATSelectionKind
dllStorageClassDLLExport :: DLLStorageClass
linkageCommon :: Linkage
comdatSelectionKindP :: QuasiQuoter
callingConventionC :: CallingConvention
dllStorageClassP :: QuasiQuoter
linkageP :: QuasiQuoter
callingConventionFast :: CallingConvention
newtype ThreadLocalMode
ThreadLocalMode :: CUInt -> ThreadLocalMode
callingConventionCold :: CallingConvention
threadLocalModeNotThreadLocal :: ThreadLocalMode
callingConventionGHC :: CallingConvention
threadLocalModeGeneralDynamicTLSModel :: ThreadLocalMode
newtype ValueSubclassId
ValueSubclassId :: CUInt -> ValueSubclassId
callingConventionHiPE :: CallingConvention
threadLocalModeLocalDynamicTLSModel :: ThreadLocalMode
valueSubclassIdArgument :: ValueSubclassId
callingConventionWebKit_JS :: CallingConvention
threadLocalModeInitialExecTLSModel :: ThreadLocalMode
valueSubclassIdBasicBlock :: ValueSubclassId
callingConventionAnyReg :: CallingConvention
newtype DiagnosticKind
DiagnosticKind :: CUInt -> DiagnosticKind
threadLocalModeLocalExecTLSModel :: ThreadLocalMode
valueSubclassIdFunction :: ValueSubclassId
callingConventionPreserveMost :: CallingConvention
threadLocalModeP :: QuasiQuoter
diagnosticKindError :: DiagnosticKind
valueSubclassIdGlobalAlias :: ValueSubclassId
callingConventionPreserveAll :: CallingConvention
diagnosticKindWarning :: DiagnosticKind
newtype AsmDialect
AsmDialect :: CUInt -> AsmDialect
callingConventionSwift :: CallingConvention
valueSubclassIdGlobalVariable :: ValueSubclassId
diagnosticKindNote :: DiagnosticKind
asmDialectATT :: AsmDialect
valueSubclassIdUndefValue :: ValueSubclassId
callingConventionCXX_FAST_TLS :: CallingConvention
diagnosticKindP :: QuasiQuoter
asmDialectIntel :: AsmDialect
valueSubclassIdBlockAddress :: ValueSubclassId
callingConventionX86_StdCall :: CallingConvention
newtype RMWOperation
RMWOperation :: CUInt -> RMWOperation
asmDialectP :: QuasiQuoter
valueSubclassIdConstantExpr :: ValueSubclassId
callingConventionX86_FastCall :: CallingConvention
rmwOperationXchg :: RMWOperation
callingConventionARM_APCS :: CallingConvention
valueSubclassIdConstantAggregateZero :: ValueSubclassId
rmwOperationAdd :: RMWOperation
newtype RelocModel
RelocModel :: CUInt -> RelocModel
callingConventionARM_AAPCS :: CallingConvention
valueSubclassIdConstantDataArray :: ValueSubclassId
rmwOperationSub :: RMWOperation
relocModelDefault :: RelocModel
callingConventionARM_AAPCS_VFP :: CallingConvention
valueSubclassIdConstantDataVector :: ValueSubclassId
rmwOperationAnd :: RMWOperation
relocModelStatic :: RelocModel
valueSubclassIdConstantInt :: ValueSubclassId
callingConventionMSP430_INTR :: CallingConvention
newtype CodeModel
CodeModel :: CUInt -> CodeModel
rmwOperationNand :: RMWOperation
relocModelPIC :: RelocModel
valueSubclassIdConstantFP :: ValueSubclassId
callingConventionX86_ThisCall :: CallingConvention
codeModelDefault :: CodeModel
rmwOperationOr :: RMWOperation
relocModelDynamicNoPic :: RelocModel
valueSubclassIdConstantArray :: ValueSubclassId
callingConventionPTX_Kernel :: CallingConvention
rmwOperationXor :: RMWOperation
codeModelJITDefault :: CodeModel
newtype CodeGenOptLevel
CodeGenOptLevel :: CUInt -> CodeGenOptLevel
relocModelP :: QuasiQuoter
valueSubclassIdConstantStruct :: ValueSubclassId
callingConventionPTX_Device :: CallingConvention
codeModelSmall :: CodeModel
rmwOperationMax :: RMWOperation
codeGenOptLevelNone :: CodeGenOptLevel
callingConventionSPIR_FUNC :: CallingConvention
valueSubclassIdConstantTokenNone :: ValueSubclassId
codeModelKernel :: CodeModel
rmwOperationMin :: RMWOperation
codeGenOptLevelLess :: CodeGenOptLevel
valueSubclassIdConstantVector :: ValueSubclassId
callingConventionSPIR_KERNEL :: CallingConvention
newtype CodeGenFileType
CodeGenFileType :: CUInt -> CodeGenFileType
codeModelMedium :: CodeModel
rmwOperationUMax :: RMWOperation
codeGenOptLevelDefault :: CodeGenOptLevel
callingConventionIntel_OCL_BI :: CallingConvention
valueSubclassIdConstantPointerNull :: ValueSubclassId
codeModelLarge :: CodeModel
rmwOperationUMin :: RMWOperation
codeGenFileTypeAssembly :: CodeGenFileType
valueSubclassIdInlineAsm :: ValueSubclassId
codeGenOptLevelAggressive :: CodeGenOptLevel
callingConventionX86_64_SysV :: CallingConvention
codeModelP :: QuasiQuoter
rmwOperationP :: QuasiQuoter
codeGenFileTypeObject :: CodeGenFileType
newtype FloatABIType
FloatABIType :: CUInt -> FloatABIType
codeGenOptLevelP :: QuasiQuoter
callingConventionWin64 :: CallingConvention
valueSubclassIdInstruction :: ValueSubclassId
codeGenFileTypeP :: QuasiQuoter
floatABIDefault :: FloatABIType
valueSubclassIdP :: QuasiQuoter
callingConventionX86_VectorCall :: CallingConvention
floatABISoft :: FloatABIType
callingConventionHHVM :: CallingConvention
newtype FPOpFusionMode
FPOpFusionMode :: CUInt -> FPOpFusionMode
floatABIHard :: FloatABIType
callingConventionHHVM_C :: CallingConvention
fpOpFusionModeFast :: FPOpFusionMode
floatABIP :: QuasiQuoter
callingConventionX86_INTR :: CallingConvention
fpOpFusionModeStandard :: FPOpFusionMode
newtype ThreadModel
ThreadModel :: CUInt -> ThreadModel
callingConventionAVR_INTR :: CallingConvention
fpOpFusionModeStrict :: FPOpFusionMode
threadModelPOSIX :: ThreadModel
callingConventionAVR_SIGNAL :: CallingConvention
fpOpFusionModeP :: QuasiQuoter
threadModelSingle :: ThreadModel
callingConventionAVR_BUILTIN :: CallingConvention
newtype EABI
EABI :: CUInt -> EABI
threadModelP :: QuasiQuoter
callingConventionAMDGPU_VS :: CallingConvention
eabiVersionUnknown :: EABI
callingConventionAMDGPU_GS :: CallingConvention
eabiVersionDefault :: EABI
newtype DebuggerKind
DebuggerKind :: CUInt -> DebuggerKind
callingConventionAMDGPU_PS :: CallingConvention
eabiVersionEABI4 :: EABI
debuggerKindDefault :: DebuggerKind
callingConventionAMDGPU_CS :: CallingConvention
eabiVersionEABI5 :: EABI
debuggerKindGDB :: DebuggerKind
callingConventionAMDGPU_KERNEL :: CallingConvention
newtype FPDenormalMode
FPDenormalMode :: CUInt -> FPDenormalMode
eabiVersionGNU :: EABI
debuggerKindLLDB :: DebuggerKind
callingConventionX86_RegCall :: CallingConvention
eabiVersionP :: QuasiQuoter
fpDenormalModeIEEE :: FPDenormalMode
debuggerKindSCE :: DebuggerKind
callingConventionAMDGPU_HS :: CallingConvention
fpDenormalModePreserveSign :: FPDenormalMode
newtype ExceptionHandling
ExceptionHandling :: CUInt -> ExceptionHandling
debuggerKindP :: QuasiQuoter
callingConventionMSP430_BUILTIN :: CallingConvention
fpDenormalModePositiveZero :: FPDenormalMode
callingConventionP :: QuasiQuoter
exceptionHandlingNone :: ExceptionHandling
fpDenormalModeP :: QuasiQuoter
exceptionHandlingDwarfCFI :: ExceptionHandling
newtype TargetOptionFlag
TargetOptionFlag :: CUInt -> TargetOptionFlag
exceptionHandlingSjLj :: ExceptionHandling
targetOptionFlagPrintMachineCode :: TargetOptionFlag
exceptionHandlingARM :: ExceptionHandling
targetOptionFlagUnsafeFPMath :: TargetOptionFlag
newtype MCTargetOptionFlag
MCTargetOptionFlag :: CUInt -> MCTargetOptionFlag
exceptionHandlingWinEH :: ExceptionHandling
targetOptionFlagNoInfsFPMath :: TargetOptionFlag
exceptionHandlingP :: QuasiQuoter
mcTargetOptionFlagSanitizeAddress :: MCTargetOptionFlag
targetOptionFlagNoNaNsFPMath :: TargetOptionFlag
mcTargetOptionFlagMCRelaxAll :: MCTargetOptionFlag
newtype DebugCompressionType
DebugCompressionType :: CUInt -> DebugCompressionType
targetOptionFlagNoTrappingFPMath :: TargetOptionFlag
mcTargetOptionFlagMCNoExecStack :: MCTargetOptionFlag
debugCompressionTypeNone :: DebugCompressionType
targetOptionFlagNoSignedZerosFPMath :: TargetOptionFlag
mcTargetOptionFlagMCFatalWarnings :: MCTargetOptionFlag
debugCompressionTypeGNU :: DebugCompressionType
targetOptionFlagHonorSignDependentRoundingFPMathOption :: TargetOptionFlag
newtype TypeKind
TypeKind :: CUInt -> TypeKind
mcTargetOptionFlagMCNoWarn :: MCTargetOptionFlag
debugCompressionTypeZ :: DebugCompressionType
targetOptionFlagNoZerosInBSS :: TargetOptionFlag
typeKindVoid :: TypeKind
mcTargetOptionFlagMCNoDeprecatedWarn :: MCTargetOptionFlag
debugCompressionTypeP :: QuasiQuoter
targetOptionFlagGuaranteedTailCallOpt :: TargetOptionFlag
typeKindHalf :: TypeKind
mcTargetOptionFlagMCSaveTempLabels :: MCTargetOptionFlag
targetOptionFlagStackSymbolOrdering :: TargetOptionFlag
typeKindFloat :: TypeKind
mcTargetOptionFlagMCUseDwarfDirectory :: MCTargetOptionFlag
targetOptionFlagEnableFastISel :: TargetOptionFlag
typeKindDouble :: TypeKind
mcTargetOptionFlagMCIncrementalLinkerCompatible :: MCTargetOptionFlag
targetOptionFlagUseInitArray :: TargetOptionFlag
typeKindX86_FP80 :: TypeKind
mcTargetOptionFlagMCPIECopyRelocations :: MCTargetOptionFlag
targetOptionFlagDisableIntegratedAS :: TargetOptionFlag
typeKindFP128 :: TypeKind
mcTargetOptionFlagShowMCEncoding :: MCTargetOptionFlag
targetOptionFlagRelaxELFRelocations :: TargetOptionFlag
typeKindPPC_FP128 :: TypeKind
mcTargetOptionFlagShowMCInst :: MCTargetOptionFlag
newtype ParameterAttributeKind
ParameterAttributeKind :: CUInt -> ParameterAttributeKind
targetOptionFlagFunctionSections :: TargetOptionFlag
typeKindLabel :: TypeKind
mcTargetOptionFlagAsmVerbose :: MCTargetOptionFlag
targetOptionFlagDataSections :: TargetOptionFlag
parameterAttributeKindAlignment :: ParameterAttributeKind
typeKindInteger :: TypeKind
mcTargetOptionFlagPreserveAsmComments :: MCTargetOptionFlag
parameterAttributeKindByVal :: ParameterAttributeKind
targetOptionFlagUniqueSectionNames :: TargetOptionFlag
newtype FunctionAttributeKind
FunctionAttributeKind :: CUInt -> FunctionAttributeKind
typeKindFunction :: TypeKind
mcTargetOptionFlagP :: QuasiQuoter
targetOptionFlagTrapUnreachable :: TargetOptionFlag
parameterAttributeKindDereferenceable :: ParameterAttributeKind
typeKindStruct :: TypeKind
functionAttributeKindAllocSize :: FunctionAttributeKind
targetOptionFlagEmulatedTLS :: TargetOptionFlag
parameterAttributeKindDereferenceableOrNull :: ParameterAttributeKind
typeKindArray :: TypeKind
functionAttributeKindAlwaysInline :: FunctionAttributeKind
newtype FloatSemantics
FloatSemantics :: CUInt -> FloatSemantics
targetOptionFlagEnableIPRA :: TargetOptionFlag
parameterAttributeKindInAlloca :: ParameterAttributeKind
typeKindPointer :: TypeKind
functionAttributeKindArgMemOnly :: FunctionAttributeKind
targetOptionFlagP :: QuasiQuoter
floatSemanticsIEEEhalf :: FloatSemantics
parameterAttributeKindInReg :: ParameterAttributeKind
typeKindVector :: TypeKind
functionAttributeKindBuiltin :: FunctionAttributeKind
floatSemanticsIEEEsingle :: FloatSemantics
parameterAttributeKindNest :: ParameterAttributeKind
newtype VerifierFailureAction
VerifierFailureAction :: CUInt -> VerifierFailureAction
typeKindMetadata :: TypeKind
functionAttributeKindCold :: FunctionAttributeKind
floatSemanticsIEEEdouble :: FloatSemantics
parameterAttributeKindNoAlias :: ParameterAttributeKind
typeKindX86_MMX :: TypeKind
functionAttributeKindConvergent :: FunctionAttributeKind
verifierFailureActionAbortProcess :: VerifierFailureAction
floatSemanticsIEEEquad :: FloatSemantics
parameterAttributeKindNoCapture :: ParameterAttributeKind
typeKindToken :: TypeKind
verifierFailureActionPrintMessage :: VerifierFailureAction
functionAttributeKindInaccessibleMemOnly :: FunctionAttributeKind
newtype LibFunc
LibFunc :: CUInt -> LibFunc
floatSemanticsPPCDoubleDouble :: FloatSemantics
parameterAttributeKindNonNull :: ParameterAttributeKind
typeKindP :: QuasiQuoter
verifierFailureActionReturnStatus :: VerifierFailureAction
functionAttributeKindInaccessibleMemOrArgMemOnly :: FunctionAttributeKind
libFunc__under_IO_getc :: LibFunc
floatSemanticsx87DoubleExtended :: FloatSemantics
parameterAttributeKindReadNone :: ParameterAttributeKind
verifierFailureActionP :: QuasiQuoter
functionAttributeKindInlineHint :: FunctionAttributeKind
libFunc__under_IO_putc :: LibFunc
floatSemanticsBogus :: FloatSemantics
parameterAttributeKindReadOnly :: ParameterAttributeKind
newtype JITSymbolFlags
JITSymbolFlags :: CUInt -> JITSymbolFlags
functionAttributeKindJumpTable :: FunctionAttributeKind
libFunc__ZdaPv :: LibFunc
floatSemanticsP :: QuasiQuoter
parameterAttributeKindReturned :: ParameterAttributeKind
jitSymbolFlagsNone :: JITSymbolFlags
functionAttributeKindMinSize :: FunctionAttributeKind
libFunc__ZdaPvRKSt9nothrow_t :: LibFunc
parameterAttributeKindSExt :: ParameterAttributeKind
jitSymbolFlagsWeak :: JITSymbolFlags
functionAttributeKindNaked :: FunctionAttributeKind
libFunc__ZdlPv :: LibFunc
parameterAttributeKindStructRet :: ParameterAttributeKind
jitSymbolFlagsExported :: JITSymbolFlags
functionAttributeKindNoBuiltin :: FunctionAttributeKind
libFunc__ZdlPvRKSt9nothrow_t :: LibFunc
parameterAttributeKindSwiftError :: ParameterAttributeKind
jitSymbolFlagsP :: QuasiQuoter
functionAttributeKindNoDuplicate :: FunctionAttributeKind
libFunc__Znaj :: LibFunc
parameterAttributeKindSwiftSelf :: ParameterAttributeKind
functionAttributeKindNoImplicitFloat :: FunctionAttributeKind
libFunc__ZnajRKSt9nothrow_t :: LibFunc
parameterAttributeKindWriteOnly :: ParameterAttributeKind
functionAttributeKindNoInline :: FunctionAttributeKind
libFunc__Znam :: LibFunc
parameterAttributeKindZExt :: ParameterAttributeKind
functionAttributeKindNoRecurse :: FunctionAttributeKind
libFunc__ZnamRKSt9nothrow_t :: LibFunc
parameterAttributeKindP :: QuasiQuoter
functionAttributeKindNoRedZone :: FunctionAttributeKind
libFunc__Znwj :: LibFunc
functionAttributeKindNoReturn :: FunctionAttributeKind
libFunc__ZnwjRKSt9nothrow_t :: LibFunc
functionAttributeKindNoUnwind :: FunctionAttributeKind
libFunc__Znwm :: LibFunc
functionAttributeKindNonLazyBind :: FunctionAttributeKind
libFunc__ZnwmRKSt9nothrow_t :: LibFunc
functionAttributeKindOptimizeForSize :: FunctionAttributeKind
libFunc__cospi :: LibFunc
functionAttributeKindOptimizeNone :: FunctionAttributeKind
libFunc__cospif :: LibFunc
functionAttributeKindReadNone :: FunctionAttributeKind
libFunc__cxa_atexit :: LibFunc
functionAttributeKindReadOnly :: FunctionAttributeKind
libFunc__cxa_guard_abort :: LibFunc
functionAttributeKindReturnsTwice :: FunctionAttributeKind
libFunc__cxa_guard_acquire :: LibFunc
functionAttributeKindSafeStack :: FunctionAttributeKind
libFunc__cxa_guard_release :: LibFunc
functionAttributeKindSanitizeAddress :: FunctionAttributeKind
libFunc__dunder_isoc99_scanf :: LibFunc
functionAttributeKindSanitizeMemory :: FunctionAttributeKind
libFunc__dunder_isoc99_sscanf :: LibFunc
functionAttributeKindSanitizeThread :: FunctionAttributeKind
libFunc__memcpy_chk :: LibFunc
functionAttributeKindSpeculatable :: FunctionAttributeKind
libFunc__sincospi_stret :: LibFunc
functionAttributeKindStackAlignment :: FunctionAttributeKind
libFunc__sincospif_stret :: LibFunc
functionAttributeKindStackProtect :: FunctionAttributeKind
libFunc__sinpi :: LibFunc
functionAttributeKindStackProtectReq :: FunctionAttributeKind
libFunc__sinpif :: LibFunc
functionAttributeKindStackProtectStrong :: FunctionAttributeKind
libFunc__sqrt_finite :: LibFunc
functionAttributeKindUWTable :: FunctionAttributeKind
libFunc__sqrtf_finite :: LibFunc
functionAttributeKindWriteOnly :: FunctionAttributeKind
libFunc__sqrtl_finite :: LibFunc
functionAttributeKindP :: QuasiQuoter
libFunc__dunder_strdup :: LibFunc
libFunc__dunder_strndup :: LibFunc
libFunc__dunder_strtok_r :: LibFunc
libFunc__abs :: LibFunc
libFunc__access :: LibFunc
libFunc__acos :: LibFunc
libFunc__acosf :: LibFunc
libFunc__acosh :: LibFunc
libFunc__acoshf :: LibFunc
libFunc__acoshl :: LibFunc
libFunc__acosl :: LibFunc
libFunc__asin :: LibFunc
libFunc__asinf :: LibFunc
libFunc__asinh :: LibFunc
libFunc__asinhf :: LibFunc
libFunc__asinhl :: LibFunc
libFunc__asinl :: LibFunc
libFunc__atan :: LibFunc
libFunc__atan2 :: LibFunc
libFunc__atan2f :: LibFunc
libFunc__atan2l :: LibFunc
libFunc__atanf :: LibFunc
libFunc__atanh :: LibFunc
libFunc__atanhf :: LibFunc
libFunc__atanhl :: LibFunc
libFunc__atanl :: LibFunc
libFunc__atof :: LibFunc
libFunc__atoi :: LibFunc
libFunc__atol :: LibFunc
libFunc__atoll :: LibFunc
libFunc__bcmp :: LibFunc
libFunc__bcopy :: LibFunc
libFunc__bzero :: LibFunc
libFunc__calloc :: LibFunc
libFunc__cbrt :: LibFunc
libFunc__cbrtf :: LibFunc
libFunc__cbrtl :: LibFunc
libFunc__ceil :: LibFunc
libFunc__ceilf :: LibFunc
libFunc__ceill :: LibFunc
libFunc__chmod :: LibFunc
libFunc__chown :: LibFunc
libFunc__clearerr :: LibFunc
libFunc__closedir :: LibFunc
libFunc__copysign :: LibFunc
libFunc__copysignf :: LibFunc
libFunc__copysignl :: LibFunc
libFunc__cos :: LibFunc
libFunc__cosf :: LibFunc
libFunc__cosh :: LibFunc
libFunc__coshf :: LibFunc
libFunc__coshl :: LibFunc
libFunc__cosl :: LibFunc
libFunc__ctermid :: LibFunc
libFunc__exp :: LibFunc
libFunc__exp10 :: LibFunc
libFunc__exp10f :: LibFunc
libFunc__exp10l :: LibFunc
libFunc__exp2 :: LibFunc
libFunc__exp2f :: LibFunc
libFunc__exp2l :: LibFunc
libFunc__expf :: LibFunc
libFunc__expl :: LibFunc
libFunc__expm1 :: LibFunc
libFunc__expm1f :: LibFunc
libFunc__expm1l :: LibFunc
libFunc__fabs :: LibFunc
libFunc__fabsf :: LibFunc
libFunc__fabsl :: LibFunc
libFunc__fclose :: LibFunc
libFunc__fdopen :: LibFunc
libFunc__feof :: LibFunc
libFunc__ferror :: LibFunc
libFunc__fflush :: LibFunc
libFunc__ffs :: LibFunc
libFunc__ffsl :: LibFunc
libFunc__ffsll :: LibFunc
libFunc__fgetc :: LibFunc
libFunc__fgetpos :: LibFunc
libFunc__fgets :: LibFunc
libFunc__fileno :: LibFunc
libFunc__fiprintf :: LibFunc
libFunc__flockfile :: LibFunc
libFunc__floor :: LibFunc
libFunc__floorf :: LibFunc
libFunc__floorl :: LibFunc
libFunc__fmax :: LibFunc
libFunc__fmaxf :: LibFunc
libFunc__fmaxl :: LibFunc
libFunc__fmin :: LibFunc
libFunc__fminf :: LibFunc
libFunc__fminl :: LibFunc
libFunc__fmod :: LibFunc
libFunc__fmodf :: LibFunc
libFunc__fmodl :: LibFunc
libFunc__fopen :: LibFunc
libFunc__fopen64 :: LibFunc
libFunc__fprintf :: LibFunc
libFunc__fputc :: LibFunc
libFunc__fputs :: LibFunc
libFunc__fread :: LibFunc
libFunc__free :: LibFunc
libFunc__frexp :: LibFunc
libFunc__frexpf :: LibFunc
libFunc__frexpl :: LibFunc
libFunc__fscanf :: LibFunc
libFunc__fseek :: LibFunc
libFunc__fseeko :: LibFunc
libFunc__fseeko64 :: LibFunc
libFunc__fsetpos :: LibFunc
libFunc__fstat :: LibFunc
libFunc__fstat64 :: LibFunc
libFunc__fstatvfs :: LibFunc
libFunc__fstatvfs64 :: LibFunc
libFunc__ftell :: LibFunc
libFunc__ftello :: LibFunc
libFunc__ftello64 :: LibFunc
libFunc__ftrylockfile :: LibFunc
libFunc__funlockfile :: LibFunc
libFunc__fwrite :: LibFunc
libFunc__getc :: LibFunc
libFunc__getc_unlocked :: LibFunc
libFunc__getchar :: LibFunc
libFunc__getenv :: LibFunc
libFunc__getitimer :: LibFunc
libFunc__getlogin_r :: LibFunc
libFunc__getpwnam :: LibFunc
libFunc__gets :: LibFunc
libFunc__gettimeofday :: LibFunc
libFunc__htonl :: LibFunc
libFunc__htons :: LibFunc
libFunc__iprintf :: LibFunc
libFunc__isascii :: LibFunc
libFunc__isdigit :: LibFunc
libFunc__labs :: LibFunc
libFunc__lchown :: LibFunc
libFunc__ldexp :: LibFunc
libFunc__ldexpf :: LibFunc
libFunc__ldexpl :: LibFunc
libFunc__llabs :: LibFunc
libFunc__log :: LibFunc
libFunc__log10 :: LibFunc
libFunc__log10f :: LibFunc
libFunc__log10l :: LibFunc
libFunc__log1p :: LibFunc
libFunc__log1pf :: LibFunc
libFunc__log1pl :: LibFunc
libFunc__log2 :: LibFunc
libFunc__log2f :: LibFunc
libFunc__log2l :: LibFunc
libFunc__logb :: LibFunc
libFunc__logbf :: LibFunc
libFunc__logbl :: LibFunc
libFunc__logf :: LibFunc
libFunc__logl :: LibFunc
libFunc__lstat :: LibFunc
libFunc__lstat64 :: LibFunc
libFunc__malloc :: LibFunc
libFunc__memalign :: LibFunc
libFunc__memccpy :: LibFunc
libFunc__memchr :: LibFunc
libFunc__memcmp :: LibFunc
libFunc__memcpy :: LibFunc
libFunc__memmove :: LibFunc
libFunc__memrchr :: LibFunc
libFunc__memset :: LibFunc
libFunc__memset_pattern16 :: LibFunc
libFunc__mkdir :: LibFunc
libFunc__mktime :: LibFunc
libFunc__modf :: LibFunc
libFunc__modff :: LibFunc
libFunc__modfl :: LibFunc
libFunc__nearbyint :: LibFunc
libFunc__nearbyintf :: LibFunc
libFunc__nearbyintl :: LibFunc
libFunc__ntohl :: LibFunc
libFunc__ntohs :: LibFunc
libFunc__open :: LibFunc
libFunc__open64 :: LibFunc
libFunc__opendir :: LibFunc
libFunc__pclose :: LibFunc
libFunc__perror :: LibFunc
libFunc__popen :: LibFunc
libFunc__posix_memalign :: LibFunc
libFunc__pow :: LibFunc
libFunc__powf :: LibFunc
libFunc__powl :: LibFunc
libFunc__pread :: LibFunc
libFunc__printf :: LibFunc
libFunc__putc :: LibFunc
libFunc__putchar :: LibFunc
libFunc__puts :: LibFunc
libFunc__pwrite :: LibFunc
libFunc__qsort :: LibFunc
libFunc__read :: LibFunc
libFunc__readlink :: LibFunc
libFunc__realloc :: LibFunc
libFunc__reallocf :: LibFunc
libFunc__realpath :: LibFunc
libFunc__remove :: LibFunc
libFunc__rename :: LibFunc
libFunc__rewind :: LibFunc
libFunc__rint :: LibFunc
libFunc__rintf :: LibFunc
libFunc__rintl :: LibFunc
libFunc__rmdir :: LibFunc
libFunc__round :: LibFunc
libFunc__roundf :: LibFunc
libFunc__roundl :: LibFunc
libFunc__scanf :: LibFunc
libFunc__setbuf :: LibFunc
libFunc__setitimer :: LibFunc
libFunc__setvbuf :: LibFunc
libFunc__sin :: LibFunc
libFunc__sinf :: LibFunc
libFunc__sinh :: LibFunc
libFunc__sinhf :: LibFunc
libFunc__sinhl :: LibFunc
libFunc__sinl :: LibFunc
libFunc__siprintf :: LibFunc
libFunc__snprintf :: LibFunc
libFunc__sprintf :: LibFunc
libFunc__sqrt :: LibFunc
libFunc__sqrtf :: LibFunc
libFunc__sqrtl :: LibFunc
libFunc__sscanf :: LibFunc
libFunc__stat :: LibFunc
libFunc__stat64 :: LibFunc
libFunc__statvfs :: LibFunc
libFunc__statvfs64 :: LibFunc
libFunc__stpcpy :: LibFunc
libFunc__stpncpy :: LibFunc
libFunc__strcasecmp :: LibFunc
libFunc__strcat :: LibFunc
libFunc__strchr :: LibFunc
libFunc__strcmp :: LibFunc
libFunc__strcoll :: LibFunc
libFunc__strcpy :: LibFunc
libFunc__strcspn :: LibFunc
libFunc__strdup :: LibFunc
libFunc__strlen :: LibFunc
libFunc__strncasecmp :: LibFunc
libFunc__strncat :: LibFunc
libFunc__strncmp :: LibFunc
libFunc__strncpy :: LibFunc
libFunc__strndup :: LibFunc
libFunc__strnlen :: LibFunc
libFunc__strpbrk :: LibFunc
libFunc__strrchr :: LibFunc
libFunc__strspn :: LibFunc
libFunc__strstr :: LibFunc
libFunc__strtod :: LibFunc
libFunc__strtof :: LibFunc
libFunc__strtok :: LibFunc
libFunc__strtok_r :: LibFunc
libFunc__strtol :: LibFunc
libFunc__strtold :: LibFunc
libFunc__strtoll :: LibFunc
libFunc__strtoul :: LibFunc
libFunc__strtoull :: LibFunc
libFunc__strxfrm :: LibFunc
libFunc__system :: LibFunc
libFunc__tan :: LibFunc
libFunc__tanf :: LibFunc
libFunc__tanh :: LibFunc
libFunc__tanhf :: LibFunc
libFunc__tanhl :: LibFunc
libFunc__tanl :: LibFunc
libFunc__times :: LibFunc
libFunc__tmpfile :: LibFunc
libFunc__tmpfile64 :: LibFunc
libFunc__toascii :: LibFunc
libFunc__trunc :: LibFunc
libFunc__truncf :: LibFunc
libFunc__truncl :: LibFunc
libFunc__uname :: LibFunc
libFunc__ungetc :: LibFunc
libFunc__unlink :: LibFunc
libFunc__unsetenv :: LibFunc
libFunc__utime :: LibFunc
libFunc__utimes :: LibFunc
libFunc__valloc :: LibFunc
libFunc__vfprintf :: LibFunc
libFunc__vfscanf :: LibFunc
libFunc__vprintf :: LibFunc
libFunc__vscanf :: LibFunc
libFunc__vsnprintf :: LibFunc
libFunc__vsprintf :: LibFunc
libFunc__vsscanf :: LibFunc
libFunc__write :: LibFunc
libFunc__P :: QuasiQuoter
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance Foreign.Storable.Storable LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance GHC.Num.Num LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance Data.Bits.Bits LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance Foreign.Storable.Storable LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance GHC.Num.Num LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance Data.Bits.Bits LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.VerifierFailureAction
instance GHC.Num.Num LLVM.Internal.FFI.LLVMCTypes.VerifierFailureAction
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.VerifierFailureAction
instance Data.Bits.Bits LLVM.Internal.FFI.LLVMCTypes.VerifierFailureAction
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.VerifierFailureAction
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.VerifierFailureAction
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.VerifierFailureAction
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.FloatSemantics
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.FloatSemantics
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.FloatSemantics
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.FloatSemantics
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.FloatSemantics
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.FunctionAttributeKind
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.FunctionAttributeKind
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.FunctionAttributeKind
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.FunctionAttributeKind
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.FunctionAttributeKind
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.ParameterAttributeKind
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.ParameterAttributeKind
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.ParameterAttributeKind
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.ParameterAttributeKind
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.ParameterAttributeKind
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.TypeKind
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.TypeKind
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.TypeKind
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.TypeKind
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.TypeKind
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.DebugCompressionType
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.DebugCompressionType
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.DebugCompressionType
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.DebugCompressionType
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.DebugCompressionType
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.MCTargetOptionFlag
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.MCTargetOptionFlag
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.MCTargetOptionFlag
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.MCTargetOptionFlag
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.MCTargetOptionFlag
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.TargetOptionFlag
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.TargetOptionFlag
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.TargetOptionFlag
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.TargetOptionFlag
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.TargetOptionFlag
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.ExceptionHandling
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.ExceptionHandling
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.ExceptionHandling
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.ExceptionHandling
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.ExceptionHandling
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.FPDenormalMode
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.FPDenormalMode
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.FPDenormalMode
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.FPDenormalMode
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.FPDenormalMode
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.DebuggerKind
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.DebuggerKind
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.DebuggerKind
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.DebuggerKind
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.DebuggerKind
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.EABI
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.EABI
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.EABI
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.EABI
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.EABI
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.ThreadModel
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.ThreadModel
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.ThreadModel
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.ThreadModel
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.ThreadModel
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.FPOpFusionMode
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.FPOpFusionMode
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.FPOpFusionMode
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.FPOpFusionMode
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.FPOpFusionMode
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.FloatABIType
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.FloatABIType
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.FloatABIType
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.FloatABIType
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.FloatABIType
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.CodeGenFileType
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.CodeGenFileType
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.CodeGenFileType
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.CodeGenFileType
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.CodeGenFileType
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.CodeGenOptLevel
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.CodeGenOptLevel
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.CodeGenOptLevel
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.CodeGenOptLevel
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.CodeGenOptLevel
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.CodeModel
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.CodeModel
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.CodeModel
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.CodeModel
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.CodeModel
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.RelocModel
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.RelocModel
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.RelocModel
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.RelocModel
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.RelocModel
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.RMWOperation
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.RMWOperation
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.RMWOperation
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.RMWOperation
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.RMWOperation
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.AsmDialect
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.AsmDialect
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.AsmDialect
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.AsmDialect
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.AsmDialect
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.DiagnosticKind
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.DiagnosticKind
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.DiagnosticKind
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.DiagnosticKind
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.DiagnosticKind
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.ValueSubclassId
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.ValueSubclassId
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.ValueSubclassId
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.ValueSubclassId
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.ValueSubclassId
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.ThreadLocalMode
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.ThreadLocalMode
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.ThreadLocalMode
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.ThreadLocalMode
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.ThreadLocalMode
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.CallingConvention
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.CallingConvention
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.CallingConvention
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.CallingConvention
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.CallingConvention
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.DLLStorageClass
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.DLLStorageClass
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.DLLStorageClass
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.DLLStorageClass
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.DLLStorageClass
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.COMDATSelectionKind
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.COMDATSelectionKind
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.COMDATSelectionKind
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.COMDATSelectionKind
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.COMDATSelectionKind
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.Visibility
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.Visibility
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.Visibility
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.Visibility
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.Visibility
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.Linkage
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.Linkage
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.Linkage
instance GHC.Read.Read LLVM.Internal.FFI.LLVMCTypes.Linkage
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.Linkage
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.TailCallKind
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.TailCallKind
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.TailCallKind
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.TailCallKind
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.UnnamedAddr
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.UnnamedAddr
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.UnnamedAddr
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.UnnamedAddr
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.FastMathFlags
instance Data.Bits.Bits LLVM.Internal.FFI.LLVMCTypes.FastMathFlags
instance GHC.Num.Num LLVM.Internal.FFI.LLVMCTypes.FastMathFlags
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.FastMathFlags
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.FastMathFlags
instance GHC.Classes.Ord LLVM.Internal.FFI.LLVMCTypes.FastMathFlags
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.FastMathFlags
instance Foreign.Storable.Storable LLVM.Internal.FFI.LLVMCTypes.MDKindID
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.FCmpPredicate
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.FCmpPredicate
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.FCmpPredicate
instance GHC.Classes.Ord LLVM.Internal.FFI.LLVMCTypes.FCmpPredicate
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.FCmpPredicate
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.ICmpPredicate
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.ICmpPredicate
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.ICmpPredicate
instance GHC.Classes.Ord LLVM.Internal.FFI.LLVMCTypes.ICmpPredicate
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.ICmpPredicate
instance GHC.Generics.Generic LLVM.Internal.FFI.LLVMCTypes.CPPOpcode
instance Data.Data.Data LLVM.Internal.FFI.LLVMCTypes.CPPOpcode
instance GHC.Show.Show LLVM.Internal.FFI.LLVMCTypes.CPPOpcode
instance GHC.Classes.Ord LLVM.Internal.FFI.LLVMCTypes.CPPOpcode
instance GHC.Classes.Eq LLVM.Internal.FFI.LLVMCTypes.CPPOpcode
instance Foreign.Storable.Storable c => Foreign.Storable.Storable (LLVM.Internal.FFI.LLVMCTypes.NothingAsEmptyString c)
instance Foreign.Storable.Storable (LLVM.Internal.FFI.LLVMCTypes.NothingAsMinusOne h)
instance Foreign.Storable.Storable a => Foreign.Storable.Storable (LLVM.Internal.FFI.LLVMCTypes.OwnerTransfered a)
instance Data.Data.Data Foreign.C.Types.CUInt

module LLVM.Internal.FFI.InstructionDefs
data InstructionKind
Terminator :: InstructionKind
Binary :: InstructionKind
Memory :: InstructionKind
Cast :: InstructionKind
FuncletPad :: InstructionKind
Other :: InstructionKind
data InstructionDef
InstructionDef :: CPPOpcode -> String -> String -> InstructionKind -> InstructionDef
[cppOpcode] :: InstructionDef -> CPPOpcode
[cAPIName] :: InstructionDef -> String
[cAPIClassName] :: InstructionDef -> String
[instructionKind] :: InstructionDef -> InstructionKind
instructionDefs :: [InstructionDef]
instance GHC.Show.Show LLVM.Internal.FFI.InstructionDefs.InstructionDef
instance GHC.Classes.Ord LLVM.Internal.FFI.InstructionDefs.InstructionDef
instance GHC.Classes.Eq LLVM.Internal.FFI.InstructionDefs.InstructionDef
instance GHC.Show.Show LLVM.Internal.FFI.InstructionDefs.InstructionKind
instance GHC.Classes.Ord LLVM.Internal.FFI.InstructionDefs.InstructionKind
instance GHC.Classes.Eq LLVM.Internal.FFI.InstructionDefs.InstructionKind

module LLVM.Internal.FFI.Attribute
type Slot = CUInt
type IntValue = Word64
data MixedAttributeType
data FunctionAttributeType
data ParameterAttributeType
data AttributeImpl a
data AttributeSetImpl a
data AttributeListImpl
type Attribute a = Ptr (AttributeImpl a)
type FunctionAttribute = Attribute FunctionAttributeType
type ParameterAttribute = Attribute ParameterAttributeType
newtype AttributeIndex
AttributeIndex :: CUInt -> AttributeIndex
type AttributeSet a = Ptr (AttributeSetImpl a)
type FunctionAttributeSet = AttributeSet FunctionAttributeType
type ParameterAttributeSet = AttributeSet ParameterAttributeType
type AttributeList = Ptr AttributeListImpl
forgetAttributeType :: AttributeSet a -> AttributeSet MixedAttributeType
functionIndex :: AttributeIndex
returnIndex :: AttributeIndex
data AttrSetDecoder a
AttrSetDecoder :: (forall b. a -> AttributeIndex -> IO (AttributeSet b)) -> (a -> IO CUInt) -> AttrSetDecoder a
[attrSetDecoderAttributesAtIndex] :: AttrSetDecoder a -> forall b. a -> AttributeIndex -> IO (AttributeSet b)
[attrSetDecoderCountParams] :: AttrSetDecoder a -> a -> IO CUInt
parameterAttributeKindAsEnum :: ParameterAttribute -> IO ParameterAttributeKind
functionAttributeKindAsEnum :: FunctionAttribute -> IO FunctionAttributeKind
isStringAttribute :: Attribute a -> IO LLVMBool
attributeKindAsString :: Attribute a -> Ptr CSize -> IO (Ptr CChar)
attributeValueAsString :: Attribute a -> Ptr CSize -> IO (Ptr CChar)
attributeValueAsInt :: Attribute a -> IO Word64
getNumAttributes :: AttributeSet a -> IO CUInt
getAttributes :: AttributeSet a -> Ptr (Attribute a) -> IO ()
getAttributeList :: Ptr Context -> AttributeIndex -> AttributeSet a -> IO AttributeList
buildAttributeList :: Ptr Context -> FunctionAttributeSet -> ParameterAttributeSet -> Ptr ParameterAttributeSet -> CUInt -> IO AttributeList
disposeAttributeList :: AttributeList -> IO ()
getAttributeSet :: Ptr Context -> Ptr (AttrBuilder a) -> IO (AttributeSet a)
disposeAttributeSet :: AttributeSet a -> IO ()
attributeSetsEqual :: AttributeSet a -> AttributeSet a -> IO LLVMBool
attributeSetHasAttributes :: AttributeSet a -> IO LLVMBool
data AttrBuilder a
type FunctionAttrBuilder = AttrBuilder FunctionAttributeType
type ParameterAttrBuilder = AttrBuilder ParameterAttributeType
getAttrBuilderSize :: CSize
attrBuilderFromSet :: AttributeSet a -> IO (Ptr (AttrBuilder a))
disposeAttrBuilder :: Ptr (AttrBuilder a) -> IO ()
mergeAttrBuilder :: Ptr (AttrBuilder a) -> Ptr (AttrBuilder a) -> IO ()
constructAttrBuilder :: Ptr Word8 -> IO (Ptr (AttrBuilder a))
destroyAttrBuilder :: Ptr (AttrBuilder a) -> IO ()
attrBuilderAddFunctionAttributeKind :: Ptr FunctionAttrBuilder -> FunctionAttributeKind -> IO ()
attrBuilderAddParameterAttributeKind :: Ptr ParameterAttrBuilder -> ParameterAttributeKind -> IO ()
attrBuilderAddStringAttribute :: Ptr (AttrBuilder a) -> Ptr CChar -> CSize -> Ptr CChar -> CSize -> IO ()
attrBuilderAddAlignment :: Ptr ParameterAttrBuilder -> Word64 -> IO ()
attrBuilderAddStackAlignment :: Ptr FunctionAttrBuilder -> Word64 -> IO ()
attrBuilderAddAllocSize' :: Ptr FunctionAttrBuilder -> CUInt -> CUInt -> LLVMBool -> IO ()
attrBuilderAddAllocSize :: Ptr FunctionAttrBuilder -> CUInt -> (CUInt, LLVMBool) -> IO ()
attrBuilderAddDereferenceable :: Ptr ParameterAttrBuilder -> Word64 -> IO ()
attrBuilderAddDereferenceableOrNull :: Ptr ParameterAttrBuilder -> Word64 -> IO ()
attributeGetAllocSizeArgs :: FunctionAttribute -> Ptr CUInt -> Ptr CUInt -> IO LLVMBool

module LLVM.Internal.Coding
class EncodeM e h c
encodeM :: EncodeM e h c => h -> e c
class DecodeM d h c
decodeM :: DecodeM d h c => c -> d h
genCodingInstance :: (Data c, Data h) => TypeQ -> Name -> [(c, h)] -> Q [Dec]
allocaArray :: (Integral i, Storable a, MonadAnyCont IO m) => i -> m (Ptr a)
alloca :: (Storable a, MonadAnyCont IO m) => m (Ptr a)
peek :: (Storable a, MonadIO m) => Ptr a -> m a
peekByteOff :: (Storable a, MonadIO m) => Ptr a -> Int -> m a
poke :: (Storable a, MonadIO m) => Ptr a -> a -> m ()
pokeByteOff :: (Storable a, MonadIO m) => Ptr a -> Int -> a -> m ()
peekArray :: (Integral i, Storable a, MonadIO m) => i -> Ptr a -> m [a]
instance (GHC.Base.Monad m, LLVM.Internal.Coding.DecodeM m h c, Foreign.Storable.Storable c, Control.Monad.IO.Class.MonadIO m) => LLVM.Internal.Coding.DecodeM m [h] (Foreign.C.Types.CUInt, GHC.Ptr.Ptr c)
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m GHC.Types.Bool LLVM.Internal.FFI.LLVMCTypes.LLVMBool
instance (GHC.Base.Monad m, LLVM.Internal.Coding.DecodeM m h (GHC.Ptr.Ptr c)) => LLVM.Internal.Coding.DecodeM m (GHC.Base.Maybe h) (GHC.Ptr.Ptr c)
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m (GHC.Base.Maybe GHC.Word.Word32) (Foreign.C.Types.CUInt, LLVM.Internal.FFI.LLVMCTypes.LLVMBool)
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m GHC.Types.Word Foreign.C.Types.CUInt
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m GHC.Word.Word32 Foreign.C.Types.CUInt
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m GHC.Word.Word64 Foreign.C.Types.CULong
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m GHC.Int.Int32 Foreign.C.Types.CInt
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m GHC.Types.Int Foreign.C.Types.CInt
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m GHC.Word.Word64 GHC.Word.Word64
instance (GHC.Base.Monad m, LLVM.Internal.Coding.EncodeM m h c, Foreign.Storable.Storable c, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO m) => LLVM.Internal.Coding.EncodeM m [h] (Foreign.C.Types.CUInt, GHC.Ptr.Ptr c)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m GHC.Types.Bool LLVM.Internal.FFI.LLVMCTypes.LLVMBool
instance (GHC.Base.Monad m, LLVM.Internal.Coding.EncodeM m h (GHC.Ptr.Ptr c)) => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe h) (GHC.Ptr.Ptr c)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe GHC.Types.Bool) (LLVM.Internal.FFI.LLVMCTypes.NothingAsMinusOne GHC.Types.Bool)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe GHC.Types.Word) (LLVM.Internal.FFI.LLVMCTypes.NothingAsMinusOne GHC.Types.Word)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe GHC.Word.Word32) (Foreign.C.Types.CUInt, LLVM.Internal.FFI.LLVMCTypes.LLVMBool)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m GHC.Types.Word Foreign.C.Types.CUInt
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m GHC.Word.Word32 Foreign.C.Types.CUInt
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m GHC.Word.Word64 Foreign.C.Types.CULong
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m GHC.Int.Int32 Foreign.C.Types.CInt
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m GHC.Word.Word64 GHC.Word.Word64

module LLVM.Internal.CallingConvention
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.CallingConvention.CallingConvention LLVM.Internal.FFI.LLVMCTypes.CallingConvention
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.CallingConvention.CallingConvention LLVM.Internal.FFI.LLVMCTypes.CallingConvention

module LLVM.Internal.Atomicity
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.Instruction.SynchronizationScope LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.Instruction.SynchronizationScope LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe LLVM.AST.Instruction.Atomicity) (LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope, LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering)
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m (GHC.Base.Maybe LLVM.AST.Instruction.Atomicity) (LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope, LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.Instruction.Atomicity (LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope, LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering)
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.Instruction.Atomicity (LLVM.Internal.FFI.LLVMCTypes.SynchronizationScope, LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.Instruction.MemoryOrdering LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.Instruction.MemoryOrdering LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe LLVM.AST.Instruction.MemoryOrdering) LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m (GHC.Base.Maybe LLVM.AST.Instruction.MemoryOrdering) LLVM.Internal.FFI.LLVMCTypes.MemoryOrdering

module LLVM.Internal.FFI.MemoryBuffer
data MemoryBuffer
createMemoryBufferWithContentsOfFile :: Ptr CChar -> Ptr (Ptr MemoryBuffer) -> Ptr (OwnerTransfered CString) -> IO LLVMBool
createMemoryBufferWithMemoryRange :: Ptr CChar -> CSize -> CString -> LLVMBool -> IO (Ptr MemoryBuffer)
getBufferStart :: Ptr MemoryBuffer -> IO (Ptr CChar)
getBufferSize :: Ptr MemoryBuffer -> IO CSize
disposeMemoryBuffer :: Ptr MemoryBuffer -> IO ()


-- | This module defines typeclasses to represent the relationships of an
--   object-oriented inheritance hierarchy
module LLVM.Internal.FFI.PtrHierarchy

-- | a class to represent safe casting of pointers to objects of
--   descendant-classes to ancestor-classes.
class DescendentOf a b
upCast :: DescendentOf a b => Ptr b -> Ptr a

-- | trivial casts

-- | a class to represent direct parent-child relationships
class ChildOf b c | c -> b

-- | ancestor-descentant relationships are build out of parent-child
--   relationships

-- | <a>http://llvm.org/doxygen/classllvm_1_1Value.html</a>
data Value

-- | <a>http://llvm.org/doxygen/classllvm_1_1Constant.html</a>
data Constant

-- | <a>http://llvm.org/doxygen/classllvm_1_1GlobalValue.html</a>
data GlobalValue

-- | <a>http://llvm.org/doxygen/classllvm_1_1GlobalObject.html</a>
data GlobalObject

-- | <a>http://llvm.org/doxygen/classllvm_1_1GlobalVariable.html</a>
data GlobalVariable

-- | <a>http://llvm.org/doxygen/classllvm_1_1GlobalAlias.html</a>
data GlobalAlias

-- | <a>http://llvm.org/doxygen/classllvm_1_1Function.html</a>
data Function

-- | <a>http://llvm.org/doxygen/classllvm_1_1BasicBlock.html</a>
data BasicBlock

-- | <a>http://llvm.org/doxygen/classllvm_1_1Argument.html</a>
data Parameter

-- | <a>http://llvm.org/doxygen/classllvm_1_1Instruction.html</a>
data Instruction

-- | <a>http://llvm.org/doxygen/classllvm_1_1BinaryOperator.html</a>
data BinaryOperator

-- | <a>http://llvm.org/doxygen/classllvm_1_1User.html</a>
data User

-- | <a>http://llvm.org/doxygen/classllvm_1_1MDNode.html</a>
data MDNode

-- | <a>http://llvm.org/doxygen/classllvm_1_1MDString.html</a>
data MDString

-- | <a>http://llvm.org/doxygen/classllvm_1_1ValueAsMetadata.html</a>
data MDValue

-- | <a>http://llvm.org/doxygen/classllvm_1_1NamedMDNode.html</a>
data NamedMetadata

-- | <a>http://llvm.org/doxygen/classllvm_1_1InlineAsm.html</a>
data InlineAsm

-- | <a>http://llvm.org/doxygen/classllvm_1_1Type.html</a>
data Type

-- | <a>http://llvm.org/doxygen/classllvm_1_1Metadata.html</a>
data Metadata

-- | 
--   <a>http://www.llvm.org/docs/doxygen/html/classllvm_1_1MetadataAsValue.html</a>
data MetadataAsVal

-- | 
--   <a>http://llvm.org/docs/doxygen/html/classllvm_1_1raw__ostream.html</a>
data RawOStream

-- | 
--   <a>http://llvm.org/docs/doxygen/html/classllvm_1_1raw__pwrite__stream.html</a>
data RawPWriteStream
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.RawOStream LLVM.Internal.FFI.PtrHierarchy.RawPWriteStream
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Value LLVM.Internal.FFI.PtrHierarchy.MetadataAsVal
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Metadata LLVM.Internal.FFI.PtrHierarchy.MDNode
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Metadata LLVM.Internal.FFI.PtrHierarchy.MDString
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Metadata LLVM.Internal.FFI.PtrHierarchy.MDValue
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Value LLVM.Internal.FFI.PtrHierarchy.InlineAsm
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.User LLVM.Internal.FFI.PtrHierarchy.Constant
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.User LLVM.Internal.FFI.PtrHierarchy.Instruction
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Value LLVM.Internal.FFI.PtrHierarchy.User
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Instruction LLVM.Internal.FFI.PtrHierarchy.BinaryOperator
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Value LLVM.Internal.FFI.PtrHierarchy.Parameter
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Value LLVM.Internal.FFI.PtrHierarchy.BasicBlock
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.GlobalObject LLVM.Internal.FFI.PtrHierarchy.Function
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.GlobalValue LLVM.Internal.FFI.PtrHierarchy.GlobalAlias
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.GlobalObject LLVM.Internal.FFI.PtrHierarchy.GlobalVariable
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.GlobalValue LLVM.Internal.FFI.PtrHierarchy.GlobalObject
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.PtrHierarchy.Constant LLVM.Internal.FFI.PtrHierarchy.GlobalValue
instance (LLVM.Internal.FFI.PtrHierarchy.DescendentOf a b, LLVM.Internal.FFI.PtrHierarchy.ChildOf b c) => LLVM.Internal.FFI.PtrHierarchy.DescendentOf a c
instance LLVM.Internal.FFI.PtrHierarchy.DescendentOf a a

module LLVM.Internal.FFI.Metadata
isAMDString :: Ptr Metadata -> IO (Ptr MDString)
isAMDNode :: Ptr Metadata -> IO (Ptr MDNode)
isAMDValue :: Ptr Metadata -> IO (Ptr MDValue)
isAMetadataOperand :: Ptr Value -> IO (Ptr MetadataAsVal)
getMDValue :: Ptr MDValue -> IO (Ptr Value)
getMetadataOperand :: Ptr MetadataAsVal -> IO (Ptr Metadata)
getMDKindIDInContext' :: Ptr Context -> Ptr CChar -> CUInt -> IO MDKindID
getMDKindIDInContext :: Ptr Context -> (Ptr CChar, CUInt) -> IO MDKindID
getMDKindNames :: Ptr Context -> Ptr (Ptr CChar) -> Ptr CUInt -> CUInt -> IO CUInt
mdStringInContext' :: Ptr Context -> CString -> CUInt -> IO (Ptr MDString)
mdValue :: Ptr Value -> IO (Ptr MDValue)
metadataOperand :: Ptr Context -> Ptr Metadata -> IO (Ptr Value)
mdStringInContext :: Ptr Context -> (CString, CUInt) -> IO (Ptr MDString)
getMDString :: Ptr MDString -> Ptr CUInt -> IO CString
createMDNodeInContext' :: Ptr Context -> Ptr (Ptr Metadata) -> CUInt -> IO (Ptr MDNode)
createMDNodeInContext :: Ptr Context -> (CUInt, Ptr (Ptr Metadata)) -> IO (Ptr MDNode)
createTemporaryMDNodeInContext :: Ptr Context -> IO (Ptr MDNode)
destroyTemporaryMDNode :: Ptr MDNode -> IO ()
getMDNodeNumOperands :: Ptr MDNode -> IO CUInt
getMDNodeOperands :: Ptr MDNode -> Ptr (Ptr Metadata) -> IO ()
getNamedMetadataName :: Ptr NamedMetadata -> Ptr CUInt -> IO (Ptr CChar)
getNamedMetadataNumOperands :: Ptr NamedMetadata -> IO CUInt
getNamedMetadataOperands :: Ptr NamedMetadata -> Ptr (Ptr MDNode) -> IO ()
namedMetadataAddOperands' :: Ptr NamedMetadata -> Ptr (Ptr MDNode) -> CUInt -> IO ()
metadataReplaceAllUsesWith :: Ptr MDNode -> Ptr Metadata -> IO ()
namedMetadataAddOperands :: Ptr NamedMetadata -> (CUInt, Ptr (Ptr MDNode)) -> IO ()

module LLVM.Internal.FFI.Instruction
isAInstruction :: Ptr Value -> IO (Ptr Instruction)
newtype COpcode
COpcode :: CUInt -> COpcode
getInstructionOpcode :: Ptr Instruction -> IO COpcode
getInstructionDefOpcode :: Ptr Instruction -> IO CPPOpcode
getICmpPredicate :: Ptr Instruction -> IO ICmpPredicate
getFCmpPredicate :: Ptr Instruction -> IO FCmpPredicate
getCallSiteCallingConvention :: Ptr Instruction -> IO CallingConvention
setCallSiteCallingConvention :: Ptr Instruction -> CallingConvention -> IO ()
getTailCallKind :: Ptr Instruction -> IO TailCallKind
setTailCallKind :: Ptr Instruction -> TailCallKind -> IO ()
getCallSiteCalledValue :: Ptr Instruction -> IO (Ptr Value)
getCallSiteNumArgOperands :: Ptr Instruction -> IO CUInt
getCallSiteAttributesAtIndex :: Ptr Instruction -> AttributeIndex -> IO (AttributeSet a)
setCallSiteAttributeList :: Ptr Instruction -> AttributeList -> IO ()
addIncoming' :: Ptr Instruction -> Ptr (Ptr Value) -> Ptr (Ptr BasicBlock) -> CUInt -> IO ()
addIncoming :: Ptr Instruction -> (CUInt, Ptr (Ptr Value)) -> (CUInt, Ptr (Ptr BasicBlock)) -> IO ()
countIncoming :: Ptr Instruction -> IO CUInt
getIncomingValue :: Ptr Instruction -> CUInt -> IO (Ptr Value)
getIncomingBlock :: Ptr Instruction -> CUInt -> IO (Ptr BasicBlock)
addCase :: Ptr Instruction -> Ptr Constant -> Ptr BasicBlock -> IO ()
getSwitchCases :: Ptr Instruction -> Ptr (Ptr Constant) -> Ptr (Ptr BasicBlock) -> IO ()
addDestination :: Ptr Instruction -> Ptr BasicBlock -> IO ()
getIndirectBrDests :: Ptr Instruction -> Ptr (Ptr BasicBlock) -> IO ()
getInstrAlignment :: Ptr Instruction -> IO CUInt
setInstrAlignment :: Ptr Instruction -> CUInt -> IO ()
getAllocaNumElements :: Ptr Instruction -> IO (Ptr Value)
getAllocatedType :: Ptr Instruction -> IO (Ptr Type)
getAtomicOrdering :: Ptr Instruction -> IO MemoryOrdering
getFailureAtomicOrdering :: Ptr Instruction -> IO MemoryOrdering
getSynchronizationScope :: Ptr Instruction -> IO SynchronizationScope
getAtomicity :: Ptr Instruction -> IO (SynchronizationScope, MemoryOrdering)
getVolatile :: Ptr Instruction -> IO LLVMBool
getInBounds :: Ptr Value -> IO LLVMBool
getAtomicRMWBinOp :: Ptr Instruction -> IO RMWOperation
countInstStructureIndices :: Ptr Instruction -> IO CUInt
getInstStructureIndices :: Ptr Instruction -> Ptr CUInt -> IO ()
addClause :: Ptr Instruction -> Ptr Constant -> IO ()
setCleanup :: Ptr Instruction -> LLVMBool -> IO ()
isCleanup :: Ptr Instruction -> IO LLVMBool
getNumClauses :: Ptr Instruction -> IO CUInt
getClause :: Ptr Instruction -> CUInt -> IO (Ptr Constant)
setMetadata :: Ptr Instruction -> MDKindID -> Ptr MDNode -> IO ()
getMetadata :: Ptr Instruction -> Ptr MDKindID -> Ptr (Ptr MDNode) -> CUInt -> IO CUInt
getCleanupPad :: Ptr Instruction -> IO (Ptr Instruction)
getUnwindDest :: Ptr Instruction -> IO (Ptr BasicBlock)
getParentPad :: Ptr Instruction -> IO (Ptr Value)
getNumArgOperands :: Ptr Instruction -> IO CUInt
getArgOperand :: Ptr Instruction -> CUInt -> IO (Ptr Value)
catchSwitchGetParentPad :: Ptr Instruction -> IO (Ptr Value)
catchSwitchGetUnwindDest :: Ptr Instruction -> IO (Ptr BasicBlock)
catchSwitchGetNumHandlers :: Ptr Instruction -> IO CUInt
catchSwitchGetHandler :: Ptr Instruction -> CUInt -> IO (Ptr BasicBlock)
catchSwitchAddHandler :: Ptr Instruction -> Ptr BasicBlock -> IO ()
catchRetGetCatchPad :: Ptr Instruction -> IO (Ptr Value)
catchRetGetSuccessor :: Ptr Instruction -> IO (Ptr BasicBlock)

module LLVM.Internal.FFI.InlineAssembly
isAInlineAsm :: Ptr Value -> IO (Ptr InlineAsm)
createInlineAsm :: Ptr Type -> CString -> CString -> LLVMBool -> LLVMBool -> AsmDialect -> IO (Ptr InlineAsm)
getInlineAsmAssemblyString :: Ptr InlineAsm -> IO CString
getInlineAsmConstraintString :: Ptr InlineAsm -> IO CString
inlineAsmHasSideEffects :: Ptr InlineAsm -> IO LLVMBool
inlineAsmIsAlignStack :: Ptr InlineAsm -> IO LLVMBool
getInlineAsmDialect :: Ptr InlineAsm -> IO AsmDialect


-- | FFI functions for handling the LLVM GlobalVariable class
module LLVM.Internal.FFI.GlobalVariable
isAGlobalVariable :: Ptr Value -> IO (Ptr GlobalVariable)
isGlobalConstant :: Ptr GlobalVariable -> IO LLVMBool
setGlobalConstant :: Ptr GlobalVariable -> LLVMBool -> IO ()
getInitializer :: Ptr GlobalVariable -> IO (Ptr Constant)
setInitializer :: Ptr GlobalVariable -> Ptr Constant -> IO ()


-- | FFI functions for handling the LLVM GlobalValue class
module LLVM.Internal.FFI.GlobalValue
data COMDAT
isAGlobalValue :: Ptr Value -> IO (Ptr GlobalValue)
getLinkage :: Ptr GlobalValue -> IO Linkage
setLinkage :: Ptr GlobalValue -> Linkage -> IO ()
getSection :: Ptr GlobalValue -> Ptr CSize -> IO CString
setSection :: Ptr GlobalValue -> CString -> IO ()
getCOMDAT :: Ptr GlobalValue -> IO (Ptr COMDAT)
setCOMDAT :: Ptr GlobalObject -> Ptr COMDAT -> IO ()
getCOMDATName :: Ptr COMDAT -> Ptr CSize -> IO (Ptr CChar)
getCOMDATSelectionKind :: Ptr COMDAT -> IO COMDATSelectionKind
setCOMDATSelectionKind :: Ptr COMDAT -> COMDATSelectionKind -> IO ()
getVisibility :: Ptr GlobalValue -> IO Visibility
setVisibility :: Ptr GlobalValue -> Visibility -> IO ()
getDLLStorageClass :: Ptr GlobalValue -> IO DLLStorageClass
setDLLStorageClass :: Ptr GlobalValue -> DLLStorageClass -> IO ()
getAlignment :: Ptr GlobalValue -> IO CUInt
setAlignment :: Ptr GlobalValue -> CUInt -> IO ()
getUnnamedAddr :: Ptr GlobalValue -> IO UnnamedAddr
setUnnamedAddr :: Ptr GlobalValue -> UnnamedAddr -> IO ()
getThreadLocalMode :: Ptr GlobalValue -> IO ThreadLocalMode
setThreadLocalMode :: Ptr GlobalValue -> ThreadLocalMode -> IO ()


-- | FFI functions for handling the LLVM GlobalAlias class
module LLVM.Internal.FFI.GlobalAlias

-- | test if a <a>Value</a> is a <a>GlobalAlias</a>
isAGlobalAlias :: Ptr Value -> IO (Ptr GlobalAlias)

-- | get the constant aliased by this alias
getAliasee :: Ptr GlobalAlias -> IO (Ptr Constant)

-- | set the constant aliased by this alias
setAliasee :: Ptr GlobalAlias -> Ptr Constant -> IO ()

module LLVM.Internal.FFI.Function
getFunctionCallingConvention :: Ptr Function -> IO CallingConvention
setFunctionCallingConvention :: Ptr Function -> CallingConvention -> IO ()
setAttributeList :: Ptr Function -> AttributeList -> IO ()
attributesAtIndex :: Ptr Function -> AttributeIndex -> IO (AttributeSet b)
getFirstBasicBlock :: Ptr Function -> IO (Ptr BasicBlock)
getLastBasicBlock :: Ptr Function -> IO (Ptr BasicBlock)
getNextBasicBlock :: Ptr BasicBlock -> IO (Ptr BasicBlock)
appendBasicBlockInContext :: Ptr Context -> Ptr Function -> CString -> IO (Ptr BasicBlock)
countParams :: Ptr Function -> IO CUInt
getParams :: Ptr Function -> Ptr (Ptr Parameter) -> IO ()
getGC :: Ptr Function -> IO CString
setGC :: Ptr Function -> CString -> IO ()
hasPrefixData :: Ptr Function -> IO LLVMBool
getPrefixData :: Ptr Function -> IO (Ptr Constant)
setPrefixData :: Ptr Function -> Ptr Constant -> IO ()
hasPersonalityFn :: Ptr Function -> IO LLVMBool
setPersonalityFn :: Ptr Function -> Ptr Constant -> IO ()
getPersonalityFn :: Ptr Function -> IO (Ptr Constant)

module LLVM.Internal.FFI.DataLayout
data DataLayout
createDataLayout :: CString -> IO (Ptr DataLayout)
disposeDataLayout :: Ptr DataLayout -> IO ()
dataLayoutToString :: Ptr DataLayout -> IO (OwnerTransfered CString)
getTypeAllocSize :: Ptr DataLayout -> Ptr Type -> IO Word64

module LLVM.Internal.FFI.OrcJIT
data JITSymbol
data LambdaResolver
data LinkingLayer
data ObjectLinkingLayer
newtype TargetAddress
TargetAddress :: Word64 -> TargetAddress
type SymbolResolverFn = CString -> Ptr JITSymbol -> IO ()
wrapSymbolResolverFn :: SymbolResolverFn -> IO (FunPtr SymbolResolverFn)
disposeSymbol :: Ptr JITSymbol -> IO ()
createLambdaResolver :: FunPtr SymbolResolverFn -> FunPtr SymbolResolverFn -> IO (Ptr LambdaResolver)
createObjectLinkingLayer :: IO (Ptr ObjectLinkingLayer)
disposeLinkingLayer :: Ptr LinkingLayer -> IO ()
getAddress :: Ptr JITSymbol -> Ptr (OwnerTransfered CString) -> IO TargetAddress
getFlags :: Ptr JITSymbol -> IO JITSymbolFlags
setJITSymbol :: Ptr JITSymbol -> TargetAddress -> JITSymbolFlags -> IO ()
getMangledSymbol :: Ptr CString -> CString -> Ptr DataLayout -> IO ()
disposeMangledSymbol :: CString -> IO ()
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.OrcJIT.LinkingLayer LLVM.Internal.FFI.OrcJIT.ObjectLinkingLayer

module LLVM.Internal.FFI.Cleanup
foreignDecl :: String -> String -> [TypeQ] -> TypeQ -> DecsQ

-- | The LLVM C-API for instructions with boolean flags (e.g. nsw) and is
--   weak, so they get separated out for different handling. This check is
--   an accurate but crude test for whether an instruction needs such
--   handling.
hasFlags :: [Type] -> Bool
typeMapping :: Type -> TypeQ


-- | FFI functions for handling the LLVM BinaryOperator class
module LLVM.Internal.FFI.BinaryOperator
isABinaryOperator :: Ptr Value -> IO (Ptr BinaryOperator)
hasNoSignedWrap :: Ptr Value -> IO LLVMBool
hasNoUnsignedWrap :: Ptr Value -> IO LLVMBool
isExact :: Ptr Value -> IO LLVMBool
getFastMathFlags :: Ptr Value -> IO FastMathFlags


-- | <a>http://llvm.org/doxygen/classllvm_1_1BasicBlock.html</a>
module LLVM.Internal.FFI.BasicBlock

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueBasicBlock.html#gab57c996ff697ef40966432055ae47a4e</a>
isABasicBlock :: Ptr Value -> IO (Ptr BasicBlock)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueBasicBlock.html#ga754e45f69f4b784b658d9e379943f354</a>
getBasicBlockTerminator :: Ptr BasicBlock -> IO (Ptr Instruction)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueBasicBlock.html#ga9baf824cd325ad211027b23fce8a7494</a>
getFirstInstruction :: Ptr BasicBlock -> IO (Ptr Instruction)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueBasicBlock.html#gaa0bb2c95802d06bf94f4c55e61fc3477</a>
getLastInstruction :: Ptr BasicBlock -> IO (Ptr Instruction)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueInstruction.html#ga1b4c3bd197e86e8bffdda247ddf8ec5e</a>
getNextInstruction :: Ptr Instruction -> IO (Ptr Instruction)

module LLVM.Internal.FFI.RawOStream
type RawPWriteStreamCallback = Ptr RawPWriteStream -> IO ()
wrapRawPWriteStreamCallback :: RawPWriteStreamCallback -> IO (FunPtr RawPWriteStreamCallback)
withFileRawPWriteStream' :: CString -> LLVMBool -> LLVMBool -> Ptr (OwnerTransfered CString) -> FunPtr RawPWriteStreamCallback -> IO LLVMBool
withFileRawPWriteStream :: CString -> LLVMBool -> LLVMBool -> Ptr (OwnerTransfered CString) -> RawPWriteStreamCallback -> IO LLVMBool
withBufferRawPWriteStream' :: FunPtr ByteRangeCallback -> FunPtr RawPWriteStreamCallback -> IO ()
withBufferRawPWriteStream :: ByteRangeCallback -> RawPWriteStreamCallback -> IO ()


-- | FFI functions for handling the LLVM SMDiagnostic class
module LLVM.Internal.FFI.SMDiagnostic
data SMDiagnostic

-- | allocate an SMDiagnostic object
createSMDiagnostic :: IO (Ptr SMDiagnostic)
disposeSMDiagnostic :: Ptr SMDiagnostic -> IO ()
getSMDiagnosticKind :: Ptr SMDiagnostic -> IO DiagnosticKind
getSMDiagnosticLineNo :: Ptr SMDiagnostic -> IO CInt
getSMDiagnosticColumnNo :: Ptr SMDiagnostic -> IO CInt
getSMDiagnosticFilename :: Ptr SMDiagnostic -> Ptr CUInt -> IO CString
getSMDiagnosticMessage :: Ptr SMDiagnostic -> Ptr CUInt -> IO CString
getSMDiagnosticLineContents :: Ptr SMDiagnostic -> Ptr CUInt -> IO CString

module LLVM.Internal.FFI.ShortByteString
packCString :: CString -> IO ShortByteString
packCStringLen :: CStringLen -> IO ShortByteString
useAsCString :: ShortByteString -> (CString -> IO a) -> IO a
useAsCStringLen :: ShortByteString -> (CStringLen -> IO a) -> IO a

module LLVM.Internal.FFI.Threading
isMultithreaded :: IO LLVMBool


-- | Code used with Template Haskell to build the FFI for transform passes.
module LLVM.Internal.FFI.Transforms

-- | does the constructor for this pass require a TargetMachine object
needsTargetMachine :: String -> Bool

-- | Translate a Haskell name (used in the public Haskell interface,
--   typically not abbreviated) | for a pass into the (sometimes obscure,
--   sometimes abbreviated) name used in the LLVM C interface. | This
--   translation includes, by choice of prefix, whether the C interface
--   implementation is found in | the LLVM distribution (<a>LLVM</a>
--   prefix) or either not available or broken there and so implemented |
--   as part of this Haskell package (<a>LLVM_Hs_</a> prefix).
cName :: String -> String


-- | Functions for handling the LLVM types
module LLVM.Internal.FFI.Type

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreType.html#ga112756467f0988613faa6043d674d843</a>
getTypeKind :: Ptr Type -> IO TypeKind

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeInt.html#gadfb8ba2f605f0860a4bf2e3c480ab6a2</a>
getIntTypeWidth :: Ptr Type -> IO (CUInt)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFunction.html#ga2970f0f4d9ee8a0f811f762fb2fa7f82</a>
isFunctionVarArg :: Ptr Type -> IO LLVMBool

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFunction.html#gacfa4594cbff421733add602a413cae9f</a>
getReturnType :: Ptr Type -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFunction.html#ga44fa41d22ed1f589b8202272f54aad77</a>
countParamTypes :: Ptr Type -> IO CUInt

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFunction.html#ga83dd3a49a0f3f017f4233fc0d667bda2</a>
getParamTypes :: Ptr Type -> Ptr (Ptr Type) -> IO ()

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeSequential.html#ga0b03e26a2d254530a9b5c279cdf52257</a>
getElementType :: Ptr Type -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeInt.html#ga2e5db8cbc30daa156083f2c42989138d</a>
intTypeInContext :: Ptr Context -> CUInt -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFunction.html#ga8b0c32e7322e5c6c1bf7eb95b0961707</a>
functionType' :: Ptr Type -> Ptr (Ptr Type) -> CUInt -> LLVMBool -> IO (Ptr Type)
functionType :: Ptr Type -> (CUInt, Ptr (Ptr Type)) -> LLVMBool -> IO (Ptr Type)
newtype AddrSpace
AddrSpace :: CUInt -> AddrSpace

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeSequential.html#ga299fe6147083678d0494b1b875f542fae</a>
pointerType :: Ptr Type -> AddrSpace -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeSequential.html#ga124b162b69b5def41dde2fda3668cbd9</a>
getPointerAddressSpace :: Ptr Type -> IO AddrSpace

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeSequential.html#ga5ec731adf74fb40bc3b401956d0c6ff2</a>
vectorType :: Ptr Type -> CUInt -> IO (Ptr Type)

-- | what
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeSequential.html#gabd1666e080f693e1af0b4018005cd927</a>
--   | would be if it supported 64-bit array sizes, as the C++ type does.
arrayType :: Ptr Type -> Word64 -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeStruct.html#gaff2af74740a22f7d18701f0d8c3e5a6f</a>
structTypeInContext' :: Ptr Context -> Ptr (Ptr Type) -> CUInt -> LLVMBool -> IO (Ptr Type)
structTypeInContext :: Ptr Context -> (CUInt, Ptr (Ptr Type)) -> LLVMBool -> IO (Ptr Type)
structCreateNamed :: Ptr Context -> CString -> IO (Ptr Type)
getStructName :: Ptr Type -> IO CString
structIsLiteral :: Ptr Type -> IO LLVMBool
structIsOpaque :: Ptr Type -> IO LLVMBool

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeStruct.html#ga3e940e660375ae0cbdde81c0d8ec91e3</a>
isPackedStruct :: Ptr Type -> IO LLVMBool

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeStruct.html#gaf32e6d6bcec38b786efbef689b0dddf7</a>
countStructElementTypes :: Ptr Type -> IO CUInt
getStructElementTypes :: Ptr Type -> Ptr (Ptr Type) -> IO ()
structSetBody' :: Ptr Type -> Ptr (Ptr Type) -> CUInt -> LLVMBool -> IO ()
structSetBody :: Ptr Type -> (CUInt, Ptr (Ptr Type)) -> LLVMBool -> IO ()

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeSequential.html#gafb88a5ebd2a8062e105854910dc7ca17</a>
getVectorSize :: Ptr Type -> IO CUInt

-- | what
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeSequential.html#ga02dc08041a12265cb700ee469497df63</a>
--   | would be if it supported 64 bit lengths
getArrayLength :: Ptr Type -> IO Word64

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeOther.html#ga1c78ca6d7bf279330b9195fa52f23828</a>
voidTypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFloat.html#ga3a5332a1d075602bccad7576d1a8e36f</a>
halfTypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFloat.html#ga529c83a8a5461e5beac19eb867216e3c</a>
floatTypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFloat.html#ga200527010747eab31b73d3e3f6d94935</a>
doubleTypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFloat.html#ga24f77b84b625ed3dd516b52480606093</a>
x86FP80TypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFloat.html#ga1c02fb08f9ae12a719ed42099d42ccd8</a>
fP128TypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeFloat.html#gac2491184fc3d8631c7b264c067f2f761</a>
ppcFP128TypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/classllvm_1_1Type.html#a28fdf240b8220065bc60d6d1b1a2f174</a>
metadataTypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/docs/doxygen/html/Core_8cpp.html#a5d3702e198e2373db7e31bb18879efc3</a>
tokenTypeInContext :: Ptr Context -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreTypeOther.html#ga7b7c56bf8406c50205fdd410b351ad81</a>
labelTypeInContext :: Ptr Context -> IO (Ptr Type)

module LLVM.Internal.FFI.Module
data Module
moduleCreateWithNameInContext :: CString -> Ptr Context -> IO (Ptr Module)
getModuleContext :: Ptr Module -> IO (Ptr Context)
disposeModule :: Ptr Module -> IO ()
getDataLayout :: Ptr Module -> IO CString
setDataLayout :: Ptr Module -> CString -> IO ()
getTargetTriple :: Ptr Module -> IO CString
setTargetTriple :: Ptr Module -> CString -> IO ()
getModuleIdentifier :: Ptr Module -> IO (OwnerTransfered CString)
getSourceFileName :: Ptr Module -> IO (OwnerTransfered CString)
setSourceFileName :: Ptr Module -> Ptr CChar -> IO ()
getFirstGlobal :: Ptr Module -> IO (Ptr GlobalVariable)
getNextGlobal :: Ptr GlobalVariable -> IO (Ptr GlobalVariable)
getFirstAlias :: Ptr Module -> IO (Ptr GlobalAlias)
getNextAlias :: Ptr GlobalAlias -> IO (Ptr GlobalAlias)
getOrInsertCOMDAT :: Ptr Module -> CString -> IO (Ptr COMDAT)
getFirstFunction :: Ptr Module -> IO (Ptr Function)
getNextFunction :: Ptr Function -> IO (Ptr Function)
getFirstNamedMetadata :: Ptr Module -> IO (Ptr NamedMetadata)
getNextNamedMetadata :: Ptr NamedMetadata -> IO (Ptr NamedMetadata)
addGlobalInAddressSpace :: Ptr Module -> Ptr Type -> CString -> CUInt -> IO (Ptr GlobalVariable)
justAddAlias :: Ptr Module -> Ptr Type -> AddrSpace -> CString -> IO (Ptr GlobalAlias)
addFunction :: Ptr Module -> CString -> Ptr Type -> IO (Ptr Function)
getNamedFunction :: Ptr Module -> CString -> IO (Ptr Function)
getOrAddNamedMetadata :: Ptr Module -> CString -> IO (Ptr NamedMetadata)
moduleAppendInlineAsm' :: Ptr Module -> Ptr CChar -> CUInt -> IO ()
newtype ModuleAsm a
ModuleAsm :: a -> ModuleAsm a
moduleAppendInlineAsm :: Ptr Module -> ModuleAsm (Ptr CChar, CUInt) -> IO ()
moduleGetInlineAsm :: Ptr Module -> IO (ModuleAsm CString)
linkModules :: Ptr Module -> Ptr Module -> IO LLVMBool

module LLVM.Internal.FFI.Target
data Target
initializeNativeTarget :: IO LLVMBool
lookupTarget :: CString -> CString -> Ptr (OwnerTransfered CString) -> Ptr (OwnerTransfered CString) -> IO (Ptr Target)
data TargetOptions
data MCTargetOptions
createTargetOptions :: IO (Ptr TargetOptions)
setTargetOptionFlag :: Ptr TargetOptions -> TargetOptionFlag -> LLVMBool -> IO ()
getTargetOptionsFlag :: Ptr TargetOptions -> TargetOptionFlag -> IO LLVMBool
setMCTargetOptionFlag :: Ptr MCTargetOptions -> MCTargetOptionFlag -> LLVMBool -> IO ()
getMCTargetOptionsFlag :: Ptr MCTargetOptions -> MCTargetOptionFlag -> IO LLVMBool
getCompressDebugSections :: Ptr TargetOptions -> IO DebugCompressionType
setCompressDebugSections :: Ptr TargetOptions -> DebugCompressionType -> IO ()
setStackAlignmentOverride :: Ptr TargetOptions -> CUInt -> IO ()
getStackAlignmentOverride :: Ptr TargetOptions -> IO CUInt
setFloatABIType :: Ptr TargetOptions -> FloatABIType -> IO ()
getFloatABIType :: Ptr TargetOptions -> IO FloatABIType
setAllowFPOpFusion :: Ptr TargetOptions -> FPOpFusionMode -> IO ()
getAllowFPOpFusion :: Ptr TargetOptions -> IO FPOpFusionMode
setThreadModel :: Ptr TargetOptions -> ThreadModel -> IO ()
getThreadModel :: Ptr TargetOptions -> IO ThreadModel
setEABIVersion :: Ptr TargetOptions -> EABI -> IO ()
getEABIVersion :: Ptr TargetOptions -> IO EABI
setDebuggerTuning :: Ptr TargetOptions -> DebuggerKind -> IO ()
getDebuggerTuning :: Ptr TargetOptions -> IO DebuggerKind
setFPDenormalMode :: Ptr TargetOptions -> FPDenormalMode -> IO ()
getFPDenormalMode :: Ptr TargetOptions -> IO FPDenormalMode
setExceptionModel :: Ptr TargetOptions -> ExceptionHandling -> IO ()
getExceptionModel :: Ptr TargetOptions -> IO ExceptionHandling
disposeTargetOptions :: Ptr TargetOptions -> IO ()
data TargetMachine
createTargetMachine :: Ptr Target -> CString -> CString -> CString -> Ptr TargetOptions -> RelocModel -> CodeModel -> CodeGenOptLevel -> IO (Ptr TargetMachine)
disposeTargetMachine :: Ptr TargetMachine -> IO ()
targetMachineOptions :: Ptr TargetMachine -> IO (Ptr TargetOptions)
machineCodeOptions :: Ptr TargetOptions -> IO (Ptr MCTargetOptions)
targetMachineEmit :: Ptr TargetMachine -> Ptr Module -> Ptr RawPWriteStream -> CodeGenFileType -> Ptr (OwnerTransfered CString) -> IO LLVMBool
targetMachineEmitToFile :: Ptr TargetMachine -> Ptr Module -> CString -> CodeGenFileType -> Ptr (OwnerTransfered CString) -> IO LLVMBool
targetMachineEmitToMemoryBuffer :: Ptr TargetMachine -> Ptr Module -> CodeGenFileType -> Ptr (OwnerTransfered CString) -> Ptr (Ptr MemoryBuffer) -> IO LLVMBool
data TargetLowering
getTargetMachineTriple :: Ptr TargetMachine -> IO (OwnerTransfered CString)
getDefaultTargetTriple :: IO (OwnerTransfered CString)
getProcessTargetTriple :: IO (OwnerTransfered CString)
getHostCPUName :: Ptr CSize -> IO CString
getHostCPUFeatures :: IO (OwnerTransfered CString)
getTargetMachineDataLayout :: Ptr TargetMachine -> IO (OwnerTransfered CString)
data TargetLibraryInfo
createTargetLibraryInfo :: CString -> IO (Ptr TargetLibraryInfo)
getLibFunc :: Ptr TargetLibraryInfo -> CString -> Ptr LibFunc -> IO LLVMBool
libFuncGetName :: Ptr TargetLibraryInfo -> LibFunc -> Ptr CSize -> IO CString
libFuncSetAvailableWithName :: Ptr TargetLibraryInfo -> LibFunc -> CString -> IO ()
disposeTargetLibraryInfo :: Ptr TargetLibraryInfo -> IO ()
initializeAllTargets :: IO ()
createTargetDataLayout :: Ptr TargetMachine -> IO (Ptr DataLayout)

module LLVM.Internal.FFI.OrcJIT.CompileLayer
data CompileLayer

-- | Abstract type representing a module in a <a>CompileLayer</a>.
newtype ModuleHandle
ModuleHandle :: Word -> ModuleHandle
disposeCompileLayer :: Ptr CompileLayer -> IO ()
addModule :: Ptr CompileLayer -> Ptr DataLayout -> Ptr Module -> Ptr LambdaResolver -> Ptr (OwnerTransfered CString) -> IO ModuleHandle
removeModule :: Ptr CompileLayer -> ModuleHandle -> IO ()
findSymbol :: Ptr CompileLayer -> CString -> LLVMBool -> IO (Ptr JITSymbol)
findSymbolIn :: Ptr CompileLayer -> ModuleHandle -> CString -> LLVMBool -> IO (Ptr JITSymbol)

module LLVM.Internal.FFI.OrcJIT.IRTransformLayer
data IRTransformLayer
type ModuleTransform = Ptr Module -> IO (Ptr Module)
wrapModuleTransform :: ModuleTransform -> IO (FunPtr ModuleTransform)
createIRTransformLayer :: Ptr CompileLayer -> FunPtr ModuleTransform -> IO (Ptr IRTransformLayer)
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.OrcJIT.CompileLayer.CompileLayer LLVM.Internal.FFI.OrcJIT.IRTransformLayer.IRTransformLayer

module LLVM.Internal.FFI.OrcJIT.IRCompileLayer
data IRCompileLayer
createIRCompileLayer :: Ptr LinkingLayer -> Ptr TargetMachine -> IO (Ptr IRCompileLayer)
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.OrcJIT.CompileLayer.CompileLayer LLVM.Internal.FFI.OrcJIT.IRCompileLayer.IRCompileLayer

module LLVM.Internal.FFI.OrcJIT.CompileOnDemandLayer
data IndirectStubsManagerBuilder
data JITCompileCallbackManager
data Set a
data CompileOnDemandLayer
type PartitioningFn = Ptr Function -> Ptr (Set (Ptr Function)) -> IO ()
wrapPartitioningFn :: PartitioningFn -> IO (FunPtr PartitioningFn)
wrapErrorHandler :: IO () -> IO (FunPtr (IO ()))
createLocalCompileCallbackManager :: CString -> TargetAddress -> IO (Ptr JITCompileCallbackManager)
disposeCallbackManager :: Ptr JITCompileCallbackManager -> IO ()
createLocalIndirectStubsManagerBuilder :: CString -> IO (Ptr IndirectStubsManagerBuilder)
disposeIndirectStubsManagerBuilder :: Ptr IndirectStubsManagerBuilder -> IO ()
insertFun :: Ptr (Set (Ptr Function)) -> Ptr Function -> IO ()
createCompileOnDemandLayer :: Ptr CompileLayer -> FunPtr PartitioningFn -> Ptr JITCompileCallbackManager -> Ptr IndirectStubsManagerBuilder -> LLVMBool -> IO (Ptr CompileOnDemandLayer)
instance LLVM.Internal.FFI.PtrHierarchy.ChildOf LLVM.Internal.FFI.OrcJIT.CompileLayer.CompileLayer LLVM.Internal.FFI.OrcJIT.CompileOnDemandLayer.CompileOnDemandLayer

module LLVM.Internal.FFI.ExecutionEngine
data ExecutionEngine
createExecutionEngineForModule :: Ptr (Ptr ExecutionEngine) -> Ptr Module -> Ptr (OwnerTransfered CString) -> IO CUInt
createInterpreterForModule :: Ptr (Ptr ExecutionEngine) -> Ptr Module -> Ptr (OwnerTransfered CString) -> IO CUInt
createJITCompilerForModule :: Ptr (Ptr ExecutionEngine) -> Ptr Module -> CUInt -> Ptr (OwnerTransfered CString) -> IO CUInt
createMCJITCompilerForModule :: Ptr (Ptr ExecutionEngine) -> Ptr Module -> Ptr MCJITCompilerOptions -> CSize -> Ptr (OwnerTransfered CString) -> IO CUInt
disposeExecutionEngine :: Ptr ExecutionEngine -> IO ()
addModule :: Ptr ExecutionEngine -> Ptr Module -> IO ()
removeModule :: Ptr ExecutionEngine -> Ptr Module -> Ptr (Ptr Module) -> Ptr CString -> IO CUInt
findFunction :: Ptr ExecutionEngine -> CString -> Ptr (Ptr Function) -> IO CUInt
getPointerToGlobal :: Ptr ExecutionEngine -> Ptr GlobalValue -> IO (Ptr ())
linkInInterpreter :: IO ()
linkInMCJIT :: IO ()
data MCJITCompilerOptions
getMCJITCompilerOptionsSize :: IO CSize
initializeMCJITCompilerOptions :: Ptr MCJITCompilerOptions -> CSize -> IO ()
setMCJITCompilerOptionsOptLevel :: Ptr MCJITCompilerOptions -> CUInt -> IO ()
setMCJITCompilerOptionsCodeModel :: Ptr MCJITCompilerOptions -> CodeModel -> IO ()
setMCJITCompilerOptionsNoFramePointerElim :: Ptr MCJITCompilerOptions -> LLVMBool -> IO ()
setMCJITCompilerOptionsEnableFastISel :: Ptr MCJITCompilerOptions -> LLVMBool -> IO ()


-- | Functions to read and write LLVM bitcode
module LLVM.Internal.FFI.Bitcode
parseBitcode :: Ptr Context -> Ptr MemoryBuffer -> Ptr (OwnerTransfered CString) -> IO (Ptr Module)
writeBitcode :: Ptr Module -> Ptr RawOStream -> IO ()


-- | Functions to read and write textual LLVM assembly
module LLVM.Internal.FFI.Assembly

-- | Use LLVM's parser to parse a string of llvm assembly in a memory
--   buffer to get a module
parseLLVMAssembly :: Ptr Context -> OwnerTransfered (Ptr MemoryBuffer) -> Ptr (OwnerTransfered CString) -> IO (Ptr Module)

-- | LLVM's serializer to generate a string of llvm assembly from a module
writeLLVMAssembly :: Ptr Module -> Ptr RawOStream -> IO ()

module LLVM.Internal.FFI.Analysis
verifyModule :: Ptr Module -> VerifierFailureAction -> Ptr (OwnerTransfered CString) -> IO LLVMBool


-- | FFI functions for handling the LLVM User class
module LLVM.Internal.FFI.User

-- | a blind type to correspond to llvm::Use
data Use

-- | test if a <a>Value</a> is a <a>User</a>
isAUser :: Ptr Value -> IO (Ptr User)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueUses.html#ga66a226d3d06ffada5c929656f4d97d35</a>
getFirstUse :: Ptr User -> IO (Ptr Use)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueUses.html#ga6ea72661bcca2b77bea57173317ec942</a>
getNextUse :: Ptr Use -> IO (Ptr Use)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueUser.html#ga2ad633a6afc7906f1afe329f244240f6</a>
getNumOperands :: Ptr User -> IO CUInt

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueUser.html#ga799d58a361054323cb457945071cbfdb</a>
getOperand :: Ptr User -> CUInt -> IO (Ptr Value)


-- | FFI functions for handling the LLVM Value class
module LLVM.Internal.FFI.Value

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueGeneral.html#ga12179f46b79de8436852a4189d4451e0</a>
typeOf :: Ptr Value -> IO (Ptr Type)

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueGeneral.html#ga70948786725c43968d15225dd584e5a9</a>
getValueName :: Ptr Value -> IO CString

-- | 
--   <a>http://llvm.org/doxygen/group__LLVMCCoreValueGeneral.html#gac1f61f74d83d218d4943c018e8fd8d13</a>
setValueName :: Ptr Value -> CString -> IO ()

-- | This function exposes the ID returned by llvm::Value::getValueID() |
--   <a>http://llvm.org/doxygen/classllvm_1_1Value.html#a2983b7b4998ef5b9f51b18c01588af3c</a>.
getValueSubclassId :: Ptr Value -> IO ValueSubclassId
replaceAllUsesWith :: Ptr Value -> Ptr Value -> IO ()
createArgument :: Ptr Type -> CString -> IO (Ptr Value)
dumpValue :: Ptr Value -> IO ()

module LLVM.Internal.FloatingPointPredicate
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.FloatingPointPredicate.FloatingPointPredicate LLVM.Internal.FFI.LLVMCTypes.FCmpPredicate
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.FloatingPointPredicate.FloatingPointPredicate LLVM.Internal.FFI.LLVMCTypes.FCmpPredicate

module LLVM.Internal.InstructionDefs
astInstructionRecs :: Map String Con
astConstantRecs :: Map String Con
instructionDefs :: Map String InstructionDef
data InstructionKind
Terminator :: InstructionKind
Binary :: InstructionKind
Memory :: InstructionKind
Cast :: InstructionKind
FuncletPad :: InstructionKind
Other :: InstructionKind
data InstructionDef
InstructionDef :: CPPOpcode -> String -> String -> InstructionKind -> InstructionDef
[cppOpcode] :: InstructionDef -> CPPOpcode
[cAPIName] :: InstructionDef -> String
[cAPIClassName] :: InstructionDef -> String
[instructionKind] :: InstructionDef -> InstructionKind
instrP :: QuasiQuoter
innerJoin :: Ord k => Map k a -> Map k b -> Map k (a, b)
outerJoin :: Ord k => Map k a -> Map k b -> Map k (Maybe a, Maybe b)


-- | FFI functions for handling the LLVM Constant class
module LLVM.Internal.FFI.Constant
isConstant :: Ptr Value -> IO (CUInt)
isAConstant :: Ptr Value -> IO (Ptr Constant)
isAConstantInt :: Ptr Value -> IO (Ptr Constant)
getConstantOperand :: Ptr Constant -> CUInt -> IO (Ptr Constant)
isAConstantPointerNull :: Ptr Value -> IO (Ptr Constant)
getConstantIntWords :: Ptr Constant -> Ptr CUInt -> IO (Ptr Word64)
constFloatDoubleValue :: Ptr Constant -> IO CDouble
constFloatFloatValue :: Ptr Constant -> IO CFloat
constStructInContext' :: Ptr Context -> Ptr (Ptr Constant) -> CUInt -> LLVMBool -> IO (Ptr Constant)
constStructInContext :: Ptr Context -> (CUInt, Ptr (Ptr Constant)) -> LLVMBool -> IO (Ptr Constant)
constNamedStruct' :: Ptr Type -> Ptr (Ptr Constant) -> CUInt -> IO (Ptr Constant)
constNamedStruct :: Ptr Type -> (CUInt, Ptr (Ptr Constant)) -> IO (Ptr Constant)
getConstantDataSequentialElementAsConstant :: Ptr Constant -> CUInt -> IO (Ptr Constant)
constantIntOfArbitraryPrecision' :: Ptr Type -> CUInt -> Ptr Word64 -> IO (Ptr Constant)
constantIntOfArbitraryPrecision :: Ptr Type -> (CUInt, Ptr Word64) -> IO (Ptr Constant)
constantFloatOfArbitraryPrecision :: Ptr Context -> CUInt -> Ptr Word64 -> FloatSemantics -> IO (Ptr Constant)
getConstantFloatWords :: Ptr Constant -> Ptr Word64 -> IO ()
constantVector' :: Ptr (Ptr Constant) -> CUInt -> IO (Ptr Constant)
constantVector :: (CUInt, Ptr (Ptr Constant)) -> IO (Ptr Constant)
constantNull :: Ptr Type -> IO (Ptr Constant)
constantArray' :: Ptr Type -> Ptr (Ptr Constant) -> CUInt -> IO (Ptr Constant)
constantArray :: Ptr Type -> (CUInt, Ptr (Ptr Constant)) -> IO (Ptr Constant)
constantCast :: CPPOpcode -> Ptr Constant -> Ptr Type -> IO (Ptr Constant)
constantBinaryOperator :: CPPOpcode -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantUDiv' :: LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantSub' :: LLVMBool -> LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantShuffleVector' :: Ptr Constant -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantShl' :: LLVMBool -> LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantSelect' :: Ptr Constant -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantSDiv' :: LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantMul' :: LLVMBool -> LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantLShr' :: LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantInsertValue' :: Ptr Constant -> Ptr Constant -> CUInt -> Ptr CUInt -> IO (Ptr Constant)
constantInsertElement' :: Ptr Constant -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantICmp' :: ICmpPredicate -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantFCmp' :: FCmpPredicate -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantExtractValue' :: Ptr Constant -> CUInt -> Ptr CUInt -> IO (Ptr Constant)
constantExtractElement' :: Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantAdd' :: LLVMBool -> LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantAShr' :: LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantUDiv :: LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantSub :: LLVMBool -> LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantShuffleVector :: Ptr Constant -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantShl :: LLVMBool -> LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantSelect :: Ptr Constant -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantSDiv :: LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantMul :: LLVMBool -> LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantLShr :: LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantInsertValue :: Ptr Constant -> Ptr Constant -> (CUInt, Ptr CUInt) -> IO (Ptr Constant)
constantInsertElement :: Ptr Constant -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantICmp :: ICmpPredicate -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantFCmp :: FCmpPredicate -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantExtractValue :: Ptr Constant -> (CUInt, Ptr CUInt) -> IO (Ptr Constant)
constantExtractElement :: Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantAdd :: LLVMBool -> LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantAShr :: LLVMBool -> Ptr Constant -> Ptr Constant -> IO (Ptr Constant)
constantGetElementPtr' :: Ptr Constant -> Ptr (Ptr Constant) -> CUInt -> IO (Ptr Constant)
constantInBoundsGetElementPtr' :: Ptr Constant -> Ptr (Ptr Constant) -> CUInt -> IO (Ptr Constant)
constantGetElementPtr :: LLVMBool -> Ptr Constant -> (CUInt, Ptr (Ptr Constant)) -> IO (Ptr Constant)
getConstantCPPOpcode :: Ptr Constant -> IO CPPOpcode
getConstantICmpPredicate :: Ptr Constant -> IO ICmpPredicate
getConstantFCmpPredicate :: Ptr Constant -> IO FCmpPredicate
getConstantIndices :: Ptr Constant -> Ptr CUInt -> IO (Ptr CUInt)
constantUndef :: Ptr Type -> IO (Ptr Constant)
blockAddress :: Ptr Value -> Ptr BasicBlock -> IO (Ptr Constant)
getBlockAddressFunction :: Ptr Constant -> IO (Ptr Value)
getBlockAddressBlock :: Ptr Constant -> IO (Ptr BasicBlock)
getConstTokenNone :: Ptr Context -> IO (Ptr Constant)


-- | FFI glue for llvm::IRBuilder - llvm's IR construction state object
module LLVM.Internal.FFI.Builder
data Builder
createBuilderInContext :: Ptr Context -> IO (Ptr Builder)
disposeBuilder :: Ptr Builder -> IO ()
positionBuilderAtEnd :: Ptr Builder -> Ptr BasicBlock -> IO ()
buildRet :: Ptr Builder -> Ptr Value -> IO (Ptr Instruction)
buildBr :: Ptr Builder -> Ptr BasicBlock -> IO (Ptr Instruction)
buildCondBr :: Ptr Builder -> Ptr Value -> Ptr BasicBlock -> Ptr BasicBlock -> IO (Ptr Instruction)
buildSwitch :: Ptr Builder -> Ptr Value -> Ptr BasicBlock -> CUInt -> IO (Ptr Instruction)
buildIndirectBr :: Ptr Builder -> Ptr Value -> CUInt -> IO (Ptr Instruction)
buildInvoke :: Ptr Builder -> Ptr Value -> Ptr (Ptr Value) -> CUInt -> Ptr BasicBlock -> Ptr BasicBlock -> CString -> IO (Ptr Instruction)
buildResume :: Ptr Builder -> Ptr Value -> IO (Ptr Instruction)
buildUnreachable :: Ptr Builder -> IO (Ptr Instruction)
buildCleanupRet :: Ptr Builder -> Ptr Value -> Ptr BasicBlock -> IO (Ptr Instruction)
buildCatchRet :: Ptr Builder -> Ptr Value -> Ptr BasicBlock -> IO (Ptr Instruction)
buildCatchSwitch :: Ptr Builder -> Ptr Value -> Ptr BasicBlock -> CUInt -> IO (Ptr Instruction)
buildZExt' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildXor' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildURem' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildUIToFP' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildUDiv' :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildTrunc' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildSub' :: Ptr Builder -> LLVMBool -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildShl' :: Ptr Builder -> LLVMBool -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildSRem' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildSIToFP' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildSExt' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildSDiv' :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildPtrToInt' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildOr' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildMul' :: Ptr Builder -> LLVMBool -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildLShr' :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildIntToPtr' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFSub' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildFRem' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildFPTrunc' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFPToUI' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFPToSI' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFPExt' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFMul' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildFDiv' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildFAdd' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildBitCast' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildAnd' :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildAddrSpaceCast' :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildAdd' :: Ptr Builder -> LLVMBool -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildAShr' :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildZExt :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildXor :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildURem :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildUIToFP :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildUDiv :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildTrunc :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildSub :: Ptr Builder -> LLVMBool -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildShl :: Ptr Builder -> LLVMBool -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildSRem :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildSIToFP :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildSExt :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildSDiv :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildPtrToInt :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildOr :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildMul :: Ptr Builder -> LLVMBool -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildLShr :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildIntToPtr :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFSub :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildFRem :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildFPTrunc :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFPToUI :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFPToSI :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFPExt :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildFMul :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildFDiv :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildFAdd :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildBitCast :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildAnd :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildAddrSpaceCast :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildAdd :: Ptr Builder -> LLVMBool -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildAShr :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> CString -> IO (Ptr BinaryOperator)
buildAlloca :: Ptr Builder -> Ptr Type -> Ptr Value -> CString -> IO (Ptr Instruction)
buildLoad' :: Ptr Builder -> LLVMBool -> Ptr Value -> MemoryOrdering -> SynchronizationScope -> CUInt -> CString -> IO (Ptr Instruction)
buildLoad :: Ptr Builder -> LLVMBool -> Ptr Value -> (SynchronizationScope, MemoryOrdering) -> CUInt -> CString -> IO (Ptr Instruction)
buildStore' :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> MemoryOrdering -> SynchronizationScope -> CUInt -> CString -> IO (Ptr Instruction)
buildStore :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> (SynchronizationScope, MemoryOrdering) -> CUInt -> CString -> IO (Ptr Instruction)
buildGetElementPtr' :: Ptr Builder -> Ptr Value -> Ptr (Ptr Value) -> CUInt -> CString -> IO (Ptr Instruction)
buildInBoundsGetElementPtr' :: Ptr Builder -> Ptr Value -> Ptr (Ptr Value) -> CUInt -> CString -> IO (Ptr Instruction)
buildGetElementPtr :: Ptr Builder -> LLVMBool -> Ptr Value -> (CUInt, Ptr (Ptr Value)) -> CString -> IO (Ptr Instruction)
buildFence' :: Ptr Builder -> MemoryOrdering -> SynchronizationScope -> CString -> IO (Ptr Instruction)
buildFence :: Ptr Builder -> (SynchronizationScope, MemoryOrdering) -> CString -> IO (Ptr Instruction)
buildCmpXchg' :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> Ptr Value -> MemoryOrdering -> MemoryOrdering -> SynchronizationScope -> CString -> IO (Ptr Instruction)
buildCmpXchg :: Ptr Builder -> LLVMBool -> Ptr Value -> Ptr Value -> Ptr Value -> (SynchronizationScope, MemoryOrdering) -> MemoryOrdering -> CString -> IO (Ptr Instruction)
buildAtomicRMW' :: Ptr Builder -> LLVMBool -> RMWOperation -> Ptr Value -> Ptr Value -> MemoryOrdering -> SynchronizationScope -> CString -> IO (Ptr Instruction)
buildAtomicRMW :: Ptr Builder -> LLVMBool -> RMWOperation -> Ptr Value -> Ptr Value -> (SynchronizationScope, MemoryOrdering) -> CString -> IO (Ptr Instruction)
buildICmp :: Ptr Builder -> ICmpPredicate -> Ptr Value -> Ptr Value -> CString -> IO (Ptr Instruction)
buildFCmp :: Ptr Builder -> FCmpPredicate -> Ptr Value -> Ptr Value -> CString -> IO (Ptr Instruction)
buildPhi :: Ptr Builder -> Ptr Type -> CString -> IO (Ptr Instruction)
buildCall :: Ptr Builder -> Ptr Value -> Ptr (Ptr Value) -> CUInt -> CString -> IO (Ptr Instruction)
buildSelect :: Ptr Builder -> Ptr Value -> Ptr Value -> Ptr Value -> CString -> IO (Ptr Instruction)
buildVAArg :: Ptr Builder -> Ptr Value -> Ptr Type -> CString -> IO (Ptr Instruction)
buildExtractElement :: Ptr Builder -> Ptr Value -> Ptr Value -> CString -> IO (Ptr Instruction)
buildInsertElement :: Ptr Builder -> Ptr Value -> Ptr Value -> Ptr Value -> CString -> IO (Ptr Instruction)
buildShuffleVector :: Ptr Builder -> Ptr Value -> Ptr Value -> Ptr Constant -> CString -> IO (Ptr Instruction)
buildExtractValue :: Ptr Builder -> Ptr Value -> Ptr CUInt -> CUInt -> CString -> IO (Ptr Instruction)
buildInsertValue :: Ptr Builder -> Ptr Value -> Ptr Value -> Ptr CUInt -> CUInt -> CString -> IO (Ptr Instruction)
buildLandingPad' :: Ptr Builder -> Ptr Type -> Ptr Value -> CUInt -> CString -> IO (Ptr Instruction)

-- | The personality should be set via the function
buildLandingPad :: Ptr Builder -> Ptr Type -> CUInt -> CString -> IO (Ptr Instruction)
buildCleanupPad :: Ptr Builder -> Ptr Value -> Ptr (Ptr Value) -> CUInt -> CString -> IO (Ptr Instruction)
buildCatchPad :: Ptr Builder -> Ptr Value -> Ptr (Ptr Value) -> CUInt -> CString -> IO (Ptr Instruction)
setFastMathFlags :: Ptr Builder -> FastMathFlags -> IO ()

module LLVM.Internal.IntegerPredicate
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.IntegerPredicate.IntegerPredicate LLVM.Internal.FFI.LLVMCTypes.ICmpPredicate
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.IntegerPredicate.IntegerPredicate LLVM.Internal.FFI.LLVMCTypes.ICmpPredicate

module LLVM.Internal.LibraryFunction

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1LibFunc.html#abf8f6830387f338fed0bce2e65108c6f</a>
data LibraryFunction
LF__under_IO_getc :: LibraryFunction
LF__under_IO_putc :: LibraryFunction
LF__ZdaPv :: LibraryFunction
LF__ZdaPvRKSt9nothrow_t :: LibraryFunction
LF__ZdlPv :: LibraryFunction
LF__ZdlPvRKSt9nothrow_t :: LibraryFunction
LF__Znaj :: LibraryFunction
LF__ZnajRKSt9nothrow_t :: LibraryFunction
LF__Znam :: LibraryFunction
LF__ZnamRKSt9nothrow_t :: LibraryFunction
LF__Znwj :: LibraryFunction
LF__ZnwjRKSt9nothrow_t :: LibraryFunction
LF__Znwm :: LibraryFunction
LF__ZnwmRKSt9nothrow_t :: LibraryFunction
LF__cospi :: LibraryFunction
LF__cospif :: LibraryFunction
LF__cxa_atexit :: LibraryFunction
LF__cxa_guard_abort :: LibraryFunction
LF__cxa_guard_acquire :: LibraryFunction
LF__cxa_guard_release :: LibraryFunction
LF__dunder_isoc99_scanf :: LibraryFunction
LF__dunder_isoc99_sscanf :: LibraryFunction
LF__memcpy_chk :: LibraryFunction
LF__sincospi_stret :: LibraryFunction
LF__sincospif_stret :: LibraryFunction
LF__sinpi :: LibraryFunction
LF__sinpif :: LibraryFunction
LF__sqrt_finite :: LibraryFunction
LF__sqrtf_finite :: LibraryFunction
LF__sqrtl_finite :: LibraryFunction
LF__dunder_strdup :: LibraryFunction
LF__dunder_strndup :: LibraryFunction
LF__dunder_strtok_r :: LibraryFunction
LF__abs :: LibraryFunction
LF__access :: LibraryFunction
LF__acos :: LibraryFunction
LF__acosf :: LibraryFunction
LF__acosh :: LibraryFunction
LF__acoshf :: LibraryFunction
LF__acoshl :: LibraryFunction
LF__acosl :: LibraryFunction
LF__asin :: LibraryFunction
LF__asinf :: LibraryFunction
LF__asinh :: LibraryFunction
LF__asinhf :: LibraryFunction
LF__asinhl :: LibraryFunction
LF__asinl :: LibraryFunction
LF__atan :: LibraryFunction
LF__atan2 :: LibraryFunction
LF__atan2f :: LibraryFunction
LF__atan2l :: LibraryFunction
LF__atanf :: LibraryFunction
LF__atanh :: LibraryFunction
LF__atanhf :: LibraryFunction
LF__atanhl :: LibraryFunction
LF__atanl :: LibraryFunction
LF__atof :: LibraryFunction
LF__atoi :: LibraryFunction
LF__atol :: LibraryFunction
LF__atoll :: LibraryFunction
LF__bcmp :: LibraryFunction
LF__bcopy :: LibraryFunction
LF__bzero :: LibraryFunction
LF__calloc :: LibraryFunction
LF__cbrt :: LibraryFunction
LF__cbrtf :: LibraryFunction
LF__cbrtl :: LibraryFunction
LF__ceil :: LibraryFunction
LF__ceilf :: LibraryFunction
LF__ceill :: LibraryFunction
LF__chmod :: LibraryFunction
LF__chown :: LibraryFunction
LF__clearerr :: LibraryFunction
LF__closedir :: LibraryFunction
LF__copysign :: LibraryFunction
LF__copysignf :: LibraryFunction
LF__copysignl :: LibraryFunction
LF__cos :: LibraryFunction
LF__cosf :: LibraryFunction
LF__cosh :: LibraryFunction
LF__coshf :: LibraryFunction
LF__coshl :: LibraryFunction
LF__cosl :: LibraryFunction
LF__ctermid :: LibraryFunction
LF__exp :: LibraryFunction
LF__exp10 :: LibraryFunction
LF__exp10f :: LibraryFunction
LF__exp10l :: LibraryFunction
LF__exp2 :: LibraryFunction
LF__exp2f :: LibraryFunction
LF__exp2l :: LibraryFunction
LF__expf :: LibraryFunction
LF__expl :: LibraryFunction
LF__expm1 :: LibraryFunction
LF__expm1f :: LibraryFunction
LF__expm1l :: LibraryFunction
LF__fabs :: LibraryFunction
LF__fabsf :: LibraryFunction
LF__fabsl :: LibraryFunction
LF__fclose :: LibraryFunction
LF__fdopen :: LibraryFunction
LF__feof :: LibraryFunction
LF__ferror :: LibraryFunction
LF__fflush :: LibraryFunction
LF__ffs :: LibraryFunction
LF__ffsl :: LibraryFunction
LF__ffsll :: LibraryFunction
LF__fgetc :: LibraryFunction
LF__fgetpos :: LibraryFunction
LF__fgets :: LibraryFunction
LF__fileno :: LibraryFunction
LF__fiprintf :: LibraryFunction
LF__flockfile :: LibraryFunction
LF__floor :: LibraryFunction
LF__floorf :: LibraryFunction
LF__floorl :: LibraryFunction
LF__fmax :: LibraryFunction
LF__fmaxf :: LibraryFunction
LF__fmaxl :: LibraryFunction
LF__fmin :: LibraryFunction
LF__fminf :: LibraryFunction
LF__fminl :: LibraryFunction
LF__fmod :: LibraryFunction
LF__fmodf :: LibraryFunction
LF__fmodl :: LibraryFunction
LF__fopen :: LibraryFunction
LF__fopen64 :: LibraryFunction
LF__fprintf :: LibraryFunction
LF__fputc :: LibraryFunction
LF__fputs :: LibraryFunction
LF__fread :: LibraryFunction
LF__free :: LibraryFunction
LF__frexp :: LibraryFunction
LF__frexpf :: LibraryFunction
LF__frexpl :: LibraryFunction
LF__fscanf :: LibraryFunction
LF__fseek :: LibraryFunction
LF__fseeko :: LibraryFunction
LF__fseeko64 :: LibraryFunction
LF__fsetpos :: LibraryFunction
LF__fstat :: LibraryFunction
LF__fstat64 :: LibraryFunction
LF__fstatvfs :: LibraryFunction
LF__fstatvfs64 :: LibraryFunction
LF__ftell :: LibraryFunction
LF__ftello :: LibraryFunction
LF__ftello64 :: LibraryFunction
LF__ftrylockfile :: LibraryFunction
LF__funlockfile :: LibraryFunction
LF__fwrite :: LibraryFunction
LF__getc :: LibraryFunction
LF__getc_unlocked :: LibraryFunction
LF__getchar :: LibraryFunction
LF__getenv :: LibraryFunction
LF__getitimer :: LibraryFunction
LF__getlogin_r :: LibraryFunction
LF__getpwnam :: LibraryFunction
LF__gets :: LibraryFunction
LF__gettimeofday :: LibraryFunction
LF__htonl :: LibraryFunction
LF__htons :: LibraryFunction
LF__iprintf :: LibraryFunction
LF__isascii :: LibraryFunction
LF__isdigit :: LibraryFunction
LF__labs :: LibraryFunction
LF__lchown :: LibraryFunction
LF__ldexp :: LibraryFunction
LF__ldexpf :: LibraryFunction
LF__ldexpl :: LibraryFunction
LF__llabs :: LibraryFunction
LF__log :: LibraryFunction
LF__log10 :: LibraryFunction
LF__log10f :: LibraryFunction
LF__log10l :: LibraryFunction
LF__log1p :: LibraryFunction
LF__log1pf :: LibraryFunction
LF__log1pl :: LibraryFunction
LF__log2 :: LibraryFunction
LF__log2f :: LibraryFunction
LF__log2l :: LibraryFunction
LF__logb :: LibraryFunction
LF__logbf :: LibraryFunction
LF__logbl :: LibraryFunction
LF__logf :: LibraryFunction
LF__logl :: LibraryFunction
LF__lstat :: LibraryFunction
LF__lstat64 :: LibraryFunction
LF__malloc :: LibraryFunction
LF__memalign :: LibraryFunction
LF__memccpy :: LibraryFunction
LF__memchr :: LibraryFunction
LF__memcmp :: LibraryFunction
LF__memcpy :: LibraryFunction
LF__memmove :: LibraryFunction
LF__memrchr :: LibraryFunction
LF__memset :: LibraryFunction
LF__memset_pattern16 :: LibraryFunction
LF__mkdir :: LibraryFunction
LF__mktime :: LibraryFunction
LF__modf :: LibraryFunction
LF__modff :: LibraryFunction
LF__modfl :: LibraryFunction
LF__nearbyint :: LibraryFunction
LF__nearbyintf :: LibraryFunction
LF__nearbyintl :: LibraryFunction
LF__ntohl :: LibraryFunction
LF__ntohs :: LibraryFunction
LF__open :: LibraryFunction
LF__open64 :: LibraryFunction
LF__opendir :: LibraryFunction
LF__pclose :: LibraryFunction
LF__perror :: LibraryFunction
LF__popen :: LibraryFunction
LF__posix_memalign :: LibraryFunction
LF__pow :: LibraryFunction
LF__powf :: LibraryFunction
LF__powl :: LibraryFunction
LF__pread :: LibraryFunction
LF__printf :: LibraryFunction
LF__putc :: LibraryFunction
LF__putchar :: LibraryFunction
LF__puts :: LibraryFunction
LF__pwrite :: LibraryFunction
LF__qsort :: LibraryFunction
LF__read :: LibraryFunction
LF__readlink :: LibraryFunction
LF__realloc :: LibraryFunction
LF__reallocf :: LibraryFunction
LF__realpath :: LibraryFunction
LF__remove :: LibraryFunction
LF__rename :: LibraryFunction
LF__rewind :: LibraryFunction
LF__rint :: LibraryFunction
LF__rintf :: LibraryFunction
LF__rintl :: LibraryFunction
LF__rmdir :: LibraryFunction
LF__round :: LibraryFunction
LF__roundf :: LibraryFunction
LF__roundl :: LibraryFunction
LF__scanf :: LibraryFunction
LF__setbuf :: LibraryFunction
LF__setitimer :: LibraryFunction
LF__setvbuf :: LibraryFunction
LF__sin :: LibraryFunction
LF__sinf :: LibraryFunction
LF__sinh :: LibraryFunction
LF__sinhf :: LibraryFunction
LF__sinhl :: LibraryFunction
LF__sinl :: LibraryFunction
LF__siprintf :: LibraryFunction
LF__snprintf :: LibraryFunction
LF__sprintf :: LibraryFunction
LF__sqrt :: LibraryFunction
LF__sqrtf :: LibraryFunction
LF__sqrtl :: LibraryFunction
LF__sscanf :: LibraryFunction
LF__stat :: LibraryFunction
LF__stat64 :: LibraryFunction
LF__statvfs :: LibraryFunction
LF__statvfs64 :: LibraryFunction
LF__stpcpy :: LibraryFunction
LF__stpncpy :: LibraryFunction
LF__strcasecmp :: LibraryFunction
LF__strcat :: LibraryFunction
LF__strchr :: LibraryFunction
LF__strcmp :: LibraryFunction
LF__strcoll :: LibraryFunction
LF__strcpy :: LibraryFunction
LF__strcspn :: LibraryFunction
LF__strdup :: LibraryFunction
LF__strlen :: LibraryFunction
LF__strncasecmp :: LibraryFunction
LF__strncat :: LibraryFunction
LF__strncmp :: LibraryFunction
LF__strncpy :: LibraryFunction
LF__strndup :: LibraryFunction
LF__strnlen :: LibraryFunction
LF__strpbrk :: LibraryFunction
LF__strrchr :: LibraryFunction
LF__strspn :: LibraryFunction
LF__strstr :: LibraryFunction
LF__strtod :: LibraryFunction
LF__strtof :: LibraryFunction
LF__strtok :: LibraryFunction
LF__strtok_r :: LibraryFunction
LF__strtol :: LibraryFunction
LF__strtold :: LibraryFunction
LF__strtoll :: LibraryFunction
LF__strtoul :: LibraryFunction
LF__strtoull :: LibraryFunction
LF__strxfrm :: LibraryFunction
LF__system :: LibraryFunction
LF__tan :: LibraryFunction
LF__tanf :: LibraryFunction
LF__tanh :: LibraryFunction
LF__tanhf :: LibraryFunction
LF__tanhl :: LibraryFunction
LF__tanl :: LibraryFunction
LF__times :: LibraryFunction
LF__tmpfile :: LibraryFunction
LF__tmpfile64 :: LibraryFunction
LF__toascii :: LibraryFunction
LF__trunc :: LibraryFunction
LF__truncf :: LibraryFunction
LF__truncl :: LibraryFunction
LF__uname :: LibraryFunction
LF__ungetc :: LibraryFunction
LF__unlink :: LibraryFunction
LF__unsetenv :: LibraryFunction
LF__utime :: LibraryFunction
LF__utimes :: LibraryFunction
LF__valloc :: LibraryFunction
LF__vfprintf :: LibraryFunction
LF__vfscanf :: LibraryFunction
LF__vprintf :: LibraryFunction
LF__vscanf :: LibraryFunction
LF__vsnprintf :: LibraryFunction
LF__vsprintf :: LibraryFunction
LF__vsscanf :: LibraryFunction
LF__write :: LibraryFunction
instance GHC.Show.Show LLVM.Internal.LibraryFunction.LibraryFunction
instance GHC.Read.Read LLVM.Internal.LibraryFunction.LibraryFunction
instance GHC.Enum.Bounded LLVM.Internal.LibraryFunction.LibraryFunction
instance GHC.Enum.Enum LLVM.Internal.LibraryFunction.LibraryFunction
instance GHC.Classes.Ord LLVM.Internal.LibraryFunction.LibraryFunction
instance GHC.Classes.Eq LLVM.Internal.LibraryFunction.LibraryFunction
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Internal.LibraryFunction.LibraryFunction LLVM.Internal.FFI.LLVMCTypes.LibFunc
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Internal.LibraryFunction.LibraryFunction LLVM.Internal.FFI.LLVMCTypes.LibFunc

module LLVM.Internal.RMWOperation
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.RMWOperation.RMWOperation LLVM.Internal.FFI.LLVMCTypes.RMWOperation
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.RMWOperation.RMWOperation LLVM.Internal.FFI.LLVMCTypes.RMWOperation

module LLVM.Internal.String
newtype UTF8ByteString
UTF8ByteString :: ByteString -> UTF8ByteString
[utf8Bytes] :: UTF8ByteString -> ByteString
instance GHC.Base.Monad e => LLVM.Internal.Coding.EncodeM e GHC.Base.String LLVM.Internal.String.UTF8ByteString
instance GHC.Base.Monad d => LLVM.Internal.Coding.DecodeM d GHC.Base.String LLVM.Internal.String.UTF8ByteString
instance Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO e => LLVM.Internal.Coding.EncodeM e GHC.Base.String Foreign.C.String.CString
instance (GHC.Real.Integral i, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO e) => LLVM.Internal.Coding.EncodeM e GHC.Base.String (GHC.Ptr.Ptr Foreign.C.Types.CChar, i)
instance Control.Monad.IO.Class.MonadIO d => LLVM.Internal.Coding.DecodeM d GHC.Base.String Foreign.C.String.CString
instance (GHC.Real.Integral i, Control.Monad.IO.Class.MonadIO d) => LLVM.Internal.Coding.DecodeM d GHC.Base.String (GHC.Ptr.Ptr Foreign.C.Types.CChar, i)
instance Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO e => LLVM.Internal.Coding.EncodeM e Data.ByteString.Internal.ByteString Foreign.C.String.CString
instance Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO e => LLVM.Internal.Coding.EncodeM e Data.ByteString.Short.Internal.ShortByteString Foreign.C.String.CString
instance (GHC.Real.Integral i, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO e) => LLVM.Internal.Coding.EncodeM e Data.ByteString.Internal.ByteString (GHC.Ptr.Ptr Foreign.C.Types.CChar, i)
instance (GHC.Real.Integral i, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO e) => LLVM.Internal.Coding.EncodeM e Data.ByteString.Short.Internal.ShortByteString (GHC.Ptr.Ptr Foreign.C.Types.CChar, i)
instance Control.Monad.IO.Class.MonadIO d => LLVM.Internal.Coding.DecodeM d Data.ByteString.Internal.ByteString Foreign.C.String.CString
instance Control.Monad.IO.Class.MonadIO d => LLVM.Internal.Coding.DecodeM d Data.ByteString.Short.Internal.ShortByteString Foreign.C.String.CString
instance Control.Monad.IO.Class.MonadIO d => LLVM.Internal.Coding.DecodeM d GHC.Base.String (LLVM.Internal.FFI.LLVMCTypes.OwnerTransfered Foreign.C.String.CString)
instance Control.Monad.IO.Class.MonadIO d => LLVM.Internal.Coding.DecodeM d Data.ByteString.Internal.ByteString (LLVM.Internal.FFI.LLVMCTypes.OwnerTransfered Foreign.C.String.CString)
instance Control.Monad.IO.Class.MonadIO d => LLVM.Internal.Coding.DecodeM d Data.ByteString.Short.Internal.ShortByteString (LLVM.Internal.FFI.LLVMCTypes.OwnerTransfered Foreign.C.String.CString)
instance (Control.Monad.IO.Class.MonadIO d, LLVM.Internal.Coding.DecodeM GHC.Types.IO s (LLVM.Internal.FFI.LLVMCTypes.OwnerTransfered Foreign.C.String.CString)) => LLVM.Internal.Coding.DecodeM d s (GHC.Ptr.Ptr (LLVM.Internal.FFI.LLVMCTypes.OwnerTransfered Foreign.C.String.CString))
instance (GHC.Real.Integral i, Control.Monad.IO.Class.MonadIO d) => LLVM.Internal.Coding.DecodeM d Data.ByteString.Internal.ByteString (GHC.Ptr.Ptr Foreign.C.Types.CChar, i)
instance (GHC.Real.Integral i, Control.Monad.IO.Class.MonadIO d) => LLVM.Internal.Coding.DecodeM d Data.ByteString.Short.Internal.ShortByteString (GHC.Ptr.Ptr Foreign.C.Types.CChar, i)
instance (GHC.Real.Integral i, Foreign.Storable.Storable i, Control.Monad.IO.Class.MonadIO d, LLVM.Internal.Coding.DecodeM d s (Foreign.C.String.CString, i)) => LLVM.Internal.Coding.DecodeM d s (GHC.Ptr.Ptr i -> GHC.Types.IO Foreign.C.String.CString)
instance (GHC.Base.Monad e, LLVM.Internal.Coding.EncodeM e GHC.Base.String c) => LLVM.Internal.Coding.EncodeM e (GHC.Base.Maybe GHC.Base.String) (LLVM.Internal.FFI.LLVMCTypes.NothingAsEmptyString c)

module LLVM.Internal.RawOStream
withFileRawOStream :: (MonadThrow m, MonadIO m, MonadAnyCont IO m) => String -> Bool -> Bool -> (Ptr RawOStream -> IO ()) -> m ()
withFileRawPWriteStream :: (MonadThrow m, MonadIO m, MonadAnyCont IO m) => String -> Bool -> Bool -> (Ptr RawPWriteStream -> IO ()) -> m ()
withBufferRawOStream :: (MonadIO m, DecodeM IO a (Ptr CChar, CSize)) => (Ptr RawOStream -> IO ()) -> m a
withBufferRawPWriteStream :: (MonadIO m, DecodeM IO a (Ptr CChar, CSize)) => (Ptr RawPWriteStream -> IO ()) -> m a

module LLVM.Internal.MemoryBuffer
data Specification
Bytes :: String -> ByteString -> Specification
[name] :: Specification -> String
[content] :: Specification -> ByteString
File :: String -> Specification
[pathName] :: Specification -> String
instance (Control.Monad.Catch.MonadThrow m, Control.Monad.IO.Class.MonadIO m, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO m) => LLVM.Internal.Coding.EncodeM m LLVM.Internal.MemoryBuffer.Specification (LLVM.Internal.FFI.LLVMCTypes.OwnerTransfered (GHC.Ptr.Ptr LLVM.Internal.FFI.MemoryBuffer.MemoryBuffer))
instance (Control.Monad.Catch.MonadThrow m, Control.Monad.IO.Class.MonadIO m, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO m) => LLVM.Internal.Coding.EncodeM m LLVM.Internal.MemoryBuffer.Specification (GHC.Ptr.Ptr LLVM.Internal.FFI.MemoryBuffer.MemoryBuffer)
instance Control.Monad.IO.Class.MonadIO d => LLVM.Internal.Coding.DecodeM d Data.ByteString.Internal.ByteString (GHC.Ptr.Ptr LLVM.Internal.FFI.MemoryBuffer.MemoryBuffer)
instance Control.Monad.IO.Class.MonadIO d => LLVM.Internal.Coding.DecodeM d GHC.Base.String (GHC.Ptr.Ptr LLVM.Internal.FFI.MemoryBuffer.MemoryBuffer)

module LLVM.Internal.EncodeAST
data LocalValue
ForwardValue :: (Ptr Value) -> LocalValue
DefinedValue :: (Ptr Value) -> LocalValue
data EncodeState
EncodeState :: Ptr Builder -> Context -> Map Name LocalValue -> Map Name (Ptr GlobalValue) -> Map (Name, Name) (Ptr BasicBlock) -> Map Name (Ptr BasicBlock) -> Map MetadataNodeID (Ptr MDNode) -> Map Name (Ptr Type) -> Map GroupID FunctionAttributeSet -> Map ShortByteString (Ptr COMDAT) -> EncodeState
[encodeStateBuilder] :: EncodeState -> Ptr Builder
[encodeStateContext] :: EncodeState -> Context
[encodeStateLocals] :: EncodeState -> Map Name LocalValue
[encodeStateGlobals] :: EncodeState -> Map Name (Ptr GlobalValue)
[encodeStateAllBlocks] :: EncodeState -> Map (Name, Name) (Ptr BasicBlock)
[encodeStateBlocks] :: EncodeState -> Map Name (Ptr BasicBlock)
[encodeStateMDNodes] :: EncodeState -> Map MetadataNodeID (Ptr MDNode)
[encodeStateNamedTypes] :: EncodeState -> Map Name (Ptr Type)
[encodeStateAttributeGroups] :: EncodeState -> Map GroupID FunctionAttributeSet
[encodeStateCOMDATs] :: EncodeState -> Map ShortByteString (Ptr COMDAT)
newtype EncodeAST a
EncodeAST :: AnyContT (StateT EncodeState IO) a -> EncodeAST a
[unEncodeAST] :: EncodeAST a -> AnyContT (StateT EncodeState IO) a
lookupNamedType :: Name -> EncodeAST (Ptr Type)
defineType :: Name -> Ptr Type -> EncodeAST ()
runEncodeAST :: Context -> EncodeAST a -> IO a
withName :: Name -> (CString -> IO a) -> IO a
phase :: EncodeAST a -> EncodeAST (EncodeAST a)
defineLocal :: DescendentOf Value v => Name -> Ptr v -> EncodeAST ()
defineGlobal :: DescendentOf GlobalValue v => Name -> Ptr v -> EncodeAST ()
defineMDNode :: MetadataNodeID -> Ptr MDNode -> EncodeAST ()
defineAttributeGroup :: GroupID -> FunctionAttributeSet -> EncodeAST ()
defineCOMDAT :: ShortByteString -> Ptr COMDAT -> EncodeAST ()
refer :: (Show n, Ord n) => (EncodeState -> Map n v) -> n -> EncodeAST v -> EncodeAST v
undefinedReference :: Show n => String -> n -> EncodeAST a
referOrThrow :: (Show n, Ord n) => (EncodeState -> Map n v) -> String -> n -> EncodeAST v
referGlobal :: Name -> EncodeAST (Ptr GlobalValue)
referMDNode :: MetadataNodeID -> EncodeAST (Ptr MDNode)
referAttributeGroup :: GroupID -> EncodeAST FunctionAttributeSet
referCOMDAT :: ShortByteString -> EncodeAST (Ptr COMDAT)
defineBasicBlock :: Name -> Name -> Ptr BasicBlock -> EncodeAST ()
getBlockForAddress :: Name -> Name -> EncodeAST (Ptr BasicBlock)
instance Control.Monad.AnyCont.Class.ScopeAnyCont LLVM.Internal.EncodeAST.EncodeAST
instance Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO LLVM.Internal.EncodeAST.EncodeAST
instance Control.Monad.Catch.MonadThrow LLVM.Internal.EncodeAST.EncodeAST
instance Control.Monad.State.Class.MonadState LLVM.Internal.EncodeAST.EncodeState LLVM.Internal.EncodeAST.EncodeAST
instance Control.Monad.IO.Class.MonadIO LLVM.Internal.EncodeAST.EncodeAST
instance GHC.Base.Monad LLVM.Internal.EncodeAST.EncodeAST
instance GHC.Base.Applicative LLVM.Internal.EncodeAST.EncodeAST
instance GHC.Base.Functor LLVM.Internal.EncodeAST.EncodeAST
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Name.Name (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.BasicBlock)
instance Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO m => LLVM.Internal.Coding.EncodeM m LLVM.AST.Name.Name Foreign.C.String.CString

module LLVM.Internal.FastMathFlags
instance LLVM.Internal.Coding.EncodeM GHC.Types.IO LLVM.AST.Instruction.FastMathFlags LLVM.Internal.FFI.LLVMCTypes.FastMathFlags
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Instruction.FastMathFlags ()
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.Instruction.FastMathFlags LLVM.Internal.FFI.LLVMCTypes.FastMathFlags

module LLVM.Internal.Diagnostic
withSMDiagnostic :: (Ptr SMDiagnostic -> IO a) -> IO a
getDiagnostic :: Ptr SMDiagnostic -> IO Diagnostic
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Diagnostic.DiagnosticKind LLVM.Internal.FFI.LLVMCTypes.DiagnosticKind
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Diagnostic.DiagnosticKind LLVM.Internal.FFI.LLVMCTypes.DiagnosticKind

module LLVM.Internal.DecodeAST
type NameMap a = Map (Ptr a) Word
data DecodeState
DecodeState :: NameMap GlobalValue -> NameMap Value -> Maybe Word -> NameMap Type -> Seq (Ptr Type) -> Seq (MetadataNodeID, Ptr MDNode) -> Map (Ptr MDNode) MetadataNodeID -> Array Word ShortByteString -> Map ParameterAttributeSet [ParameterAttribute] -> [(FunctionAttributeSet, GroupID)] -> Map (Ptr COMDAT) (ShortByteString, SelectionKind) -> DecodeState
[globalVarNum] :: DecodeState -> NameMap GlobalValue
[localVarNum] :: DecodeState -> NameMap Value
[localNameCounter] :: DecodeState -> Maybe Word
[namedTypeNum] :: DecodeState -> NameMap Type
[typesToDefine] :: DecodeState -> Seq (Ptr Type)
[metadataNodesToDefine] :: DecodeState -> Seq (MetadataNodeID, Ptr MDNode)
[metadataNodes] :: DecodeState -> Map (Ptr MDNode) MetadataNodeID
[metadataKinds] :: DecodeState -> Array Word ShortByteString
[parameterAttributeLists] :: DecodeState -> Map ParameterAttributeSet [ParameterAttribute]
[functionAttributeListIDs] :: DecodeState -> [(FunctionAttributeSet, GroupID)]
[comdats] :: DecodeState -> Map (Ptr COMDAT) (ShortByteString, SelectionKind)
initialDecode :: DecodeState
newtype DecodeAST a
DecodeAST :: AnyContT (StateT DecodeState IO) a -> DecodeAST a
[unDecodeAST] :: DecodeAST a -> AnyContT (StateT DecodeState IO) a
runDecodeAST :: DecodeAST a -> IO a
localScope :: DecodeAST a -> DecodeAST a
getName :: (Ptr a -> IO CString) -> Ptr a -> (DecodeState -> NameMap a) -> DecodeAST Word -> DecodeAST Name
getValueName :: DescendentOf Value v => Ptr v -> (DecodeState -> NameMap v) -> DecodeAST Word -> DecodeAST Name
getLocalName :: DescendentOf Value v => Ptr v -> DecodeAST Name
getGlobalName :: DescendentOf GlobalValue v => Ptr v -> DecodeAST Name
getTypeName :: Ptr Type -> DecodeAST Name
saveNamedType :: Ptr Type -> DecodeAST ()
getMetadataNodeID :: Ptr MDNode -> DecodeAST MetadataNodeID
takeTypeToDefine :: DecodeAST (Maybe (Ptr Type))
takeMetadataNodeToDefine :: DecodeAST (Maybe (MetadataNodeID, Ptr MDNode))
getAttributeGroupID :: FunctionAttributeSet -> DecodeAST GroupID
instance Control.Monad.AnyCont.Class.ScopeAnyCont LLVM.Internal.DecodeAST.DecodeAST
instance Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO LLVM.Internal.DecodeAST.DecodeAST
instance Control.Monad.State.Class.MonadState LLVM.Internal.DecodeAST.DecodeState LLVM.Internal.DecodeAST.DecodeAST
instance Control.Monad.IO.Class.MonadIO LLVM.Internal.DecodeAST.DecodeAST
instance GHC.Base.Monad LLVM.Internal.DecodeAST.DecodeAST
instance GHC.Base.Functor LLVM.Internal.DecodeAST.DecodeAST
instance GHC.Base.Applicative LLVM.Internal.DecodeAST.DecodeAST
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Name.Name (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.BasicBlock)

module LLVM.Internal.Global
getLinkage :: DescendentOf GlobalValue v => Ptr v -> DecodeAST Linkage
setLinkage :: DescendentOf GlobalValue v => Ptr v -> Linkage -> EncodeAST ()
getVisibility :: DescendentOf GlobalValue v => Ptr v -> DecodeAST Visibility
setVisibility :: DescendentOf GlobalValue v => Ptr v -> Visibility -> EncodeAST ()
getDLLStorageClass :: DescendentOf GlobalValue v => Ptr v -> DecodeAST (Maybe StorageClass)
setDLLStorageClass :: DescendentOf GlobalValue v => Ptr v -> Maybe StorageClass -> EncodeAST ()
getSection :: DescendentOf GlobalValue v => Ptr v -> DecodeAST (Maybe ShortByteString)
setSection :: DescendentOf GlobalValue v => Ptr v -> Maybe ShortByteString -> EncodeAST ()
getCOMDATName :: DescendentOf GlobalValue v => Ptr v -> DecodeAST (Maybe ShortByteString)
setCOMDAT :: DescendentOf GlobalObject v => Ptr v -> Maybe ShortByteString -> EncodeAST ()
setAlignment :: DescendentOf GlobalValue v => Ptr v -> Word32 -> EncodeAST ()
getAlignment :: DescendentOf GlobalValue v => Ptr v -> DecodeAST Word32
getThreadLocalMode :: DescendentOf GlobalValue v => Ptr v -> DecodeAST (Maybe Model)
setThreadLocalMode :: DescendentOf GlobalValue v => Ptr v -> Maybe Model -> EncodeAST ()
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe LLVM.AST.Global.UnnamedAddr) LLVM.Internal.FFI.LLVMCTypes.UnnamedAddr
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m (GHC.Base.Maybe LLVM.AST.Global.UnnamedAddr) LLVM.Internal.FFI.LLVMCTypes.UnnamedAddr
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe LLVM.AST.ThreadLocalStorage.Model) LLVM.Internal.FFI.LLVMCTypes.ThreadLocalMode
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m (GHC.Base.Maybe LLVM.AST.ThreadLocalStorage.Model) LLVM.Internal.FFI.LLVMCTypes.ThreadLocalMode
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.COMDAT.SelectionKind LLVM.Internal.FFI.LLVMCTypes.COMDATSelectionKind
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.COMDAT.SelectionKind LLVM.Internal.FFI.LLVMCTypes.COMDATSelectionKind
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST (Data.ByteString.Short.Internal.ShortByteString, LLVM.AST.COMDAT.SelectionKind) (GHC.Ptr.Ptr LLVM.Internal.FFI.GlobalValue.COMDAT)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe LLVM.AST.DLL.StorageClass) LLVM.Internal.FFI.LLVMCTypes.DLLStorageClass
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m (GHC.Base.Maybe LLVM.AST.DLL.StorageClass) LLVM.Internal.FFI.LLVMCTypes.DLLStorageClass
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.Visibility.Visibility LLVM.Internal.FFI.LLVMCTypes.Visibility
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.Visibility.Visibility LLVM.Internal.FFI.LLVMCTypes.Visibility
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.Linkage.Linkage LLVM.Internal.FFI.LLVMCTypes.Linkage
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.Linkage.Linkage LLVM.Internal.FFI.LLVMCTypes.Linkage

module LLVM.Internal.Attribute
inconsistentCases :: Show a => String -> a -> b
allocaAttrBuilder :: (Monad m, MonadAnyCont IO m) => m (Ptr (AttrBuilder a))
data AttributeList
AttributeList :: [Either GroupID FunctionAttribute] -> [ParameterAttribute] -> [[ParameterAttribute]] -> AttributeList
[functionAttributes] :: AttributeList -> [Either GroupID FunctionAttribute]
[returnAttributes] :: AttributeList -> [ParameterAttribute]
[parameterAttributes] :: AttributeList -> [[ParameterAttribute]]
data PreSlot
IndirectFunctionAttributes :: GroupID -> PreSlot
DirectFunctionAttributes :: [FunctionAttribute] -> PreSlot
ReturnAttributes :: [ParameterAttribute] -> PreSlot
ParameterAttributes :: CUInt -> [ParameterAttribute] -> PreSlot
instance GHC.Show.Show LLVM.Internal.Attribute.AttributeList
instance GHC.Classes.Eq LLVM.Internal.Attribute.AttributeList
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.Internal.Attribute.AttributeList LLVM.Internal.FFI.Attribute.AttributeList
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.Internal.Attribute.AttributeList (LLVM.Internal.FFI.Attribute.AttrSetDecoder a, a)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.ParameterAttribute.ParameterAttribute (GHC.Ptr.Ptr LLVM.Internal.FFI.Attribute.ParameterAttrBuilder -> LLVM.Internal.EncodeAST.EncodeAST ())
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.FunctionAttribute.FunctionAttribute (GHC.Ptr.Ptr LLVM.Internal.FFI.Attribute.FunctionAttrBuilder -> LLVM.Internal.EncodeAST.EncodeAST ())
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.ParameterAttribute.ParameterAttribute LLVM.Internal.FFI.Attribute.ParameterAttribute
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.FunctionAttribute.FunctionAttribute LLVM.Internal.FFI.Attribute.FunctionAttribute
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST a (GHC.Ptr.Ptr (LLVM.Internal.FFI.Attribute.AttrBuilder b) -> LLVM.Internal.EncodeAST.EncodeAST ()) => LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST [a] (LLVM.Internal.FFI.Attribute.AttributeSet b)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST a (LLVM.Internal.FFI.Attribute.Attribute b) => LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST [a] (LLVM.Internal.FFI.Attribute.AttributeSet b)
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST [Data.Either.Either LLVM.AST.FunctionAttribute.GroupID LLVM.AST.FunctionAttribute.FunctionAttribute] LLVM.Internal.FFI.Attribute.FunctionAttributeSet

module LLVM.Internal.DataLayout
withFFIDataLayout :: DataLayout -> (Ptr DataLayout -> IO a) -> IO a

module LLVM.Internal.CommandLine

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1cl.html#a992a39dae9eb8d4e54ffee5467902803</a>
--   Sadly, there is occasionally some configuration one would like to
--   control in LLVM which are accessible only as command line flags
--   setting global state, as if the command line tools were the only use
--   of LLVM. Very sad.
parseCommandLineOptions :: [ShortByteString] -> Maybe ShortByteString -> IO ()


-- | Tools for processing command line arguments, for command line tools
--   build with llvm (or for other uses forced into pretending to be such
--   to get at (ack) global state).
module LLVM.CommandLine

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1cl.html#a992a39dae9eb8d4e54ffee5467902803</a>
--   Sadly, there is occasionally some configuration one would like to
--   control in LLVM which are accessible only as command line flags
--   setting global state, as if the command line tools were the only use
--   of LLVM. Very sad.
parseCommandLineOptions :: [ShortByteString] -> Maybe ShortByteString -> IO ()

module LLVM.Internal.TailCallKind
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe LLVM.AST.Instruction.TailCallKind) LLVM.Internal.FFI.LLVMCTypes.TailCallKind
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m (GHC.Base.Maybe LLVM.AST.Instruction.TailCallKind) LLVM.Internal.FFI.LLVMCTypes.TailCallKind

module LLVM.Internal.Threading

-- | Check if multithreading is enabled in LLVM
isMultithreaded :: IO Bool

module LLVM.Internal.Type
getStructure :: Ptr Type -> DecodeAST Type
getStructDefinitions :: DecodeAST [Definition]
isArrayType :: Ptr Type -> IO Bool
createNamedType :: Name -> EncodeAST (Ptr Type)
setNamedType :: Ptr Type -> Type -> EncodeAST ()
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.AddrSpace.AddrSpace LLVM.Internal.FFI.Type.AddrSpace
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.AddrSpace.AddrSpace LLVM.Internal.FFI.Type.AddrSpace
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Type.Type (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Type)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Type.Type (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Type)

module LLVM.Internal.Value
typeOf :: DescendentOf Value v => Ptr v -> DecodeAST Type

module LLVM.Internal.Metadata
getMetadataKindNames :: Context -> DecodeAST ()
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST Data.ByteString.Short.Internal.ShortByteString LLVM.Internal.FFI.LLVMCTypes.MDKindID
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST Data.ByteString.Short.Internal.ShortByteString LLVM.Internal.FFI.LLVMCTypes.MDKindID
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST Data.ByteString.Short.Internal.ShortByteString (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.MDString)

module LLVM.Internal.InlineAssembly
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.AST.InlineAssembly.Dialect LLVM.Internal.FFI.LLVMCTypes.AsmDialect
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.AST.InlineAssembly.Dialect LLVM.Internal.FFI.LLVMCTypes.AsmDialect
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.InlineAssembly.InlineAssembly (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.InlineAsm)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.InlineAssembly.InlineAssembly (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.InlineAsm)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST [LLVM.AST.Definition] (LLVM.Internal.FFI.Module.ModuleAsm Foreign.C.String.CString)

module LLVM.Internal.Constant
allocaWords :: forall a m. (Storable a, MonadAnyCont IO m, Monad m, MonadIO m) => Word32 -> m (Ptr a)
inconsistentCases :: Show a => String -> a -> b
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Constant.Constant (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Constant)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Constant.Constant (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Constant)

module LLVM.Internal.Operand
getMetadataDefinitions :: DecodeAST [Definition]
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Operand.Operand (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Value)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Operand.Metadata (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Metadata)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Operand.CallableOperand (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Value)
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Operand.Operand (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Value)
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Operand.Metadata (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Metadata)
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Operand.CallableOperand (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Value)
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Operand.MetadataNode (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.MDNode)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST [GHC.Base.Maybe LLVM.AST.Operand.Metadata] (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.MDNode)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Operand.Operand (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.MDValue)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Operand.Metadata (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.MetadataAsVal)
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Operand.MetadataNode (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.MDNode)

module LLVM.Internal.Instruction
callInstAttributeList :: Ptr Instruction -> DecodeAST AttributeList
meta :: Ptr Instruction -> DecodeAST InstructionMetadata
setMD :: Ptr Instruction -> InstructionMetadata -> EncodeAST ()
guardNonVoidType :: (MonadIO m, MonadThrow m) => Ptr Instruction -> String -> m ()
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Instruction.Instruction (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction)
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Instruction.Instruction (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction, LLVM.Internal.EncodeAST.EncodeAST ())
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST a (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction) => LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST (LLVM.Internal.DecodeAST.DecodeAST (LLVM.AST.Instruction.Named a)) (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction)
instance (LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST a (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction), GHC.Show.Show a) => LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST (LLVM.AST.Instruction.Named a) (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction)
instance (LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST a (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction, LLVM.Internal.EncodeAST.EncodeAST ()), GHC.Show.Show a) => LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST (LLVM.AST.Instruction.Named a) (LLVM.Internal.EncodeAST.EncodeAST ())
instance LLVM.Internal.Coding.DecodeM LLVM.Internal.DecodeAST.DecodeAST LLVM.AST.Instruction.Terminator (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction)
instance LLVM.Internal.Coding.EncodeM LLVM.Internal.EncodeAST.EncodeAST LLVM.AST.Instruction.Terminator (GHC.Ptr.Ptr LLVM.Internal.FFI.PtrHierarchy.Instruction)

module LLVM.Internal.BasicBlock
getBasicBlockTerminator :: Ptr BasicBlock -> DecodeAST (DecodeAST (Named Terminator))
getNamedInstructions :: Ptr BasicBlock -> DecodeAST (DecodeAST [Named Instruction])

module LLVM.Internal.Function
getAttributeList :: Ptr Function -> DecodeAST AttributeList
setFunctionAttributes :: Ptr Function -> AttributeList -> EncodeAST ()
getParameters :: Ptr Function -> [[ParameterAttribute]] -> DecodeAST [Parameter]
getGC :: Ptr Function -> DecodeAST (Maybe ShortByteString)
setGC :: Ptr Function -> Maybe ShortByteString -> EncodeAST ()
getPrefixData :: Ptr Function -> DecodeAST (Maybe Constant)
setPrefixData :: Ptr Function -> Maybe Constant -> EncodeAST ()
getPersonalityFn :: Ptr Function -> DecodeAST (Maybe Constant)
setPersonalityFn :: Ptr Function -> Maybe Constant -> EncodeAST ()


-- | Relocations, used in specifying TargetMachine
module LLVM.Relocation

-- | <a>http://llvm.org/doxygen/namespacellvm_1_1Reloc.html</a>
data Model
Default :: Model
Static :: Model
PIC :: Model
DynamicNoPIC :: Model
instance GHC.Generics.Generic LLVM.Relocation.Model
instance Data.Data.Data LLVM.Relocation.Model
instance GHC.Show.Show LLVM.Relocation.Model
instance GHC.Read.Read LLVM.Relocation.Model
instance GHC.Classes.Eq LLVM.Relocation.Model


-- | A <a>LibraryFunction</a> identifies a function of which LLVM has
--   particular knowledge.
module LLVM.Target.LibraryFunction

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1LibFunc.html#abf8f6830387f338fed0bce2e65108c6f</a>
data LibraryFunction
LF__under_IO_getc :: LibraryFunction
LF__under_IO_putc :: LibraryFunction
LF__ZdaPv :: LibraryFunction
LF__ZdaPvRKSt9nothrow_t :: LibraryFunction
LF__ZdlPv :: LibraryFunction
LF__ZdlPvRKSt9nothrow_t :: LibraryFunction
LF__Znaj :: LibraryFunction
LF__ZnajRKSt9nothrow_t :: LibraryFunction
LF__Znam :: LibraryFunction
LF__ZnamRKSt9nothrow_t :: LibraryFunction
LF__Znwj :: LibraryFunction
LF__ZnwjRKSt9nothrow_t :: LibraryFunction
LF__Znwm :: LibraryFunction
LF__ZnwmRKSt9nothrow_t :: LibraryFunction
LF__cospi :: LibraryFunction
LF__cospif :: LibraryFunction
LF__cxa_atexit :: LibraryFunction
LF__cxa_guard_abort :: LibraryFunction
LF__cxa_guard_acquire :: LibraryFunction
LF__cxa_guard_release :: LibraryFunction
LF__dunder_isoc99_scanf :: LibraryFunction
LF__dunder_isoc99_sscanf :: LibraryFunction
LF__memcpy_chk :: LibraryFunction
LF__sincospi_stret :: LibraryFunction
LF__sincospif_stret :: LibraryFunction
LF__sinpi :: LibraryFunction
LF__sinpif :: LibraryFunction
LF__sqrt_finite :: LibraryFunction
LF__sqrtf_finite :: LibraryFunction
LF__sqrtl_finite :: LibraryFunction
LF__dunder_strdup :: LibraryFunction
LF__dunder_strndup :: LibraryFunction
LF__dunder_strtok_r :: LibraryFunction
LF__abs :: LibraryFunction
LF__access :: LibraryFunction
LF__acos :: LibraryFunction
LF__acosf :: LibraryFunction
LF__acosh :: LibraryFunction
LF__acoshf :: LibraryFunction
LF__acoshl :: LibraryFunction
LF__acosl :: LibraryFunction
LF__asin :: LibraryFunction
LF__asinf :: LibraryFunction
LF__asinh :: LibraryFunction
LF__asinhf :: LibraryFunction
LF__asinhl :: LibraryFunction
LF__asinl :: LibraryFunction
LF__atan :: LibraryFunction
LF__atan2 :: LibraryFunction
LF__atan2f :: LibraryFunction
LF__atan2l :: LibraryFunction
LF__atanf :: LibraryFunction
LF__atanh :: LibraryFunction
LF__atanhf :: LibraryFunction
LF__atanhl :: LibraryFunction
LF__atanl :: LibraryFunction
LF__atof :: LibraryFunction
LF__atoi :: LibraryFunction
LF__atol :: LibraryFunction
LF__atoll :: LibraryFunction
LF__bcmp :: LibraryFunction
LF__bcopy :: LibraryFunction
LF__bzero :: LibraryFunction
LF__calloc :: LibraryFunction
LF__cbrt :: LibraryFunction
LF__cbrtf :: LibraryFunction
LF__cbrtl :: LibraryFunction
LF__ceil :: LibraryFunction
LF__ceilf :: LibraryFunction
LF__ceill :: LibraryFunction
LF__chmod :: LibraryFunction
LF__chown :: LibraryFunction
LF__clearerr :: LibraryFunction
LF__closedir :: LibraryFunction
LF__copysign :: LibraryFunction
LF__copysignf :: LibraryFunction
LF__copysignl :: LibraryFunction
LF__cos :: LibraryFunction
LF__cosf :: LibraryFunction
LF__cosh :: LibraryFunction
LF__coshf :: LibraryFunction
LF__coshl :: LibraryFunction
LF__cosl :: LibraryFunction
LF__ctermid :: LibraryFunction
LF__exp :: LibraryFunction
LF__exp10 :: LibraryFunction
LF__exp10f :: LibraryFunction
LF__exp10l :: LibraryFunction
LF__exp2 :: LibraryFunction
LF__exp2f :: LibraryFunction
LF__exp2l :: LibraryFunction
LF__expf :: LibraryFunction
LF__expl :: LibraryFunction
LF__expm1 :: LibraryFunction
LF__expm1f :: LibraryFunction
LF__expm1l :: LibraryFunction
LF__fabs :: LibraryFunction
LF__fabsf :: LibraryFunction
LF__fabsl :: LibraryFunction
LF__fclose :: LibraryFunction
LF__fdopen :: LibraryFunction
LF__feof :: LibraryFunction
LF__ferror :: LibraryFunction
LF__fflush :: LibraryFunction
LF__ffs :: LibraryFunction
LF__ffsl :: LibraryFunction
LF__ffsll :: LibraryFunction
LF__fgetc :: LibraryFunction
LF__fgetpos :: LibraryFunction
LF__fgets :: LibraryFunction
LF__fileno :: LibraryFunction
LF__fiprintf :: LibraryFunction
LF__flockfile :: LibraryFunction
LF__floor :: LibraryFunction
LF__floorf :: LibraryFunction
LF__floorl :: LibraryFunction
LF__fmax :: LibraryFunction
LF__fmaxf :: LibraryFunction
LF__fmaxl :: LibraryFunction
LF__fmin :: LibraryFunction
LF__fminf :: LibraryFunction
LF__fminl :: LibraryFunction
LF__fmod :: LibraryFunction
LF__fmodf :: LibraryFunction
LF__fmodl :: LibraryFunction
LF__fopen :: LibraryFunction
LF__fopen64 :: LibraryFunction
LF__fprintf :: LibraryFunction
LF__fputc :: LibraryFunction
LF__fputs :: LibraryFunction
LF__fread :: LibraryFunction
LF__free :: LibraryFunction
LF__frexp :: LibraryFunction
LF__frexpf :: LibraryFunction
LF__frexpl :: LibraryFunction
LF__fscanf :: LibraryFunction
LF__fseek :: LibraryFunction
LF__fseeko :: LibraryFunction
LF__fseeko64 :: LibraryFunction
LF__fsetpos :: LibraryFunction
LF__fstat :: LibraryFunction
LF__fstat64 :: LibraryFunction
LF__fstatvfs :: LibraryFunction
LF__fstatvfs64 :: LibraryFunction
LF__ftell :: LibraryFunction
LF__ftello :: LibraryFunction
LF__ftello64 :: LibraryFunction
LF__ftrylockfile :: LibraryFunction
LF__funlockfile :: LibraryFunction
LF__fwrite :: LibraryFunction
LF__getc :: LibraryFunction
LF__getc_unlocked :: LibraryFunction
LF__getchar :: LibraryFunction
LF__getenv :: LibraryFunction
LF__getitimer :: LibraryFunction
LF__getlogin_r :: LibraryFunction
LF__getpwnam :: LibraryFunction
LF__gets :: LibraryFunction
LF__gettimeofday :: LibraryFunction
LF__htonl :: LibraryFunction
LF__htons :: LibraryFunction
LF__iprintf :: LibraryFunction
LF__isascii :: LibraryFunction
LF__isdigit :: LibraryFunction
LF__labs :: LibraryFunction
LF__lchown :: LibraryFunction
LF__ldexp :: LibraryFunction
LF__ldexpf :: LibraryFunction
LF__ldexpl :: LibraryFunction
LF__llabs :: LibraryFunction
LF__log :: LibraryFunction
LF__log10 :: LibraryFunction
LF__log10f :: LibraryFunction
LF__log10l :: LibraryFunction
LF__log1p :: LibraryFunction
LF__log1pf :: LibraryFunction
LF__log1pl :: LibraryFunction
LF__log2 :: LibraryFunction
LF__log2f :: LibraryFunction
LF__log2l :: LibraryFunction
LF__logb :: LibraryFunction
LF__logbf :: LibraryFunction
LF__logbl :: LibraryFunction
LF__logf :: LibraryFunction
LF__logl :: LibraryFunction
LF__lstat :: LibraryFunction
LF__lstat64 :: LibraryFunction
LF__malloc :: LibraryFunction
LF__memalign :: LibraryFunction
LF__memccpy :: LibraryFunction
LF__memchr :: LibraryFunction
LF__memcmp :: LibraryFunction
LF__memcpy :: LibraryFunction
LF__memmove :: LibraryFunction
LF__memrchr :: LibraryFunction
LF__memset :: LibraryFunction
LF__memset_pattern16 :: LibraryFunction
LF__mkdir :: LibraryFunction
LF__mktime :: LibraryFunction
LF__modf :: LibraryFunction
LF__modff :: LibraryFunction
LF__modfl :: LibraryFunction
LF__nearbyint :: LibraryFunction
LF__nearbyintf :: LibraryFunction
LF__nearbyintl :: LibraryFunction
LF__ntohl :: LibraryFunction
LF__ntohs :: LibraryFunction
LF__open :: LibraryFunction
LF__open64 :: LibraryFunction
LF__opendir :: LibraryFunction
LF__pclose :: LibraryFunction
LF__perror :: LibraryFunction
LF__popen :: LibraryFunction
LF__posix_memalign :: LibraryFunction
LF__pow :: LibraryFunction
LF__powf :: LibraryFunction
LF__powl :: LibraryFunction
LF__pread :: LibraryFunction
LF__printf :: LibraryFunction
LF__putc :: LibraryFunction
LF__putchar :: LibraryFunction
LF__puts :: LibraryFunction
LF__pwrite :: LibraryFunction
LF__qsort :: LibraryFunction
LF__read :: LibraryFunction
LF__readlink :: LibraryFunction
LF__realloc :: LibraryFunction
LF__reallocf :: LibraryFunction
LF__realpath :: LibraryFunction
LF__remove :: LibraryFunction
LF__rename :: LibraryFunction
LF__rewind :: LibraryFunction
LF__rint :: LibraryFunction
LF__rintf :: LibraryFunction
LF__rintl :: LibraryFunction
LF__rmdir :: LibraryFunction
LF__round :: LibraryFunction
LF__roundf :: LibraryFunction
LF__roundl :: LibraryFunction
LF__scanf :: LibraryFunction
LF__setbuf :: LibraryFunction
LF__setitimer :: LibraryFunction
LF__setvbuf :: LibraryFunction
LF__sin :: LibraryFunction
LF__sinf :: LibraryFunction
LF__sinh :: LibraryFunction
LF__sinhf :: LibraryFunction
LF__sinhl :: LibraryFunction
LF__sinl :: LibraryFunction
LF__siprintf :: LibraryFunction
LF__snprintf :: LibraryFunction
LF__sprintf :: LibraryFunction
LF__sqrt :: LibraryFunction
LF__sqrtf :: LibraryFunction
LF__sqrtl :: LibraryFunction
LF__sscanf :: LibraryFunction
LF__stat :: LibraryFunction
LF__stat64 :: LibraryFunction
LF__statvfs :: LibraryFunction
LF__statvfs64 :: LibraryFunction
LF__stpcpy :: LibraryFunction
LF__stpncpy :: LibraryFunction
LF__strcasecmp :: LibraryFunction
LF__strcat :: LibraryFunction
LF__strchr :: LibraryFunction
LF__strcmp :: LibraryFunction
LF__strcoll :: LibraryFunction
LF__strcpy :: LibraryFunction
LF__strcspn :: LibraryFunction
LF__strdup :: LibraryFunction
LF__strlen :: LibraryFunction
LF__strncasecmp :: LibraryFunction
LF__strncat :: LibraryFunction
LF__strncmp :: LibraryFunction
LF__strncpy :: LibraryFunction
LF__strndup :: LibraryFunction
LF__strnlen :: LibraryFunction
LF__strpbrk :: LibraryFunction
LF__strrchr :: LibraryFunction
LF__strspn :: LibraryFunction
LF__strstr :: LibraryFunction
LF__strtod :: LibraryFunction
LF__strtof :: LibraryFunction
LF__strtok :: LibraryFunction
LF__strtok_r :: LibraryFunction
LF__strtol :: LibraryFunction
LF__strtold :: LibraryFunction
LF__strtoll :: LibraryFunction
LF__strtoul :: LibraryFunction
LF__strtoull :: LibraryFunction
LF__strxfrm :: LibraryFunction
LF__system :: LibraryFunction
LF__tan :: LibraryFunction
LF__tanf :: LibraryFunction
LF__tanh :: LibraryFunction
LF__tanhf :: LibraryFunction
LF__tanhl :: LibraryFunction
LF__tanl :: LibraryFunction
LF__times :: LibraryFunction
LF__tmpfile :: LibraryFunction
LF__tmpfile64 :: LibraryFunction
LF__toascii :: LibraryFunction
LF__trunc :: LibraryFunction
LF__truncf :: LibraryFunction
LF__truncl :: LibraryFunction
LF__uname :: LibraryFunction
LF__ungetc :: LibraryFunction
LF__unlink :: LibraryFunction
LF__unsetenv :: LibraryFunction
LF__utime :: LibraryFunction
LF__utimes :: LibraryFunction
LF__valloc :: LibraryFunction
LF__vfprintf :: LibraryFunction
LF__vfscanf :: LibraryFunction
LF__vprintf :: LibraryFunction
LF__vscanf :: LibraryFunction
LF__vsnprintf :: LibraryFunction
LF__vsprintf :: LibraryFunction
LF__vsscanf :: LibraryFunction
LF__write :: LibraryFunction


-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetOptions.html</a>
module LLVM.Target.Options

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1FloatABI.html#aea077c52d84934aabf9445cef9eab2e2</a>
data FloatABI
FloatABIDefault :: FloatABI
FloatABISoft :: FloatABI
FloatABIHard :: FloatABI

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1FPOpFusion.html#a9c71bae9f02af273833fde586d529fc5</a>
data FloatingPointOperationFusionMode
FloatingPointOperationFusionFast :: FloatingPointOperationFusionMode
FloatingPointOperationFusionStandard :: FloatingPointOperationFusionMode
FloatingPointOperationFusionStrict :: FloatingPointOperationFusionMode

-- | 
--   <a>https://llvm.org/doxygen/namespacellvm.html#aa100a124c9d33561b0950011928aae00</a>
data DebugCompressionType

-- | No compression
CompressNone :: DebugCompressionType

-- | zlib-gnu style compression
CompressGNU :: DebugCompressionType

-- | zlib style compression
CompressZ :: DebugCompressionType

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1ThreadModel.html#a299c775d35e28348ecfbe03c38c17fe1</a>
data ThreadModel
ThreadModelPOSIX :: ThreadModel
ThreadModelSingle :: ThreadModel

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm.html#adc04b17f40513e658e600a26842b1ed6</a>
data DebuggerKind
DebuggerDefault :: DebuggerKind
DebuggerGDB :: DebuggerKind
DebuggerLLDB :: DebuggerKind
DebuggerSCE :: DebuggerKind

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm.html#ada924e855250645672a493841803ff91</a>
data EABIVersion
EABIVersionUnknown :: EABIVersion
EABIVersionDefault :: EABIVersion
EABIVersion4 :: EABIVersion
EABIVersion5 :: EABIVersion
EABIVersionGNU :: EABIVersion

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm_1_1FPDenormal.html#aa0e896c04e0537cf6d0926f3c8db6d6c</a>
data FloatingPointDenormalMode

-- | IEEE 754 denormal numbers
FloatingPointDenormalIEEE :: FloatingPointDenormalMode

-- | The sign of a flushed-to-zero number is preserved in the sign of 0
FloatingPointDenormalPreserveSign :: FloatingPointDenormalMode

-- | Denormals are flushed to positive zero
FloatingPointDenormalPositiveZero :: FloatingPointDenormalMode

-- | 
--   <a>http://llvm.org/doxygen/namespacellvm.html#a2ca3855108426698ff21517a7c884c84</a>
data ExceptionHandling

-- | No exception support
ExceptionHandlingNone :: ExceptionHandling

-- | DWARF-like instruction based exceptions
ExceptionHandlingDwarfCFI :: ExceptionHandling

-- | setjmp/longjmp based exceptions
ExceptionHandlingSjLj :: ExceptionHandling

-- | ARM EHABI
ExceptionHandlingARM :: ExceptionHandling

-- | Windows Exception Handling
ExceptionHandlingWinEH :: ExceptionHandling

-- | The options of a <a>TargetOptions</a>
--   <a>http://llvm.org/doxygen/classllvm_1_1TargetOptions.html</a>
data Options
Options :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> DebugCompressionType -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Word32 -> FloatABI -> FloatingPointOperationFusionMode -> ThreadModel -> EABIVersion -> DebuggerKind -> FloatingPointDenormalMode -> ExceptionHandling -> MachineCodeOptions -> Options
[printMachineCode] :: Options -> Bool
[unsafeFloatingPointMath] :: Options -> Bool
[noInfinitiesFloatingPointMath] :: Options -> Bool
[noNaNsFloatingPointMath] :: Options -> Bool
[noTrappingFloatingPointMath] :: Options -> Bool
[noSignedZeroesFloatingPointMath] :: Options -> Bool
[honorSignDependentRoundingFloatingPointMathOption] :: Options -> Bool
[noZerosInBSS] :: Options -> Bool
[guaranteedTailCallOptimization] :: Options -> Bool
[stackSymbolOrdering] :: Options -> Bool
[enableFastInstructionSelection] :: Options -> Bool
[useInitArray] :: Options -> Bool
[disableIntegratedAssembler] :: Options -> Bool
[compressDebugSections] :: Options -> DebugCompressionType
[relaxELFRelocations] :: Options -> Bool
[functionSections] :: Options -> Bool
[dataSections] :: Options -> Bool
[uniqueSectionNames] :: Options -> Bool
[trapUnreachable] :: Options -> Bool
[emulatedThreadLocalStorage] :: Options -> Bool
[enableInterProceduralRegisterAllocation] :: Options -> Bool
[stackAlignmentOverride] :: Options -> Word32
[floatABIType] :: Options -> FloatABI
[allowFloatingPointOperationFusion] :: Options -> FloatingPointOperationFusionMode
[threadModel] :: Options -> ThreadModel
[eabiVersion] :: Options -> EABIVersion
[debuggerTuning] :: Options -> DebuggerKind
[floatingPointDenormalMode] :: Options -> FloatingPointDenormalMode
[exceptionModel] :: Options -> ExceptionHandling
[machineCodeOptions] :: Options -> MachineCodeOptions

-- | <a>http://llvm.org/doxygen/classllvm_1_1MCTargetOptions.html</a>
data MachineCodeOptions
MachineCodeOptions :: Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> MachineCodeOptions
[sanitizeAddresses] :: MachineCodeOptions -> Bool
[relaxAll] :: MachineCodeOptions -> Bool
[noExecutableStack] :: MachineCodeOptions -> Bool
[fatalWarnings] :: MachineCodeOptions -> Bool
[noWarnings] :: MachineCodeOptions -> Bool
[noDeprecatedWarning] :: MachineCodeOptions -> Bool
[saveTemporaryLabels] :: MachineCodeOptions -> Bool
[useDwarfDirectory] :: MachineCodeOptions -> Bool
[incrementalLinkerCompatible] :: MachineCodeOptions -> Bool
[pieCopyRelocations] :: MachineCodeOptions -> Bool
[showMachineCodeEncoding] :: MachineCodeOptions -> Bool
[showMachineCodeInstructions] :: MachineCodeOptions -> Bool
[verboseAssembly] :: MachineCodeOptions -> Bool
[preserveComentsInAssembly] :: MachineCodeOptions -> Bool
instance GHC.Show.Show LLVM.Target.Options.Options
instance GHC.Read.Read LLVM.Target.Options.Options
instance GHC.Classes.Ord LLVM.Target.Options.Options
instance GHC.Classes.Eq LLVM.Target.Options.Options
instance GHC.Show.Show LLVM.Target.Options.MachineCodeOptions
instance GHC.Read.Read LLVM.Target.Options.MachineCodeOptions
instance GHC.Classes.Ord LLVM.Target.Options.MachineCodeOptions
instance GHC.Classes.Eq LLVM.Target.Options.MachineCodeOptions
instance GHC.Generics.Generic LLVM.Target.Options.ExceptionHandling
instance Data.Data.Data LLVM.Target.Options.ExceptionHandling
instance GHC.Enum.Bounded LLVM.Target.Options.ExceptionHandling
instance GHC.Enum.Enum LLVM.Target.Options.ExceptionHandling
instance GHC.Show.Show LLVM.Target.Options.ExceptionHandling
instance GHC.Read.Read LLVM.Target.Options.ExceptionHandling
instance GHC.Classes.Ord LLVM.Target.Options.ExceptionHandling
instance GHC.Classes.Eq LLVM.Target.Options.ExceptionHandling
instance GHC.Generics.Generic LLVM.Target.Options.FloatingPointDenormalMode
instance Data.Data.Data LLVM.Target.Options.FloatingPointDenormalMode
instance GHC.Enum.Bounded LLVM.Target.Options.FloatingPointDenormalMode
instance GHC.Enum.Enum LLVM.Target.Options.FloatingPointDenormalMode
instance GHC.Show.Show LLVM.Target.Options.FloatingPointDenormalMode
instance GHC.Read.Read LLVM.Target.Options.FloatingPointDenormalMode
instance GHC.Classes.Ord LLVM.Target.Options.FloatingPointDenormalMode
instance GHC.Classes.Eq LLVM.Target.Options.FloatingPointDenormalMode
instance GHC.Generics.Generic LLVM.Target.Options.EABIVersion
instance Data.Data.Data LLVM.Target.Options.EABIVersion
instance GHC.Enum.Bounded LLVM.Target.Options.EABIVersion
instance GHC.Enum.Enum LLVM.Target.Options.EABIVersion
instance GHC.Show.Show LLVM.Target.Options.EABIVersion
instance GHC.Read.Read LLVM.Target.Options.EABIVersion
instance GHC.Classes.Ord LLVM.Target.Options.EABIVersion
instance GHC.Classes.Eq LLVM.Target.Options.EABIVersion
instance GHC.Generics.Generic LLVM.Target.Options.DebuggerKind
instance Data.Data.Data LLVM.Target.Options.DebuggerKind
instance GHC.Enum.Bounded LLVM.Target.Options.DebuggerKind
instance GHC.Enum.Enum LLVM.Target.Options.DebuggerKind
instance GHC.Show.Show LLVM.Target.Options.DebuggerKind
instance GHC.Read.Read LLVM.Target.Options.DebuggerKind
instance GHC.Classes.Ord LLVM.Target.Options.DebuggerKind
instance GHC.Classes.Eq LLVM.Target.Options.DebuggerKind
instance GHC.Generics.Generic LLVM.Target.Options.ThreadModel
instance Data.Data.Data LLVM.Target.Options.ThreadModel
instance GHC.Enum.Bounded LLVM.Target.Options.ThreadModel
instance GHC.Enum.Enum LLVM.Target.Options.ThreadModel
instance GHC.Show.Show LLVM.Target.Options.ThreadModel
instance GHC.Read.Read LLVM.Target.Options.ThreadModel
instance GHC.Classes.Ord LLVM.Target.Options.ThreadModel
instance GHC.Classes.Eq LLVM.Target.Options.ThreadModel
instance GHC.Generics.Generic LLVM.Target.Options.DebugCompressionType
instance Data.Data.Data LLVM.Target.Options.DebugCompressionType
instance GHC.Enum.Bounded LLVM.Target.Options.DebugCompressionType
instance GHC.Enum.Enum LLVM.Target.Options.DebugCompressionType
instance GHC.Show.Show LLVM.Target.Options.DebugCompressionType
instance GHC.Read.Read LLVM.Target.Options.DebugCompressionType
instance GHC.Classes.Ord LLVM.Target.Options.DebugCompressionType
instance GHC.Classes.Eq LLVM.Target.Options.DebugCompressionType
instance GHC.Generics.Generic LLVM.Target.Options.FloatingPointOperationFusionMode
instance Data.Data.Data LLVM.Target.Options.FloatingPointOperationFusionMode
instance GHC.Enum.Bounded LLVM.Target.Options.FloatingPointOperationFusionMode
instance GHC.Enum.Enum LLVM.Target.Options.FloatingPointOperationFusionMode
instance GHC.Show.Show LLVM.Target.Options.FloatingPointOperationFusionMode
instance GHC.Read.Read LLVM.Target.Options.FloatingPointOperationFusionMode
instance GHC.Classes.Ord LLVM.Target.Options.FloatingPointOperationFusionMode
instance GHC.Classes.Eq LLVM.Target.Options.FloatingPointOperationFusionMode
instance GHC.Generics.Generic LLVM.Target.Options.FloatABI
instance Data.Data.Data LLVM.Target.Options.FloatABI
instance GHC.Enum.Bounded LLVM.Target.Options.FloatABI
instance GHC.Enum.Enum LLVM.Target.Options.FloatABI
instance GHC.Show.Show LLVM.Target.Options.FloatABI
instance GHC.Read.Read LLVM.Target.Options.FloatABI
instance GHC.Classes.Ord LLVM.Target.Options.FloatABI
instance GHC.Classes.Eq LLVM.Target.Options.FloatABI

module LLVM.Internal.Target

-- | <a>http://llvm.org/doxygen/classllvm_1_1Target.html</a>
newtype Target
Target :: (Ptr Target) -> Target

-- | e.g. an instruction set extension
newtype CPUFeature
CPUFeature :: ByteString -> CPUFeature

-- | Find a <a>Target</a> given an architecture and/or a "triple". |
--   <a>http://llvm.org/doxygen/structllvm_1_1TargetRegistry.html#a3105b45e546c9cc3cf78d0f2ec18ad89</a>
--   | Be sure to run either <a>initializeAllTargets</a> or
--   <a>initializeNativeTarget</a> before expecting this to succeed,
--   depending on what target(s) you want to use. May throw
--   <a>LookupTargetException</a> if no target is found.
lookupTarget :: Maybe ShortByteString -> ShortByteString -> IO (Target, ShortByteString)

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetOptions.html</a>
newtype TargetOptions
TargetOptions :: (Ptr TargetOptions) -> TargetOptions
newtype MCTargetOptions
MCTargetOptions :: (Ptr MCTargetOptions) -> MCTargetOptions

-- | bracket creation and destruction of a <a>TargetOptions</a> object
withTargetOptions :: (TargetOptions -> IO a) -> IO a

-- | set all target options
pokeTargetOptions :: Options -> TargetOptions -> IO ()
pokeMachineCodeOptions :: MachineCodeOptions -> MCTargetOptions -> IO ()

-- | get all target options
peekTargetOptions :: TargetOptions -> IO Options

-- | get all machine code options
peekMachineCodeOptions :: MCTargetOptions -> IO MachineCodeOptions

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetMachine.html</a>
newtype TargetMachine
TargetMachine :: (Ptr TargetMachine) -> TargetMachine

-- | bracket creation and destruction of a <a>TargetMachine</a>
withTargetMachine :: Target -> ShortByteString -> ByteString -> Map CPUFeature Bool -> TargetOptions -> Model -> Model -> Level -> (TargetMachine -> IO a) -> IO a
targetMachineOptions :: TargetMachine -> IO TargetOptions
machineCodeOptions :: TargetOptions -> IO MCTargetOptions

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetLowering.html</a>
newtype TargetLowering
TargetLowering :: (Ptr TargetLowering) -> TargetLowering

-- | get the <a>TargetLowering</a> of a <a>TargetMachine</a>
getTargetLowering :: TargetMachine -> IO TargetLowering

-- | Initialize the native target. This function is called automatically in
--   these Haskell bindings when creating an <a>ExecutionEngine</a> which
--   will require it, and so it should not be necessary to call it
--   separately.
initializeNativeTarget :: IO ()

-- | the target triple corresponding to the target machine
getTargetMachineTriple :: TargetMachine -> IO ShortByteString

-- | the default target triple that LLVM has been configured to produce
--   code for
getDefaultTargetTriple :: IO ShortByteString

-- | a target triple suitable for loading code into the current process
getProcessTargetTriple :: IO ShortByteString

-- | the LLVM name for the host CPU
getHostCPUName :: IO ByteString

-- | a space-separated list of LLVM feature names supported by the host CPU
getHostCPUFeatures :: IO (Map CPUFeature Bool)

-- | <a>DataLayout</a> to use for the given <a>TargetMachine</a>
getTargetMachineDataLayout :: TargetMachine -> IO DataLayout

-- | Initialize all targets so they can be found by <a>lookupTarget</a>
initializeAllTargets :: IO ()

-- | Bracket creation and destruction of a <a>TargetMachine</a> configured
--   for the host
withHostTargetMachine :: (TargetMachine -> IO a) -> IO a

-- | 
--   <a>http://llvm.org/docs/doxygen/html/classllvm_1_1TargetLibraryInfo.html</a>
newtype TargetLibraryInfo
TargetLibraryInfo :: (Ptr TargetLibraryInfo) -> TargetLibraryInfo

-- | Look up a <a>LibraryFunction</a> by its standard name
getLibraryFunction :: TargetLibraryInfo -> ShortByteString -> IO (Maybe LibraryFunction)

-- | Get a the current name to be emitted for a <a>LibraryFunction</a>
getLibraryFunctionName :: TargetLibraryInfo -> LibraryFunction -> IO ShortByteString

-- | Set the name of the function on the target platform that corresponds
--   to funcName
setLibraryFunctionAvailableWithName :: TargetLibraryInfo -> LibraryFunction -> ShortByteString -> IO ()

-- | look up information about the library functions available on a given
--   platform
withTargetLibraryInfo :: ShortByteString -> (TargetLibraryInfo -> IO a) -> IO a
instance GHC.Show.Show LLVM.Internal.Target.CPUFeature
instance GHC.Read.Read LLVM.Internal.Target.CPUFeature
instance GHC.Classes.Ord LLVM.Internal.Target.CPUFeature
instance GHC.Classes.Eq LLVM.Internal.Target.CPUFeature
instance LLVM.Internal.Coding.EncodeM e Data.ByteString.Internal.ByteString es => LLVM.Internal.Coding.EncodeM e (Data.Map.Internal.Map LLVM.Internal.Target.CPUFeature GHC.Types.Bool) es
instance (GHC.Base.Monad d, LLVM.Internal.Coding.DecodeM d Data.ByteString.Internal.ByteString es) => LLVM.Internal.Coding.DecodeM d (Data.Map.Internal.Map LLVM.Internal.Target.CPUFeature GHC.Types.Bool) es
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Target.Options.ExceptionHandling LLVM.Internal.FFI.LLVMCTypes.ExceptionHandling
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Target.Options.ExceptionHandling LLVM.Internal.FFI.LLVMCTypes.ExceptionHandling
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Target.Options.FloatingPointDenormalMode LLVM.Internal.FFI.LLVMCTypes.FPDenormalMode
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Target.Options.FloatingPointDenormalMode LLVM.Internal.FFI.LLVMCTypes.FPDenormalMode
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Target.Options.DebuggerKind LLVM.Internal.FFI.LLVMCTypes.DebuggerKind
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Target.Options.DebuggerKind LLVM.Internal.FFI.LLVMCTypes.DebuggerKind
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Target.Options.EABIVersion LLVM.Internal.FFI.LLVMCTypes.EABI
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Target.Options.EABIVersion LLVM.Internal.FFI.LLVMCTypes.EABI
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Target.Options.ThreadModel LLVM.Internal.FFI.LLVMCTypes.ThreadModel
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Target.Options.ThreadModel LLVM.Internal.FFI.LLVMCTypes.ThreadModel
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Target.Options.DebugCompressionType LLVM.Internal.FFI.LLVMCTypes.DebugCompressionType
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Target.Options.DebugCompressionType LLVM.Internal.FFI.LLVMCTypes.DebugCompressionType
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Target.Options.FloatingPointOperationFusionMode LLVM.Internal.FFI.LLVMCTypes.FPOpFusionMode
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Target.Options.FloatingPointOperationFusionMode LLVM.Internal.FFI.LLVMCTypes.FPOpFusionMode
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Target.Options.FloatABI LLVM.Internal.FFI.LLVMCTypes.FloatABIType
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Target.Options.FloatABI LLVM.Internal.FFI.LLVMCTypes.FloatABIType
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.CodeGenOpt.Level LLVM.Internal.FFI.LLVMCTypes.CodeGenOptLevel
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.CodeGenOpt.Level LLVM.Internal.FFI.LLVMCTypes.CodeGenOptLevel
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.CodeModel.Model LLVM.Internal.FFI.LLVMCTypes.CodeModel
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.CodeModel.Model LLVM.Internal.FFI.LLVMCTypes.CodeModel
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Relocation.Model LLVM.Internal.FFI.LLVMCTypes.RelocModel
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Relocation.Model LLVM.Internal.FFI.LLVMCTypes.RelocModel


-- | A <a>Target</a> describes that for which code may be intended. Targets
--   are used both during actual | lowering of LLVM IR to machine code and
--   by some optimization passes which use the target to | judge costs.
module LLVM.Target

-- | Find a <a>Target</a> given an architecture and/or a "triple". |
--   <a>http://llvm.org/doxygen/structllvm_1_1TargetRegistry.html#a3105b45e546c9cc3cf78d0f2ec18ad89</a>
--   | Be sure to run either <a>initializeAllTargets</a> or
--   <a>initializeNativeTarget</a> before expecting this to succeed,
--   depending on what target(s) you want to use. May throw
--   <a>LookupTargetException</a> if no target is found.
lookupTarget :: Maybe ShortByteString -> ShortByteString -> IO (Target, ShortByteString)

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetOptions.html</a>
data TargetOptions

-- | <a>http://llvm.org/doxygen/classllvm_1_1Target.html</a>
data Target

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetMachine.html</a>
data TargetMachine

-- | <a>http://llvm.org/doxygen/classllvm_1_1TargetLowering.html</a>
data TargetLowering

-- | e.g. an instruction set extension
newtype CPUFeature
CPUFeature :: ByteString -> CPUFeature

-- | bracket creation and destruction of a <a>TargetOptions</a> object
withTargetOptions :: (TargetOptions -> IO a) -> IO a

-- | get all target options
peekTargetOptions :: TargetOptions -> IO Options

-- | set all target options
pokeTargetOptions :: Options -> TargetOptions -> IO ()

-- | bracket creation and destruction of a <a>TargetMachine</a>
withTargetMachine :: Target -> ShortByteString -> ByteString -> Map CPUFeature Bool -> TargetOptions -> Model -> Model -> Level -> (TargetMachine -> IO a) -> IO a

-- | Bracket creation and destruction of a <a>TargetMachine</a> configured
--   for the host
withHostTargetMachine :: (TargetMachine -> IO a) -> IO a
targetMachineOptions :: TargetMachine -> IO TargetOptions

-- | get the <a>TargetLowering</a> of a <a>TargetMachine</a>
getTargetLowering :: TargetMachine -> IO TargetLowering

-- | the target triple corresponding to the target machine
getTargetMachineTriple :: TargetMachine -> IO ShortByteString

-- | the default target triple that LLVM has been configured to produce
--   code for
getDefaultTargetTriple :: IO ShortByteString

-- | a target triple suitable for loading code into the current process
getProcessTargetTriple :: IO ShortByteString

-- | the LLVM name for the host CPU
getHostCPUName :: IO ByteString

-- | a space-separated list of LLVM feature names supported by the host CPU
getHostCPUFeatures :: IO (Map CPUFeature Bool)

-- | <a>DataLayout</a> to use for the given <a>TargetMachine</a>
getTargetMachineDataLayout :: TargetMachine -> IO DataLayout

-- | Initialize the native target. This function is called automatically in
--   these Haskell bindings when creating an <a>ExecutionEngine</a> which
--   will require it, and so it should not be necessary to call it
--   separately.
initializeNativeTarget :: IO ()

-- | Initialize all targets so they can be found by <a>lookupTarget</a>
initializeAllTargets :: IO ()

-- | 
--   <a>http://llvm.org/docs/doxygen/html/classllvm_1_1TargetLibraryInfo.html</a>
data TargetLibraryInfo

-- | Look up a <a>LibraryFunction</a> by its standard name
getLibraryFunction :: TargetLibraryInfo -> ShortByteString -> IO (Maybe LibraryFunction)

-- | Get a the current name to be emitted for a <a>LibraryFunction</a>
getLibraryFunctionName :: TargetLibraryInfo -> LibraryFunction -> IO ShortByteString

-- | Set the name of the function on the target platform that corresponds
--   to funcName
setLibraryFunctionAvailableWithName :: TargetLibraryInfo -> LibraryFunction -> ShortByteString -> IO ()

-- | look up information about the library functions available on a given
--   platform
withTargetLibraryInfo :: ShortByteString -> (TargetLibraryInfo -> IO a) -> IO a

module LLVM.Internal.OrcJIT

-- | A mangled symbol which can be used in <tt>findSymbol</tt>. This can be
--   created using <tt>mangleSymbol</tt>.
newtype MangledSymbol
MangledSymbol :: ByteString -> MangledSymbol
data JITSymbolFlags
JITSymbolFlags :: !Bool -> !Bool -> JITSymbolFlags

-- | Is this a weak symbol?
[jitSymbolWeak] :: JITSymbolFlags -> !Bool

-- | Is this symbol exported?
[jitSymbolExported] :: JITSymbolFlags -> !Bool
data JITSymbol
JITSymbol :: !WordPtr -> !JITSymbolFlags -> JITSymbol

-- | The address of the symbol. If you’ve looked up a function, you need to
--   cast this to a <a>FunPtr</a>.
[jitSymbolAddress] :: JITSymbol -> !WordPtr

-- | The flags of this symbol.
[jitSymbolFlags] :: JITSymbol -> !JITSymbolFlags
type SymbolResolverFn = MangledSymbol -> IO JITSymbol

-- | Specifies how external symbols in a module added to a
--   <tt>CompielLayer</tt> should be resolved.
data SymbolResolver
SymbolResolver :: !SymbolResolverFn -> !SymbolResolverFn -> SymbolResolver

-- | This is used to find symbols in the same logical dynamic library as
--   the module referencing them.
[dylibResolver] :: SymbolResolver -> !SymbolResolverFn

-- | When <a>dylibResolver</a> fails to resolve a symbol,
--   <a>externalResolver</a> is used as a fallback to find external
--   symbols.
[externalResolver] :: SymbolResolver -> !SymbolResolverFn

-- | After a <tt>CompileLayer</tt> has compiled the modules to object code,
--   it passes the resulting object files to a <a>LinkingLayer</a>.
class LinkingLayer l
getLinkingLayer :: LinkingLayer l => l -> Ptr LinkingLayer

-- | Bare bones implementation of a <a>LinkingLayer</a>.
newtype ObjectLinkingLayer
ObjectLinkingLayer :: (Ptr ObjectLinkingLayer) -> ObjectLinkingLayer

-- | allocate a function pointer and register it for cleanup
allocFunPtr :: IORef [IO ()] -> IO (FunPtr a) -> IO (FunPtr a)

-- | Dispose of a <a>LinkingLayer</a>.
disposeLinkingLayer :: LinkingLayer l => l -> IO ()

-- | Create a new <a>ObjectLinkingLayer</a>. This should be disposed using
--   <a>disposeLinkingLayer</a> when it is no longer needed.
newObjectLinkingLayer :: IO ObjectLinkingLayer

-- | <a>bracket</a>-style wrapper around <a>newObjectLinkingLayer</a> and
--   <a>disposeLinkingLayer</a>.
withObjectLinkingLayer :: (ObjectLinkingLayer -> IO a) -> IO a
createRegisteredDataLayout :: (MonadAnyCont IO m) => TargetMachine -> IORef [IO ()] -> m (Ptr DataLayout)
instance GHC.Classes.Ord LLVM.Internal.OrcJIT.JITSymbol
instance GHC.Classes.Eq LLVM.Internal.OrcJIT.JITSymbol
instance GHC.Show.Show LLVM.Internal.OrcJIT.JITSymbol
instance GHC.Classes.Ord LLVM.Internal.OrcJIT.JITSymbolFlags
instance GHC.Classes.Eq LLVM.Internal.OrcJIT.JITSymbolFlags
instance GHC.Show.Show LLVM.Internal.OrcJIT.JITSymbolFlags
instance GHC.Classes.Ord LLVM.Internal.OrcJIT.MangledSymbol
instance GHC.Classes.Eq LLVM.Internal.OrcJIT.MangledSymbol
instance GHC.Show.Show LLVM.Internal.OrcJIT.MangledSymbol
instance LLVM.Internal.OrcJIT.LinkingLayer LLVM.Internal.OrcJIT.ObjectLinkingLayer
instance Control.Monad.IO.Class.MonadIO m => LLVM.Internal.Coding.EncodeM m LLVM.Internal.OrcJIT.SymbolResolver (GHC.IORef.IORef [GHC.Types.IO ()] -> GHC.Types.IO (GHC.Ptr.Ptr LLVM.Internal.FFI.OrcJIT.LambdaResolver))
instance Control.Monad.IO.Class.MonadIO m => LLVM.Internal.Coding.EncodeM m LLVM.Internal.OrcJIT.SymbolResolverFn (GHC.Ptr.FunPtr LLVM.Internal.FFI.OrcJIT.SymbolResolverFn)
instance Control.Monad.IO.Class.MonadIO m => LLVM.Internal.Coding.EncodeM m LLVM.Internal.OrcJIT.JITSymbol (GHC.Ptr.Ptr LLVM.Internal.FFI.OrcJIT.JITSymbol -> GHC.Types.IO ())
instance (Control.Monad.IO.Class.MonadIO m, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO m) => LLVM.Internal.Coding.DecodeM m LLVM.Internal.OrcJIT.JITSymbol (GHC.Ptr.Ptr LLVM.Internal.FFI.OrcJIT.JITSymbol)
instance GHC.Base.Monad m => LLVM.Internal.Coding.EncodeM m LLVM.Internal.OrcJIT.JITSymbolFlags LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance GHC.Base.Monad m => LLVM.Internal.Coding.DecodeM m LLVM.Internal.OrcJIT.JITSymbolFlags LLVM.Internal.FFI.LLVMCTypes.JITSymbolFlags
instance LLVM.Internal.Coding.EncodeM (Control.Monad.Trans.AnyCont.AnyContT GHC.Types.IO) LLVM.Internal.OrcJIT.MangledSymbol Foreign.C.String.CString
instance Control.Monad.IO.Class.MonadIO m => LLVM.Internal.Coding.DecodeM m LLVM.Internal.OrcJIT.MangledSymbol Foreign.C.String.CString


-- | This Haskell module is for/of functions for handling LLVM modules.
module LLVM.Internal.Module

-- | <a>http://llvm.org/doxygen/classllvm_1_1Module.html</a>
newtype Module
Module :: (IORef (Ptr Module)) -> Module
newModule :: Ptr Module -> IO (Module)
readModule :: MonadIO m => Module -> m (Ptr Module)

-- | Signal that a module does no longer exist and thus must not be
--   disposed. It is the responsibility of the caller to ensure that the
--   module has been disposed. If you use only the functions provided by
--   llvm-hs you should never call this yourself.
deleteModule :: Module -> IO ()

-- | A newtype to distinguish strings used for paths from other strings
newtype File
File :: FilePath -> File

-- | link LLVM modules - move or copy parts of a source module into a
--   destination module. Note that this operation is not commutative - not
--   only concretely (e.g. the destination module is modified, becoming the
--   result) but abstractly (e.g. unused private globals in the source
--   module do not appear in the result, but similar globals in the
--   destination remain). The source module is destroyed. May throw a
--   <a>LinkException</a>.
linkModules :: Module -> Module -> IO ()
class LLVMAssemblyInput s
llvmAssemblyMemoryBuffer :: (LLVMAssemblyInput s, MonadThrow m, MonadIO m, MonadAnyCont IO m) => s -> m (OwnerTransfered (Ptr MemoryBuffer))

-- | parse <a>Module</a> from LLVM assembly. May throw
--   <a>ParseFailureException</a>.
withModuleFromLLVMAssembly :: LLVMAssemblyInput s => Context -> s -> (Module -> IO a) -> IO a

-- | generate LLVM assembly from a <a>Module</a>
moduleLLVMAssembly :: Module -> IO ByteString

-- | write LLVM assembly for a <a>Module</a> to a file
writeLLVMAssemblyToFile :: File -> Module -> IO ()
class BitcodeInput b
bitcodeMemoryBuffer :: (BitcodeInput b, MonadThrow m, MonadIO m, MonadAnyCont IO m) => b -> m (Ptr MemoryBuffer)

-- | parse <a>Module</a> from LLVM bitcode. May throw
--   <a>ParseFailureException</a>.
withModuleFromBitcode :: BitcodeInput b => Context -> b -> (Module -> IO a) -> IO a

-- | generate LLVM bitcode from a <a>Module</a>
moduleBitcode :: Module -> IO ByteString

-- | write LLVM bitcode from a <a>Module</a> into a file
writeBitcodeToFile :: File -> Module -> IO ()

-- | May throw <a>TargetMachineEmitException</a>.
targetMachineEmit :: CodeGenFileType -> TargetMachine -> Module -> Ptr RawPWriteStream -> IO ()

-- | May throw <a>FdStreamException</a> and
--   <a>TargetMachineEmitException</a>.
emitToFile :: CodeGenFileType -> TargetMachine -> File -> Module -> IO ()

-- | May throw <a>TargetMachineEmitException</a>.
emitToByteString :: CodeGenFileType -> TargetMachine -> Module -> IO ByteString

-- | write target-specific assembly directly into a file
writeTargetAssemblyToFile :: TargetMachine -> File -> Module -> IO ()

-- | produce target-specific assembly as a <a>ByteString</a>
moduleTargetAssembly :: TargetMachine -> Module -> IO ByteString

-- | produce target-specific object code as a <a>ByteString</a>
moduleObject :: TargetMachine -> Module -> IO ByteString

-- | write target-specific object code directly into a file
writeObjectToFile :: TargetMachine -> File -> Module -> IO ()
setTargetTriple :: Ptr Module -> ShortByteString -> EncodeAST ()
getTargetTriple :: Ptr Module -> IO (Maybe ShortByteString)
setDataLayout :: Ptr Module -> DataLayout -> EncodeAST ()
getDataLayout :: Ptr Module -> IO (Maybe DataLayout)

-- | Execute a function after encoding the module in LLVM’s internal
--   representation. May throw <a>EncodeException</a>.
withModuleFromAST :: Context -> Module -> (Module -> IO a) -> IO a
decodeGlobalVariables :: Ptr Module -> DecodeAST (DecodeAST [Global])
decodeGlobalAliases :: Ptr Module -> DecodeAST (DecodeAST [Global])
decodeFunctions :: Ptr Module -> DecodeAST (DecodeAST [Global])
decodeNamedMetadataDefinitions :: Ptr Module -> DecodeAST [Definition]

-- | Get an LLVM.AST.<a>Module</a> from a LLVM.<a>Module</a> - i.e. raise
--   C++ objects into an Haskell AST.
moduleAST :: Module -> IO Module
instance GHC.Show.Show LLVM.Internal.Module.File
instance GHC.Read.Read LLVM.Internal.Module.File
instance GHC.Classes.Ord LLVM.Internal.Module.File
instance GHC.Classes.Eq LLVM.Internal.Module.File
instance LLVM.Internal.Module.BitcodeInput (GHC.Base.String, Data.ByteString.Internal.ByteString)
instance LLVM.Internal.Module.BitcodeInput LLVM.Internal.Module.File
instance LLVM.Internal.Module.LLVMAssemblyInput (GHC.Base.String, GHC.Base.String)
instance LLVM.Internal.Module.LLVMAssemblyInput (GHC.Base.String, Data.ByteString.Internal.ByteString)
instance LLVM.Internal.Module.LLVMAssemblyInput GHC.Base.String
instance LLVM.Internal.Module.LLVMAssemblyInput Data.ByteString.Internal.ByteString
instance LLVM.Internal.Module.LLVMAssemblyInput LLVM.Internal.Module.File


-- | A <a>Module</a> holds a C++ LLVM IR module. <a>Module</a>s may be
--   converted to or from strings or Haskell ASTs, or added to an
--   <a>ExecutionEngine</a> and so JIT compiled to get function pointers.
module LLVM.Module

-- | <a>http://llvm.org/doxygen/classllvm_1_1Module.html</a>
data Module

-- | A newtype to distinguish strings used for paths from other strings
newtype File
File :: FilePath -> File

-- | Execute a function after encoding the module in LLVM’s internal
--   representation. May throw <a>EncodeException</a>.
withModuleFromAST :: Context -> Module -> (Module -> IO a) -> IO a

-- | Get an LLVM.AST.<a>Module</a> from a LLVM.<a>Module</a> - i.e. raise
--   C++ objects into an Haskell AST.
moduleAST :: Module -> IO Module

-- | parse <a>Module</a> from LLVM assembly. May throw
--   <a>ParseFailureException</a>.
withModuleFromLLVMAssembly :: LLVMAssemblyInput s => Context -> s -> (Module -> IO a) -> IO a

-- | generate LLVM assembly from a <a>Module</a>
moduleLLVMAssembly :: Module -> IO ByteString

-- | write LLVM assembly for a <a>Module</a> to a file
writeLLVMAssemblyToFile :: File -> Module -> IO ()

-- | parse <a>Module</a> from LLVM bitcode. May throw
--   <a>ParseFailureException</a>.
withModuleFromBitcode :: BitcodeInput b => Context -> b -> (Module -> IO a) -> IO a

-- | generate LLVM bitcode from a <a>Module</a>
moduleBitcode :: Module -> IO ByteString

-- | write LLVM bitcode from a <a>Module</a> into a file
writeBitcodeToFile :: File -> Module -> IO ()

-- | produce target-specific assembly as a <a>ByteString</a>
moduleTargetAssembly :: TargetMachine -> Module -> IO ByteString

-- | write target-specific assembly directly into a file
writeTargetAssemblyToFile :: TargetMachine -> File -> Module -> IO ()

-- | produce target-specific object code as a <a>ByteString</a>
moduleObject :: TargetMachine -> Module -> IO ByteString

-- | write target-specific object code directly into a file
writeObjectToFile :: TargetMachine -> File -> Module -> IO ()

-- | link LLVM modules - move or copy parts of a source module into a
--   destination module. Note that this operation is not commutative - not
--   only concretely (e.g. the destination module is modified, becoming the
--   result) but abstractly (e.g. unused private globals in the source
--   module do not appear in the result, but similar globals in the
--   destination remain). The source module is destroyed. May throw a
--   <a>LinkException</a>.
linkModules :: Module -> Module -> IO ()


-- | An interface to use LLVM in all capacities
module LLVM

module LLVM.Internal.OrcJIT.CompileLayer

-- | There are two main types of operations provided by instances of
--   <a>CompileLayer</a>.
--   
--   <ol>
--   <li>You can add / remove modules using <a>addModule</a> /
--   <tt>removeModuleSet</tt>.</li>
--   <li>You can search for symbols using <a>findSymbol</a> /
--   <a>findSymbolIn</a> in the previously added modules.</li>
--   </ol>
class CompileLayer l
getCompileLayer :: CompileLayer l => l -> Ptr CompileLayer
getDataLayout :: CompileLayer l => l -> Ptr DataLayout
getCleanups :: CompileLayer l => l -> IORef [IO ()]

-- | Mangle a symbol according to the data layout stored in the
--   <a>CompileLayer</a>.
mangleSymbol :: CompileLayer l => l -> ShortByteString -> IO MangledSymbol

-- | <tt><a>findSymbol</a> layer symbol exportedSymbolsOnly</tt> searches
--   for <tt>symbol</tt> in all modules added to <tt>layer</tt>. If
--   <tt>exportedSymbolsOnly</tt> is <a>True</a> only exported symbols are
--   searched.
findSymbol :: CompileLayer l => l -> MangledSymbol -> Bool -> IO JITSymbol

-- | <tt><a>findSymbolIn</a> layer handle symbol exportedSymbolsOnly</tt>
--   searches for <tt>symbol</tt> in the context of the module represented
--   by <tt>handle</tt>. If <tt>exportedSymbolsOnly</tt> is <a>True</a>
--   only exported symbols are searched.
findSymbolIn :: CompileLayer l => l -> ModuleHandle -> MangledSymbol -> Bool -> IO JITSymbol

-- | Add a module to the <a>CompileLayer</a>. The <a>SymbolResolver</a> is
--   used to resolve external symbols in the module.
--   
--   <i>Note:</i> This function consumes the module passed to it and it
--   must not be used after calling this method.
addModule :: CompileLayer l => l -> Module -> SymbolResolver -> IO ModuleHandle

-- | Remove a previously added module.
removeModule :: CompileLayer l => l -> ModuleHandle -> IO ()

-- | <a>bracket</a>-style wrapper around <a>addModule</a> and
--   <a>removeModule</a>.
--   
--   <i>Note:</i> This function consumes the module passed to it and it
--   must not be used after calling this method.
withModule :: CompileLayer l => l -> Module -> SymbolResolver -> (ModuleHandle -> IO a) -> IO a

-- | Dispose of a <a>CompileLayer</a>. This should called when the
--   <a>CompileLayer</a> is not needed anymore.
disposeCompileLayer :: CompileLayer l => l -> IO ()

-- | Abstract type representing a module in a <a>CompileLayer</a>.
data ModuleHandle

module LLVM.Internal.OrcJIT.IRTransformLayer

-- | <a>IRTransformLayer</a> allows transforming modules before handing off
--   compilation to the underlying <a>CompileLayer</a>.
data IRTransformLayer baseLayer
IRTransformLayer :: !(Ptr IRTransformLayer) -> !(Ptr DataLayout) -> !(IORef [IO ()]) -> IRTransformLayer baseLayer
[compileLayer] :: IRTransformLayer baseLayer -> !(Ptr IRTransformLayer)
[dataLayout] :: IRTransformLayer baseLayer -> !(Ptr DataLayout)
[cleanupActions] :: IRTransformLayer baseLayer -> !(IORef [IO ()])

-- | Create a new <a>IRTransformLayer</a>.
--   
--   When the layer is no longer needed, it should be disposed using
--   <a>disposeCompileLayer</a>.
newIRTransformLayer :: CompileLayer l => l -> TargetMachine -> (Ptr Module -> IO (Ptr Module)) -> IO (IRTransformLayer l)

-- | <a>bracket</a>-style wrapper around <a>newIRTransformLayer</a> and
--   <a>disposeCompileLayer</a>.
withIRTransformLayer :: CompileLayer l => l -> TargetMachine -> (Ptr Module -> IO (Ptr Module)) -> (IRTransformLayer l -> IO a) -> IO a
instance GHC.Classes.Eq (LLVM.Internal.OrcJIT.IRTransformLayer.IRTransformLayer baseLayer)
instance LLVM.Internal.OrcJIT.CompileLayer.CompileLayer (LLVM.Internal.OrcJIT.IRTransformLayer.IRTransformLayer l)

module LLVM.Internal.OrcJIT.IRCompileLayer

-- | <a>IRCompileLayer</a> compiles modules immediately when they are
--   added. It parametrized by a <a>LinkingLayer</a> which handles linking
--   of the generated object files.
data IRCompileLayer linkingLayer
IRCompileLayer :: !(Ptr IRCompileLayer) -> !(Ptr DataLayout) -> !(IORef [IO ()]) -> IRCompileLayer linkingLayer
[compileLayer] :: IRCompileLayer linkingLayer -> !(Ptr IRCompileLayer)
[dataLayout] :: IRCompileLayer linkingLayer -> !(Ptr DataLayout)
[cleanupActions] :: IRCompileLayer linkingLayer -> !(IORef [IO ()])

-- | Create a new <a>IRCompileLayer</a>.
--   
--   When the layer is no longer needed, it should be disposed using
--   'disposeCompileLayer.
newIRCompileLayer :: LinkingLayer l => l -> TargetMachine -> IO (IRCompileLayer l)

-- | <a>bracket</a>-style wrapper around <a>newIRCompileLayer</a> and
--   <a>disposeCompileLayer</a>.
withIRCompileLayer :: LinkingLayer l => l -> TargetMachine -> (IRCompileLayer l -> IO a) -> IO a
instance GHC.Classes.Eq (LLVM.Internal.OrcJIT.IRCompileLayer.IRCompileLayer linkingLayer)
instance LLVM.Internal.OrcJIT.CompileLayer.CompileLayer (LLVM.Internal.OrcJIT.IRCompileLayer.IRCompileLayer l)

module LLVM.Internal.OrcJIT.CompileOnDemandLayer
type PartitioningFn = Ptr Function -> IO [Ptr Function]

-- | This is used by <a>CompileOnDemandLayer</a> to create callback that
--   compile functions when they are called.
data JITCompileCallbackManager
CallbackMgr :: !(Ptr JITCompileCallbackManager) -> !(IO ()) -> JITCompileCallbackManager

-- | This is used by <a>CompileOnDemandLayer</a> to manage the stubs
--   created for function definitions that have not yet been compiled.
newtype IndirectStubsManagerBuilder
StubsMgr :: (Ptr IndirectStubsManagerBuilder) -> IndirectStubsManagerBuilder

-- | Adding a module to a <a>CompileOnDemandLayer</a> creates stubs for its
--   functions definitions. When one of those stubs is called, the
--   corresponding function body is extracted and compiled.
data CompileOnDemandLayer baseLayer
CompileOnDemandLayer :: !(Ptr CompileOnDemandLayer) -> !(Ptr DataLayout) -> !(IORef [IO ()]) -> CompileOnDemandLayer baseLayer
[compileLayer] :: CompileOnDemandLayer baseLayer -> !(Ptr CompileOnDemandLayer)
[dataLayout] :: CompileOnDemandLayer baseLayer -> !(Ptr DataLayout)
[cleanupActions] :: CompileOnDemandLayer baseLayer -> !(IORef [IO ()])

-- | Create a new <a>IndirectStubsManagerBuilder</a>.
--   
--   When the stubs manager is no longer needed, it should be freed using
--   <a>disposeIndirectStubsManagerBuilder</a>.
newIndirectStubsManagerBuilder :: ShortByteString -> IO IndirectStubsManagerBuilder

-- | Dispose of an <a>IndirectStubsManagerBuilder</a>.
disposeIndirectStubsManagerBuilder :: IndirectStubsManagerBuilder -> IO ()

-- | <a>bracket</a>-style wrapper around
--   <a>newIndirectStubsManagerBuilder</a> and
--   <a>disposeIndirectStubsManagerBuilder</a>.
withIndirectStubsManagerBuilder :: ShortByteString -> (IndirectStubsManagerBuilder -> IO a) -> IO a

-- | Create a new <a>JITCompileCallbackManager</a>.
--   
--   When the callback manager is no longer needed, it should be freed
--   using <a>disposeJITCompileCallbackManager</a>.
newJITCompileCallbackManager :: ShortByteString -> Maybe (IO ()) -> IO JITCompileCallbackManager

-- | Dispose of a <a>JITCompileCallbackManager</a>.
disposeJITCompileCallbackManager :: JITCompileCallbackManager -> IO ()

-- | Execute a computation using a new <a>JITCompileCallbackManager</a>.
withJITCompileCallbackManager :: ShortByteString -> Maybe (IO ()) -> (JITCompileCallbackManager -> IO a) -> IO a

-- | Create a new <a>CompileOnDemandLayer</a>. The partitioning function
--   specifies which functions should be compiled when a function is
--   called.
--   
--   When the layer is no longer needed, it should be disposed using
--   <a>disposeCompileLayer</a>.
newCompileOnDemandLayer :: CompileLayer l => l -> TargetMachine -> (Ptr Function -> IO [Ptr Function]) -> JITCompileCallbackManager -> IndirectStubsManagerBuilder -> Bool -> IO (CompileOnDemandLayer l)

-- | <a>bracket</a>-style wrapper around <a>newCompileOnDemandLayer</a> and
--   <a>disposeCompileLayer</a>.
withCompileOnDemandLayer :: CompileLayer l => l -> TargetMachine -> (Ptr Function -> IO [Ptr Function]) -> JITCompileCallbackManager -> IndirectStubsManagerBuilder -> Bool -> (CompileOnDemandLayer l -> IO a) -> IO a
instance GHC.Classes.Eq (LLVM.Internal.OrcJIT.CompileOnDemandLayer.CompileOnDemandLayer baseLayer)
instance LLVM.Internal.OrcJIT.CompileLayer.CompileLayer (LLVM.Internal.OrcJIT.CompileOnDemandLayer.CompileOnDemandLayer l)
instance Control.Monad.IO.Class.MonadIO m => LLVM.Internal.Coding.EncodeM m LLVM.Internal.OrcJIT.CompileOnDemandLayer.PartitioningFn (GHC.IORef.IORef [GHC.Types.IO ()] -> GHC.Types.IO (GHC.Ptr.FunPtr LLVM.Internal.FFI.OrcJIT.CompileOnDemandLayer.PartitioningFn))
instance (Control.Monad.IO.Class.MonadIO m, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO m) => LLVM.Internal.Coding.EncodeM m (GHC.Base.Maybe (GHC.Types.IO ())) (LLVM.Internal.FFI.OrcJIT.TargetAddress, GHC.Types.IO ())

module LLVM.OrcJIT

-- | There are two main types of operations provided by instances of
--   <a>CompileLayer</a>.
--   
--   <ol>
--   <li>You can add / remove modules using <a>addModule</a> /
--   <tt>removeModuleSet</tt>.</li>
--   <li>You can search for symbols using <a>findSymbol</a> /
--   <a>findSymbolIn</a> in the previously added modules.</li>
--   </ol>
class CompileLayer l

-- | Abstract type representing a module in a <a>CompileLayer</a>.
data ModuleHandle

-- | Add a module to the <a>CompileLayer</a>. The <a>SymbolResolver</a> is
--   used to resolve external symbols in the module.
--   
--   <i>Note:</i> This function consumes the module passed to it and it
--   must not be used after calling this method.
addModule :: CompileLayer l => l -> Module -> SymbolResolver -> IO ModuleHandle

-- | Remove a previously added module.
removeModule :: CompileLayer l => l -> ModuleHandle -> IO ()

-- | <a>bracket</a>-style wrapper around <a>addModule</a> and
--   <a>removeModule</a>.
--   
--   <i>Note:</i> This function consumes the module passed to it and it
--   must not be used after calling this method.
withModule :: CompileLayer l => l -> Module -> SymbolResolver -> (ModuleHandle -> IO a) -> IO a

-- | <tt><a>findSymbol</a> layer symbol exportedSymbolsOnly</tt> searches
--   for <tt>symbol</tt> in all modules added to <tt>layer</tt>. If
--   <tt>exportedSymbolsOnly</tt> is <a>True</a> only exported symbols are
--   searched.
findSymbol :: CompileLayer l => l -> MangledSymbol -> Bool -> IO JITSymbol

-- | <tt><a>findSymbolIn</a> layer handle symbol exportedSymbolsOnly</tt>
--   searches for <tt>symbol</tt> in the context of the module represented
--   by <tt>handle</tt>. If <tt>exportedSymbolsOnly</tt> is <a>True</a>
--   only exported symbols are searched.
findSymbolIn :: CompileLayer l => l -> ModuleHandle -> MangledSymbol -> Bool -> IO JITSymbol
data JITSymbol
JITSymbol :: !WordPtr -> !JITSymbolFlags -> JITSymbol

-- | The address of the symbol. If you’ve looked up a function, you need to
--   cast this to a <a>FunPtr</a>.
[jitSymbolAddress] :: JITSymbol -> !WordPtr

-- | The flags of this symbol.
[jitSymbolFlags] :: JITSymbol -> !JITSymbolFlags
data JITSymbolFlags
JITSymbolFlags :: !Bool -> !Bool -> JITSymbolFlags

-- | Is this a weak symbol?
[jitSymbolWeak] :: JITSymbolFlags -> !Bool

-- | Is this symbol exported?
[jitSymbolExported] :: JITSymbolFlags -> !Bool

-- | Specifies how external symbols in a module added to a
--   <tt>CompielLayer</tt> should be resolved.
data SymbolResolver
SymbolResolver :: !SymbolResolverFn -> !SymbolResolverFn -> SymbolResolver

-- | This is used to find symbols in the same logical dynamic library as
--   the module referencing them.
[dylibResolver] :: SymbolResolver -> !SymbolResolverFn

-- | When <a>dylibResolver</a> fails to resolve a symbol,
--   <a>externalResolver</a> is used as a fallback to find external
--   symbols.
[externalResolver] :: SymbolResolver -> !SymbolResolverFn

-- | A mangled symbol which can be used in <tt>findSymbol</tt>. This can be
--   created using <tt>mangleSymbol</tt>.
data MangledSymbol

-- | Mangle a symbol according to the data layout stored in the
--   <a>CompileLayer</a>.
mangleSymbol :: CompileLayer l => l -> ShortByteString -> IO MangledSymbol

-- | <a>IRCompileLayer</a> compiles modules immediately when they are
--   added. It parametrized by a <a>LinkingLayer</a> which handles linking
--   of the generated object files.
data IRCompileLayer linkingLayer

-- | Create a new <a>IRCompileLayer</a>.
--   
--   When the layer is no longer needed, it should be disposed using
--   'disposeCompileLayer.
newIRCompileLayer :: LinkingLayer l => l -> TargetMachine -> IO (IRCompileLayer l)

-- | <a>bracket</a>-style wrapper around <a>newIRCompileLayer</a> and
--   <a>disposeCompileLayer</a>.
withIRCompileLayer :: LinkingLayer l => l -> TargetMachine -> (IRCompileLayer l -> IO a) -> IO a

-- | Adding a module to a <a>CompileOnDemandLayer</a> creates stubs for its
--   functions definitions. When one of those stubs is called, the
--   corresponding function body is extracted and compiled.
data CompileOnDemandLayer baseLayer

-- | Create a new <a>CompileOnDemandLayer</a>. The partitioning function
--   specifies which functions should be compiled when a function is
--   called.
--   
--   When the layer is no longer needed, it should be disposed using
--   <a>disposeCompileLayer</a>.
newCompileOnDemandLayer :: CompileLayer l => l -> TargetMachine -> (Ptr Function -> IO [Ptr Function]) -> JITCompileCallbackManager -> IndirectStubsManagerBuilder -> Bool -> IO (CompileOnDemandLayer l)

-- | <a>bracket</a>-style wrapper around <a>newCompileOnDemandLayer</a> and
--   <a>disposeCompileLayer</a>.
withCompileOnDemandLayer :: CompileLayer l => l -> TargetMachine -> (Ptr Function -> IO [Ptr Function]) -> JITCompileCallbackManager -> IndirectStubsManagerBuilder -> Bool -> (CompileOnDemandLayer l -> IO a) -> IO a

-- | <a>IRTransformLayer</a> allows transforming modules before handing off
--   compilation to the underlying <a>CompileLayer</a>.
data IRTransformLayer baseLayer

-- | Create a new <a>IRTransformLayer</a>.
--   
--   When the layer is no longer needed, it should be disposed using
--   <a>disposeCompileLayer</a>.
newIRTransformLayer :: CompileLayer l => l -> TargetMachine -> (Ptr Module -> IO (Ptr Module)) -> IO (IRTransformLayer l)

-- | <a>bracket</a>-style wrapper around <a>newIRTransformLayer</a> and
--   <a>disposeCompileLayer</a>.
withIRTransformLayer :: CompileLayer l => l -> TargetMachine -> (Ptr Module -> IO (Ptr Module)) -> (IRTransformLayer l -> IO a) -> IO a

-- | Dispose of a <a>CompileLayer</a>. This should called when the
--   <a>CompileLayer</a> is not needed anymore.
disposeCompileLayer :: CompileLayer l => l -> IO ()

-- | After a <tt>CompileLayer</tt> has compiled the modules to object code,
--   it passes the resulting object files to a <a>LinkingLayer</a>.
class LinkingLayer l

-- | Bare bones implementation of a <a>LinkingLayer</a>.
data ObjectLinkingLayer

-- | Create a new <a>ObjectLinkingLayer</a>. This should be disposed using
--   <a>disposeLinkingLayer</a> when it is no longer needed.
newObjectLinkingLayer :: IO ObjectLinkingLayer

-- | <a>bracket</a>-style wrapper around <a>newObjectLinkingLayer</a> and
--   <a>disposeLinkingLayer</a>.
withObjectLinkingLayer :: (ObjectLinkingLayer -> IO a) -> IO a

-- | Dispose of a <a>LinkingLayer</a>.
disposeLinkingLayer :: LinkingLayer l => l -> IO ()

-- | This is used by <a>CompileOnDemandLayer</a> to create callback that
--   compile functions when they are called.
data JITCompileCallbackManager

-- | Create a new <a>JITCompileCallbackManager</a>.
--   
--   When the callback manager is no longer needed, it should be freed
--   using <a>disposeJITCompileCallbackManager</a>.
newJITCompileCallbackManager :: ShortByteString -> Maybe (IO ()) -> IO JITCompileCallbackManager

-- | Dispose of a <a>JITCompileCallbackManager</a>.
disposeJITCompileCallbackManager :: JITCompileCallbackManager -> IO ()

-- | Execute a computation using a new <a>JITCompileCallbackManager</a>.
withJITCompileCallbackManager :: ShortByteString -> Maybe (IO ()) -> (JITCompileCallbackManager -> IO a) -> IO a

-- | This is used by <a>CompileOnDemandLayer</a> to manage the stubs
--   created for function definitions that have not yet been compiled.
data IndirectStubsManagerBuilder

-- | Create a new <a>IndirectStubsManagerBuilder</a>.
--   
--   When the stubs manager is no longer needed, it should be freed using
--   <a>disposeIndirectStubsManagerBuilder</a>.
newIndirectStubsManagerBuilder :: ShortByteString -> IO IndirectStubsManagerBuilder

-- | Dispose of an <a>IndirectStubsManagerBuilder</a>.
disposeIndirectStubsManagerBuilder :: IndirectStubsManagerBuilder -> IO ()

-- | <a>bracket</a>-style wrapper around
--   <a>newIndirectStubsManagerBuilder</a> and
--   <a>disposeIndirectStubsManagerBuilder</a>.
withIndirectStubsManagerBuilder :: ShortByteString -> (IndirectStubsManagerBuilder -> IO a) -> IO a

module LLVM.Internal.Analysis

-- | Run basic sanity checks on a <a>Module</a>. Note that the same checks
--   will trigger assertions within LLVM if LLVM was built with them turned
--   on, before this function can be is called.
verify :: Module -> IO ()


-- | functionality for analyzing <a>Module</a>s. Much of the analysis
--   possible with LLVM is managed internally, as needed by
--   <tt>Transforms</tt>, and so is not yet exposed here.
module LLVM.Analysis

-- | Run basic sanity checks on a <a>Module</a>. Note that the same checks
--   will trigger assertions within LLVM if LLVM was built with them turned
--   on, before this function can be is called.
verify :: Module -> IO ()

module LLVM.Internal.ExecutionEngine
removeModule :: Ptr ExecutionEngine -> Ptr Module -> IO ()

-- | a <a>ExecutableModule</a> e represents a <a>Module</a> which is
--   currently "in" an <a>ExecutionEngine</a>, and so the functions of
--   which may be executed.
data ExecutableModule e
ExecutableModule :: e -> (Ptr Module) -> ExecutableModule e

-- | <a>http://llvm.org/doxygen/classllvm_1_1ExecutionEngine.html</a>
class ExecutionEngine e f | e -> f
withModuleInEngine :: ExecutionEngine e f => e -> Module -> (ExecutableModule e -> IO a) -> IO a
getFunction :: ExecutionEngine e f => ExecutableModule e -> Name -> IO (Maybe f)
withExecutionEngine :: Context -> Maybe (Ptr Module) -> (Ptr (Ptr ExecutionEngine) -> Ptr Module -> Ptr (OwnerTransfered CString) -> IO CUInt) -> (Ptr ExecutionEngine -> IO a) -> IO a
data MCJITState
Deferred :: (forall a. Module -> (Ptr ExecutionEngine -> IO a) -> IO a) -> MCJITState
Constructed :: (Ptr ExecutionEngine) -> MCJITState

-- | <a>http://llvm.org/doxygen/classllvm_1_1MCJIT.html</a>
--   <a>http://blog.llvm.org/2010/04/intro-to-llvm-mc-project.html</a> N.B.
--   - the LLVM MCJIT does not current support adding multiple modules to
--   any one instance of the MCJIT.
newtype MCJIT
MCJIT :: (IORef MCJITState) -> MCJIT

-- | bracket the creation and destruction of an <a>MCJIT</a>
withMCJIT :: Context -> Maybe Word -> Maybe Model -> Maybe Bool -> Maybe Bool -> (MCJIT -> IO a) -> IO a
instance LLVM.Internal.ExecutionEngine.ExecutionEngine LLVM.Internal.ExecutionEngine.MCJIT (GHC.Ptr.FunPtr ())
instance LLVM.Internal.ExecutionEngine.ExecutionEngine (GHC.Ptr.Ptr LLVM.Internal.FFI.ExecutionEngine.ExecutionEngine) (GHC.Ptr.FunPtr ())


-- | Tools for JIT execution
module LLVM.ExecutionEngine

-- | <a>http://llvm.org/doxygen/classllvm_1_1ExecutionEngine.html</a>
class ExecutionEngine e f | e -> f
withModuleInEngine :: ExecutionEngine e f => e -> Module -> (ExecutableModule e -> IO a) -> IO a
getFunction :: ExecutionEngine e f => ExecutableModule e -> Name -> IO (Maybe f)

-- | a <a>ExecutableModule</a> e represents a <a>Module</a> which is
--   currently "in" an <a>ExecutionEngine</a>, and so the functions of
--   which may be executed.
data ExecutableModule e

-- | <a>http://llvm.org/doxygen/classllvm_1_1MCJIT.html</a>
--   <a>http://blog.llvm.org/2010/04/intro-to-llvm-mc-project.html</a> N.B.
--   - the LLVM MCJIT does not current support adding multiple modules to
--   any one instance of the MCJIT.
data MCJIT

-- | bracket the creation and destruction of an <a>MCJIT</a>
withMCJIT :: Context -> Maybe Word -> Maybe Model -> Maybe Bool -> Maybe Bool -> (MCJIT -> IO a) -> IO a


-- | functionality necessary when running LLVM in multiple threads at the
--   same time.
module LLVM.Threading

-- | This function used set the multithreading mode of LLVM, but that
--   feature no longer exists. Threading is controlled only at runtime with
--   the configure flag --enable-threads (default is YES). This function
--   will now check that the the compiled-in multithreading support
--   (returned by <a>isMultithreaded</a>) is sufficient to support the
--   requested access, and fail if not, so as to prevent uncontrolled use
--   of a version of LLVM compiled to be capable only of singled threaded
--   use by haskell code requesting multithreading support.

-- | <i>Deprecated: LLVM no longer features runtime control of
--   multithreading support</i>
setMultithreaded :: Bool -> IO ()

-- | Check if multithreading is enabled in LLVM
isMultithreaded :: IO Bool


-- | This module provides an enumeration of the various transformation
--   (e.g. optimization) passes provided by LLVM. They can be used to
--   create a <a>PassManager</a> to, in turn, run the passes on
--   <a>Module</a>s. If you don't know what passes you want, consider
--   instead using <a>CuratedPassSetSpec</a>.
module LLVM.Transforms

-- | <a>http://llvm.org/docs/Passes.html#transform-passes</a> A few passes
--   can make use of information in a <a>TargetMachine</a> if one is
--   provided to <a>createPassManager</a>.
--   <a>http://llvm.org/doxygen/classllvm_1_1Pass.html</a>
data Pass
AggressiveDeadCodeElimination :: Pass
BreakCriticalEdges :: Pass

-- | can use a <a>TargetMachine</a>
CodeGenPrepare :: Pass
ConstantPropagation :: Pass
CorrelatedValuePropagation :: Pass
DeadCodeElimination :: Pass
DeadInstructionElimination :: Pass
DeadStoreElimination :: Pass
DemoteRegisterToMemory :: Pass
EarlyCommonSubexpressionElimination :: Pass
GlobalValueNumbering :: Bool -> Pass
[noLoads] :: Pass -> Bool
InductionVariableSimplify :: Pass
InstructionCombining :: Pass
JumpThreading :: Pass
LoopClosedSingleStaticAssignment :: Pass
LoopInvariantCodeMotion :: Pass
LoopDeletion :: Pass
LoopIdiom :: Pass
LoopInstructionSimplify :: Pass
LoopRotate :: Pass
LoopStrengthReduce :: Pass
LoopUnroll :: Maybe Word -> Maybe Word -> Maybe Bool -> Pass
[loopUnrollThreshold] :: Pass -> Maybe Word
[count] :: Pass -> Maybe Word
[allowPartial] :: Pass -> Maybe Bool
LoopUnswitch :: Bool -> Pass
[optimizeForSize] :: Pass -> Bool
LowerAtomic :: Pass
LowerInvoke :: Pass
LowerSwitch :: Pass
LowerExpectIntrinsic :: Pass
MemcpyOptimization :: Pass
PromoteMemoryToRegister :: Pass
Reassociate :: Pass
ScalarReplacementOfAggregates :: Bool -> Pass
[requiresDominatorTree] :: Pass -> Bool
OldScalarReplacementOfAggregates :: Maybe Word -> Bool -> Maybe Word -> Maybe Word -> Maybe Word -> Pass
[oldScalarReplacementOfAggregatesThreshold] :: Pass -> Maybe Word
[useDominatorTree] :: Pass -> Bool
[structMemberThreshold] :: Pass -> Maybe Word
[arrayElementThreshold] :: Pass -> Maybe Word
[scalarLoadThreshold] :: Pass -> Maybe Word
SparseConditionalConstantPropagation :: Pass
SimplifyLibCalls :: Pass
SimplifyControlFlowGraph :: Pass
Sinking :: Pass
TailCallElimination :: Pass
AlwaysInline :: Bool -> Pass
[insertLifetime] :: Pass -> Bool
ArgumentPromotion :: Pass
ConstantMerge :: Pass
FunctionAttributes :: Pass
FunctionInlining :: Word -> Pass
[functionInliningThreshold] :: Pass -> Word
GlobalDeadCodeElimination :: Pass
InternalizeFunctions :: [String] -> Pass
[exportList] :: Pass -> [String]
InterproceduralConstantPropagation :: Pass
InterproceduralSparseConditionalConstantPropagation :: Pass
MergeFunctions :: Pass
PartialInlining :: Pass
PruneExceptionHandling :: Pass
StripDeadDebugInfo :: Pass
StripDebugDeclare :: Pass
StripNonDebugSymbols :: Pass
StripSymbols :: Bool -> Pass
[onlyDebugInfo] :: Pass -> Bool
LoopVectorize :: Bool -> Bool -> Pass
[noUnrolling] :: Pass -> Bool
[alwaysVectorize] :: Pass -> Bool
SuperwordLevelParallelismVectorize :: Pass
GCOVProfiler :: Bool -> Bool -> GCOVVersion -> Bool -> Bool -> Bool -> Pass
[emitNotes] :: Pass -> Bool
[emitData] :: Pass -> Bool
[version] :: Pass -> GCOVVersion
[useCfgChecksum] :: Pass -> Bool
[noRedZone] :: Pass -> Bool
[functionNamesInData] :: Pass -> Bool
AddressSanitizer :: Pass
AddressSanitizerModule :: Pass
MemorySanitizer :: Bool -> Pass
[trackOrigins] :: Pass -> Bool
ThreadSanitizer :: Pass
BoundsChecking :: Pass

-- | Defaults for the <a>LoopVectorize</a> pass
defaultLoopVectorize :: Pass

-- | See
--   <a>http://gcc.gnu.org/viewcvs/gcc/trunk/gcc/gcov-io.h?view=markup</a>.
newtype GCOVVersion
GCOVVersion :: ShortByteString -> GCOVVersion

-- | Defaults for <a>GCOVProfiler</a>.
defaultGCOVProfiler :: Pass

-- | Defaults for <a>AddressSanitizer</a>.
defaultAddressSanitizer :: Pass

-- | Defaults for <a>AddressSanitizerModule</a>.
defaultAddressSanitizerModule :: Pass

-- | Defaults for <a>MemorySanitizer</a>.
defaultMemorySanitizer :: Pass

-- | Defaults for <a>ThreadSanitizer</a>.
defaultThreadSanitizer :: Pass
instance GHC.Generics.Generic LLVM.Transforms.Pass
instance Data.Data.Data LLVM.Transforms.Pass
instance GHC.Show.Show LLVM.Transforms.Pass
instance GHC.Read.Read LLVM.Transforms.Pass
instance GHC.Classes.Ord LLVM.Transforms.Pass
instance GHC.Classes.Eq LLVM.Transforms.Pass
instance GHC.Generics.Generic LLVM.Transforms.GCOVVersion
instance Data.Data.Data LLVM.Transforms.GCOVVersion
instance GHC.Show.Show LLVM.Transforms.GCOVVersion
instance GHC.Read.Read LLVM.Transforms.GCOVVersion
instance GHC.Classes.Ord LLVM.Transforms.GCOVVersion
instance GHC.Classes.Eq LLVM.Transforms.GCOVVersion

module LLVM.Internal.FFI.PassManager
data PassManager
createPassManager :: IO (Ptr PassManager)
disposePassManager :: Ptr PassManager -> IO ()
runPassManager :: Ptr PassManager -> Ptr Module -> IO CUInt
createFunctionPassManagerForModule :: Ptr Module -> IO (Ptr PassManager)
initializeFunctionPassManager :: Ptr PassManager -> IO CUInt
runFunctionPassManager :: Ptr PassManager -> Ptr Value -> IO CUInt
finalizeFunctionPassManager :: Ptr PassManager -> IO CUInt
addAnalysisPasses :: Ptr TargetMachine -> Ptr PassManager -> IO ()
addTargetLibraryInfoPass' :: Ptr TargetLibraryInfo -> Ptr PassManager -> IO ()
addTargetLibraryInfoPass :: Ptr PassManager -> Ptr TargetLibraryInfo -> IO ()
addBoundsCheckingPass' :: Ptr PassManager -> IO ()
addThreadSanitizerPass' :: Ptr PassManager -> IO ()
addMemorySanitizerPass' :: Ptr PassManager -> LLVMBool -> IO ()
addAddressSanitizerModulePass' :: Ptr PassManager -> IO ()
addAddressSanitizerPass' :: Ptr PassManager -> IO ()
addGCOVProfilerPass' :: Ptr PassManager -> LLVMBool -> LLVMBool -> CString -> LLVMBool -> LLVMBool -> LLVMBool -> IO ()
addSuperwordLevelParallelismVectorizePass' :: Ptr PassManager -> IO ()
addLoopVectorizePass' :: Ptr PassManager -> LLVMBool -> LLVMBool -> IO ()
addStripSymbolsPass' :: Ptr PassManager -> LLVMBool -> IO ()
addStripNonDebugSymbolsPass' :: Ptr PassManager -> IO ()
addStripDebugDeclarePass' :: Ptr PassManager -> IO ()
addStripDeadDebugInfoPass' :: Ptr PassManager -> IO ()
addPruneExceptionHandlingPass' :: Ptr PassManager -> IO ()
addPartialInliningPass' :: Ptr PassManager -> IO ()
addMergeFunctionsPass' :: Ptr PassManager -> IO ()
addInterproceduralSparseConditionalConstantPropagationPass' :: Ptr PassManager -> IO ()
addInterproceduralConstantPropagationPass' :: Ptr PassManager -> IO ()
addInternalizeFunctionsPass' :: Ptr PassManager -> CUInt -> Ptr CString -> IO ()
addGlobalDeadCodeEliminationPass' :: Ptr PassManager -> IO ()
addFunctionInliningPass' :: Ptr PassManager -> CUInt -> IO ()
addFunctionAttributesPass' :: Ptr PassManager -> IO ()
addConstantMergePass' :: Ptr PassManager -> IO ()
addArgumentPromotionPass' :: Ptr PassManager -> IO ()
addAlwaysInlinePass' :: Ptr PassManager -> LLVMBool -> IO ()
addTailCallEliminationPass' :: Ptr PassManager -> IO ()
addSinkingPass' :: Ptr PassManager -> IO ()
addSimplifyControlFlowGraphPass' :: Ptr PassManager -> IO ()
addSimplifyLibCallsPass' :: Ptr PassManager -> IO ()
addSparseConditionalConstantPropagationPass' :: Ptr PassManager -> IO ()
addOldScalarReplacementOfAggregatesPass' :: Ptr PassManager -> NothingAsMinusOne Word -> LLVMBool -> NothingAsMinusOne Word -> NothingAsMinusOne Word -> NothingAsMinusOne Word -> IO ()
addScalarReplacementOfAggregatesPass' :: Ptr PassManager -> LLVMBool -> IO ()
addReassociatePass' :: Ptr PassManager -> IO ()
addPromoteMemoryToRegisterPass' :: Ptr PassManager -> IO ()
addMemcpyOptimizationPass' :: Ptr PassManager -> IO ()
addLowerExpectIntrinsicPass' :: Ptr PassManager -> IO ()
addLowerSwitchPass' :: Ptr PassManager -> IO ()
addLowerInvokePass' :: Ptr PassManager -> IO ()
addLowerAtomicPass' :: Ptr PassManager -> IO ()
addLoopUnswitchPass' :: Ptr PassManager -> LLVMBool -> IO ()
addLoopUnrollPass' :: Ptr PassManager -> NothingAsMinusOne Word -> NothingAsMinusOne Word -> NothingAsMinusOne Bool -> IO ()
addLoopStrengthReducePass' :: Ptr PassManager -> IO ()
addLoopRotatePass' :: Ptr PassManager -> IO ()
addLoopInstructionSimplifyPass' :: Ptr PassManager -> IO ()
addLoopIdiomPass' :: Ptr PassManager -> IO ()
addLoopDeletionPass' :: Ptr PassManager -> IO ()
addLoopInvariantCodeMotionPass' :: Ptr PassManager -> IO ()
addLoopClosedSingleStaticAssignmentPass' :: Ptr PassManager -> IO ()
addJumpThreadingPass' :: Ptr PassManager -> IO ()
addInstructionCombiningPass' :: Ptr PassManager -> IO ()
addInductionVariableSimplifyPass' :: Ptr PassManager -> IO ()
addGlobalValueNumberingPass' :: Ptr PassManager -> LLVMBool -> IO ()
addEarlyCommonSubexpressionEliminationPass' :: Ptr PassManager -> IO ()
addDemoteRegisterToMemoryPass' :: Ptr PassManager -> IO ()
addDeadStoreEliminationPass' :: Ptr PassManager -> IO ()
addDeadInstructionEliminationPass' :: Ptr PassManager -> IO ()
addDeadCodeEliminationPass' :: Ptr PassManager -> IO ()
addCorrelatedValuePropagationPass' :: Ptr PassManager -> IO ()
addConstantPropagationPass' :: Ptr PassManager -> IO ()
addCodeGenPreparePass' :: Ptr PassManager -> Ptr TargetMachine -> IO ()
addBreakCriticalEdgesPass' :: Ptr PassManager -> IO ()
addAggressiveDeadCodeEliminationPass' :: Ptr PassManager -> IO ()
addBoundsCheckingPass :: Ptr PassManager -> IO ()
addThreadSanitizerPass :: Ptr PassManager -> IO ()
addMemorySanitizerPass :: Ptr PassManager -> LLVMBool -> IO ()
addAddressSanitizerModulePass :: Ptr PassManager -> IO ()
addAddressSanitizerPass :: Ptr PassManager -> IO ()
addGCOVProfilerPass :: Ptr PassManager -> LLVMBool -> LLVMBool -> CString -> LLVMBool -> LLVMBool -> LLVMBool -> IO ()
addSuperwordLevelParallelismVectorizePass :: Ptr PassManager -> IO ()
addLoopVectorizePass :: Ptr PassManager -> LLVMBool -> LLVMBool -> IO ()
addStripSymbolsPass :: Ptr PassManager -> LLVMBool -> IO ()
addStripNonDebugSymbolsPass :: Ptr PassManager -> IO ()
addStripDebugDeclarePass :: Ptr PassManager -> IO ()
addStripDeadDebugInfoPass :: Ptr PassManager -> IO ()
addPruneExceptionHandlingPass :: Ptr PassManager -> IO ()
addPartialInliningPass :: Ptr PassManager -> IO ()
addMergeFunctionsPass :: Ptr PassManager -> IO ()
addInterproceduralSparseConditionalConstantPropagationPass :: Ptr PassManager -> IO ()
addInterproceduralConstantPropagationPass :: Ptr PassManager -> IO ()
addInternalizeFunctionsPass :: Ptr PassManager -> (CUInt, Ptr CString) -> IO ()
addGlobalDeadCodeEliminationPass :: Ptr PassManager -> IO ()
addFunctionInliningPass :: Ptr PassManager -> CUInt -> IO ()
addFunctionAttributesPass :: Ptr PassManager -> IO ()
addConstantMergePass :: Ptr PassManager -> IO ()
addArgumentPromotionPass :: Ptr PassManager -> IO ()
addAlwaysInlinePass :: Ptr PassManager -> LLVMBool -> IO ()
addTailCallEliminationPass :: Ptr PassManager -> IO ()
addSinkingPass :: Ptr PassManager -> IO ()
addSimplifyControlFlowGraphPass :: Ptr PassManager -> IO ()
addSimplifyLibCallsPass :: Ptr PassManager -> IO ()
addSparseConditionalConstantPropagationPass :: Ptr PassManager -> IO ()
addOldScalarReplacementOfAggregatesPass :: Ptr PassManager -> NothingAsMinusOne Word -> LLVMBool -> NothingAsMinusOne Word -> NothingAsMinusOne Word -> NothingAsMinusOne Word -> IO ()
addScalarReplacementOfAggregatesPass :: Ptr PassManager -> LLVMBool -> IO ()
addReassociatePass :: Ptr PassManager -> IO ()
addPromoteMemoryToRegisterPass :: Ptr PassManager -> IO ()
addMemcpyOptimizationPass :: Ptr PassManager -> IO ()
addLowerExpectIntrinsicPass :: Ptr PassManager -> IO ()
addLowerSwitchPass :: Ptr PassManager -> IO ()
addLowerInvokePass :: Ptr PassManager -> IO ()
addLowerAtomicPass :: Ptr PassManager -> IO ()
addLoopUnswitchPass :: Ptr PassManager -> LLVMBool -> IO ()
addLoopUnrollPass :: Ptr PassManager -> NothingAsMinusOne Word -> NothingAsMinusOne Word -> NothingAsMinusOne Bool -> IO ()
addLoopStrengthReducePass :: Ptr PassManager -> IO ()
addLoopRotatePass :: Ptr PassManager -> IO ()
addLoopInstructionSimplifyPass :: Ptr PassManager -> IO ()
addLoopIdiomPass :: Ptr PassManager -> IO ()
addLoopDeletionPass :: Ptr PassManager -> IO ()
addLoopInvariantCodeMotionPass :: Ptr PassManager -> IO ()
addLoopClosedSingleStaticAssignmentPass :: Ptr PassManager -> IO ()
addJumpThreadingPass :: Ptr PassManager -> IO ()
addInstructionCombiningPass :: Ptr PassManager -> IO ()
addInductionVariableSimplifyPass :: Ptr PassManager -> IO ()
addGlobalValueNumberingPass :: Ptr PassManager -> LLVMBool -> IO ()
addEarlyCommonSubexpressionEliminationPass :: Ptr PassManager -> IO ()
addDemoteRegisterToMemoryPass :: Ptr PassManager -> IO ()
addDeadStoreEliminationPass :: Ptr PassManager -> IO ()
addDeadInstructionEliminationPass :: Ptr PassManager -> IO ()
addDeadCodeEliminationPass :: Ptr PassManager -> IO ()
addCorrelatedValuePropagationPass :: Ptr PassManager -> IO ()
addConstantPropagationPass :: Ptr PassManager -> IO ()
addCodeGenPreparePass :: Ptr PassManager -> Ptr TargetMachine -> IO ()
addBreakCriticalEdgesPass :: Ptr PassManager -> IO ()
addAggressiveDeadCodeEliminationPass :: Ptr PassManager -> IO ()
data PassManagerBuilder
passManagerBuilderCreate :: IO (Ptr PassManagerBuilder)
passManagerBuilderDispose :: Ptr PassManagerBuilder -> IO ()
passManagerBuilderSetOptLevel :: Ptr PassManagerBuilder -> CUInt -> IO ()
passManagerBuilderSetSizeLevel :: Ptr PassManagerBuilder -> CUInt -> IO ()
passManagerBuilderSetDisableUnitAtATime :: Ptr PassManagerBuilder -> LLVMBool -> IO ()
passManagerBuilderSetDisableUnrollLoops :: Ptr PassManagerBuilder -> CUInt -> IO ()
passManagerBuilderSetDisableSimplifyLibCalls :: Ptr PassManagerBuilder -> LLVMBool -> IO ()
passManagerBuilderUseInlinerWithThreshold :: Ptr PassManagerBuilder -> CUInt -> IO ()
passManagerBuilderPopulateFunctionPassManager :: Ptr PassManagerBuilder -> Ptr PassManager -> IO ()
passManagerBuilderPopulateModulePassManager :: Ptr PassManagerBuilder -> Ptr PassManager -> IO ()
passManagerBuilderPopulateLTOPassManager :: Ptr PassManagerBuilder -> Ptr PassManager -> CUChar -> CUChar -> IO ()
passManagerBuilderSetLibraryInfo :: Ptr PassManagerBuilder -> Ptr TargetLibraryInfo -> IO ()
passManagerBuilderSetLoopVectorize :: Ptr PassManagerBuilder -> LLVMBool -> IO ()
passManagerBuilderSetSuperwordLevelParallelismVectorize :: Ptr PassManagerBuilder -> LLVMBool -> IO ()

module LLVM.Internal.PassManager

-- | <a>http://llvm.org/doxygen/classllvm_1_1PassManager.html</a> Note: a
--   PassManager does substantive behind-the-scenes work, arranging for the
--   results of various analyses to be available as needed by transform
--   passes, shared as possible.
newtype PassManager
PassManager :: (Ptr PassManager) -> PassManager

-- | There are different ways to get a <a>PassManager</a>. This type
--   embodies them.
data PassSetSpec

-- | a <a>PassSetSpec</a> is a lower-level, detailed specification of a set
--   of passes. It allows fine-grained control of what passes are to be run
--   when, and the specification of passes not available through
--   <a>CuratedPassSetSpec</a>.
PassSetSpec :: [Pass] -> Maybe DataLayout -> Maybe TargetLibraryInfo -> Maybe TargetMachine -> PassSetSpec
[transforms] :: PassSetSpec -> [Pass]
[dataLayout] :: PassSetSpec -> Maybe DataLayout
[targetLibraryInfo] :: PassSetSpec -> Maybe TargetLibraryInfo
[targetMachine] :: PassSetSpec -> Maybe TargetMachine

-- | This type is a high-level specification of a set of passes. It uses
--   the same collection of passes chosen by the LLVM team in the command
--   line tool <tt>opt</tt>. The fields of this spec are much like typical
--   compiler command-line flags - e.g. -O&lt;n&gt;, etc.
CuratedPassSetSpec :: Maybe Word -> Maybe Word -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Word -> Maybe DataLayout -> Maybe TargetLibraryInfo -> Maybe TargetMachine -> PassSetSpec
[optLevel] :: PassSetSpec -> Maybe Word
[sizeLevel] :: PassSetSpec -> Maybe Word
[unitAtATime] :: PassSetSpec -> Maybe Bool
[simplifyLibCalls] :: PassSetSpec -> Maybe Bool
[loopVectorize] :: PassSetSpec -> Maybe Bool
[superwordLevelParallelismVectorize] :: PassSetSpec -> Maybe Bool
[useInlinerWithThreshold] :: PassSetSpec -> Maybe Word
[dataLayout] :: PassSetSpec -> Maybe DataLayout
[targetLibraryInfo] :: PassSetSpec -> Maybe TargetLibraryInfo
[targetMachine] :: PassSetSpec -> Maybe TargetMachine

-- | Helper to make a curated <a>PassSetSpec</a>
defaultCuratedPassSetSpec :: PassSetSpec

-- | an empty <a>PassSetSpec</a>
defaultPassSetSpec :: PassSetSpec
createPassManager :: PassSetSpec -> IO (Ptr PassManager)

-- | bracket the creation of a <a>PassManager</a>
withPassManager :: PassSetSpec -> (PassManager -> IO a) -> IO a

-- | run the passes in a <a>PassManager</a> on a <a>Module</a>, modifying
--   the <a>Module</a>.
runPassManager :: PassManager -> Module -> IO Bool
instance (GHC.Base.Monad m, Control.Monad.Catch.MonadThrow m, Control.Monad.AnyCont.Class.MonadAnyCont GHC.Types.IO m) => LLVM.Internal.Coding.EncodeM m LLVM.Transforms.GCOVVersion Foreign.C.String.CString


-- | A <a>PassManager</a> holds collection of passes, to be run on
--   <tt>Module</tt>s. Build one with <a>withPassManager</a>:
--   
--   <ul>
--   <li>using <a>CuratedPassSetSpec</a> if you want optimization but not
--   to play with your compiler</li>
--   <li>using <a>PassSetSpec</a> if you do want to play with your
--   compiler</li>
--   </ul>
module LLVM.PassManager

-- | <a>http://llvm.org/doxygen/classllvm_1_1PassManager.html</a> Note: a
--   PassManager does substantive behind-the-scenes work, arranging for the
--   results of various analyses to be available as needed by transform
--   passes, shared as possible.
data PassManager

-- | There are different ways to get a <a>PassManager</a>. This type
--   embodies them.
data PassSetSpec

-- | a <a>PassSetSpec</a> is a lower-level, detailed specification of a set
--   of passes. It allows fine-grained control of what passes are to be run
--   when, and the specification of passes not available through
--   <a>CuratedPassSetSpec</a>.
PassSetSpec :: [Pass] -> Maybe DataLayout -> Maybe TargetLibraryInfo -> Maybe TargetMachine -> PassSetSpec
[transforms] :: PassSetSpec -> [Pass]
[dataLayout] :: PassSetSpec -> Maybe DataLayout
[targetLibraryInfo] :: PassSetSpec -> Maybe TargetLibraryInfo
[targetMachine] :: PassSetSpec -> Maybe TargetMachine

-- | This type is a high-level specification of a set of passes. It uses
--   the same collection of passes chosen by the LLVM team in the command
--   line tool <tt>opt</tt>. The fields of this spec are much like typical
--   compiler command-line flags - e.g. -O&lt;n&gt;, etc.
CuratedPassSetSpec :: Maybe Word -> Maybe Word -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Word -> Maybe DataLayout -> Maybe TargetLibraryInfo -> Maybe TargetMachine -> PassSetSpec
[optLevel] :: PassSetSpec -> Maybe Word
[sizeLevel] :: PassSetSpec -> Maybe Word
[unitAtATime] :: PassSetSpec -> Maybe Bool
[simplifyLibCalls] :: PassSetSpec -> Maybe Bool
[loopVectorize] :: PassSetSpec -> Maybe Bool
[superwordLevelParallelismVectorize] :: PassSetSpec -> Maybe Bool
[useInlinerWithThreshold] :: PassSetSpec -> Maybe Word
[dataLayout] :: PassSetSpec -> Maybe DataLayout
[targetLibraryInfo] :: PassSetSpec -> Maybe TargetLibraryInfo
[targetMachine] :: PassSetSpec -> Maybe TargetMachine

-- | an empty <a>PassSetSpec</a>
defaultPassSetSpec :: PassSetSpec

-- | Helper to make a curated <a>PassSetSpec</a>
defaultCuratedPassSetSpec :: PassSetSpec

-- | bracket the creation of a <a>PassManager</a>
withPassManager :: PassSetSpec -> (PassManager -> IO a) -> IO a

-- | run the passes in a <a>PassManager</a> on a <a>Module</a>, modifying
--   the <a>Module</a>.
runPassManager :: PassManager -> Module -> IO Bool
