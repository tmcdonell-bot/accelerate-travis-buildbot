-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Automatic testing of Haskell programs
--   
--   QuickCheck is a library for random testing of program properties.
--   
--   The programmer provides a specification of the program, in the form of
--   properties which functions should satisfy, and QuickCheck then tests
--   that the properties hold in a large number of randomly generated
--   cases.
--   
--   Specifications are expressed in Haskell, using combinators defined in
--   the QuickCheck library. QuickCheck provides combinators to define
--   properties, observe the distribution of test data, and define test
--   data generators.
--   
--   The <a>official QuickCheck manual</a> explains how to write generators
--   and properties; it is out-of-date in some details but still full of
--   useful advice.
--   
--   A user of QuickCheck has written an unofficial, but detailed, tutorial
--   which you can find at
--   <a>https://begriffs.com/posts/2017-01-14-design-use-quickcheck.html</a>.
@package QuickCheck
@version 2.10.1


-- | Throwing and catching exceptions. Internal QuickCheck module.
module Test.QuickCheck.Exception
type AnException = SomeException
tryEvaluate :: a -> IO (Either AnException a)
tryEvaluateIO :: IO a -> IO (Either AnException a)
evaluate :: a -> IO a

-- | Test if an exception was a <tt>^C</tt>. QuickCheck won't try to shrink
--   an interrupted test case.
isInterrupt :: AnException -> Bool

-- | A special exception that makes QuickCheck discard the test case.
--   Normally you should use <tt>==&gt;</tt>, but if for some reason this
--   isn't possible (e.g. you are deep inside a generator), use
--   <a>discard</a> instead.
discard :: a
isDiscard :: AnException -> Bool
finally :: IO a -> IO b -> IO a


-- | A wrapper around the system random number generator. Internal
--   QuickCheck module.
module Test.QuickCheck.Random
newTheGen :: IO TFGen
bits :: Integral a => a
mask :: Integral a => a
doneBit :: Integral a => a
chip :: Bool -> Word32 -> TFGen -> TFGen
chop :: Integer -> Integer
stop :: Integral a => a -> Bool
mkTheGen :: Int -> TFGen

-- | The "standard" QuickCheck random number generator. A wrapper around
--   either <a>TFGen</a> on GHC, or <a>StdGen</a> on other Haskell systems.
newtype QCGen
QCGen :: TFGen -> QCGen
newQCGen :: IO QCGen
mkQCGen :: Int -> QCGen
bigNatVariant :: Integer -> TFGen -> TFGen
natVariant :: Integral a => a -> TFGen -> TFGen
variantTheGen :: Integral a => a -> TFGen -> TFGen
boolVariant :: Bool -> TFGen -> TFGen
variantQCGen :: Integral a => a -> QCGen -> QCGen
instance GHC.Show.Show Test.QuickCheck.Random.QCGen
instance GHC.Read.Read Test.QuickCheck.Random.QCGen
instance System.Random.RandomGen Test.QuickCheck.Random.QCGen


-- | Test case generation.
module Test.QuickCheck.Gen

-- | A generator for values of type <tt>a</tt>.
--   
--   The third-party package <a>QuickCheck-GenT</a> provides a monad
--   transformer version of <tt>GenT</tt>.
newtype Gen a
MkGen :: (QCGen -> Int -> a) -> Gen a

-- | Run the generator on a particular seed. If you just want to get a
--   random value out, consider using <a>generate</a>.
[unGen] :: Gen a -> QCGen -> Int -> a

-- | Modifies a generator using an integer seed.
variant :: Integral n => n -> Gen a -> Gen a

-- | Used to construct generators that depend on the size parameter.
--   
--   For example, <a>listOf</a>, which uses the size parameter as an upper
--   bound on length of lists it generates, can be defined like this:
--   
--   <pre>
--   listOf :: Gen a -&gt; Gen [a]
--   listOf gen = sized $ \n -&gt;
--     do k &lt;- choose (0,n)
--        vectorOf k gen
--   </pre>
--   
--   You can also do this using <a>getSize</a>.
sized :: (Int -> Gen a) -> Gen a

-- | Generates the size parameter. Used to construct generators that depend
--   on the size parameter.
--   
--   For example, <a>listOf</a>, which uses the size parameter as an upper
--   bound on length of lists it generates, can be defined like this:
--   
--   <pre>
--   listOf :: Gen a -&gt; Gen [a]
--   listOf gen = do
--     n &lt;- getSize
--     k &lt;- choose (0,n)
--     vectorOf k gen
--   </pre>
--   
--   You can also do this using <a>sized</a>.
getSize :: Gen Int

-- | Overrides the size parameter. Returns a generator which uses the given
--   size instead of the runtime-size parameter.
resize :: Int -> Gen a -> Gen a

-- | Adjust the size parameter, by transforming it with the given function.
scale :: (Int -> Int) -> Gen a -> Gen a

-- | Generates a random element in the given inclusive range.
choose :: Random a => (a, a) -> Gen a

-- | Generates a random element over the natural range of <tt>a</tt>.
chooseAny :: Random a => Gen a

-- | Run a generator. The size passed to the generator is always 30; if you
--   want another size then you should explicitly use <a>resize</a>.
generate :: Gen a -> IO a

-- | Generates some example values.
sample' :: Gen a -> IO [a]

-- | Generates some example values and prints them to <tt>stdout</tt>.
sample :: Show a => Gen a -> IO ()

-- | Generates a value that satisfies a predicate.
suchThat :: Gen a -> (a -> Bool) -> Gen a

-- | Generates a value for which the given function returns a <a>Just</a>,
--   and then applies the function.
suchThatMap :: Gen a -> (a -> Maybe b) -> Gen b

-- | Tries to generate a value that satisfies a predicate. If it fails to
--   do so after enough attempts, returns <tt>Nothing</tt>.
suchThatMaybe :: Gen a -> (a -> Bool) -> Gen (Maybe a)

-- | Randomly uses one of the given generators. The input list must be
--   non-empty.
oneof :: [Gen a] -> Gen a

-- | Chooses one of the given generators, with a weighted random
--   distribution. The input list must be non-empty.
frequency :: [(Int, Gen a)] -> Gen a

-- | Generates one of the given values. The input list must be non-empty.
elements :: [a] -> Gen a

-- | Generates a random subsequence of the given list.
sublistOf :: [a] -> Gen [a]

-- | Generates a random permutation of the given list.
shuffle :: [a] -> Gen [a]

-- | Takes a list of elements of increasing size, and chooses among an
--   initial segment of the list. The size of this initial segment
--   increases with the size parameter. The input list must be non-empty.
growingElements :: [a] -> Gen a

-- | Generates a list of random length. The maximum length depends on the
--   size parameter.
listOf :: Gen a -> Gen [a]

-- | Generates a non-empty list of random length. The maximum length
--   depends on the size parameter.
listOf1 :: Gen a -> Gen [a]

-- | Generates a list of the given length.
vectorOf :: Int -> Gen a -> Gen [a]

-- | Generates an infinite list.
infiniteListOf :: Gen a -> Gen [a]
instance GHC.Base.Functor Test.QuickCheck.Gen.Gen
instance GHC.Base.Applicative Test.QuickCheck.Gen.Gen
instance GHC.Base.Monad Test.QuickCheck.Gen.Gen


-- | Unsafe combinators for the <a>Gen</a> monad.
--   
--   <a>Gen</a> is only morally a monad: two generators that are supposed
--   to be equal will give the same probability distribution, but they
--   might be different as functions from random number seeds to values.
--   QuickCheck maintains the illusion that a <a>Gen</a> is a probability
--   distribution and does not allow you to distinguish two generators that
--   have the same distribution.
--   
--   The functions in this module allow you to break this illusion by
--   reusing the same random number seed twice. This is unsafe because by
--   applying the same seed to two morally equal generators, you can see
--   whether they are really equal or not.
module Test.QuickCheck.Gen.Unsafe

-- | Promotes a monadic generator to a generator of monadic values.
promote :: Monad m => m (Gen a) -> Gen (m a)

-- | Randomly generates a function of type <tt><a>Gen</a> a -&gt; a</tt>,
--   which you can then use to evaluate generators. Mostly useful in
--   implementing <a>promote</a>.
delay :: Gen (Gen a -> a)

-- | A variant of <a>delay</a> that returns a polymorphic evaluation
--   function. Can be used in a pinch to generate polymorphic (rank-2)
--   values:
--   
--   <pre>
--   genSelector :: Gen (a -&gt; a -&gt; a)
--   genSelector = elements [\x y -&gt; x, \x y -&gt; y]
--   
--   data Selector = Selector (forall a. a -&gt; a -&gt; a)
--   genPolySelector :: Gen Selector
--   genPolySelector = do
--     Capture eval &lt;- capture
--     return (Selector (eval genSelector))
--   </pre>
capture :: Gen Capture
newtype Capture
Capture :: (forall a. Gen a -> a) -> Capture


-- | Type classes for random generation of values.
module Test.QuickCheck.Arbitrary

-- | Random generation and shrinking of values.
--   
--   QuickCheck provides <tt>Arbitrary</tt> instances for most types in
--   <tt>base</tt>, except those which incur extra dependencies. For a
--   wider range of <tt>Arbitrary</tt> instances see the
--   <a>quickcheck-instances</a> package.
class Arbitrary a

-- | A generator for values of the given type.
--   
--   It is worth spending time thinking about what sort of test data you
--   want - good generators are often the difference between finding bugs
--   and not finding them. You can use <a>sample</a>, <tt>label</tt> and
--   <tt>classify</tt> to check the quality of your test data.
--   
--   There is no generic <tt>arbitrary</tt> implementation included because
--   we don't know how to make a high-quality one. If you want one,
--   consider using the <a>testing-feat</a> package.
--   
--   The <a>QuickCheck manual</a> goes into detail on how to write good
--   generators. Make sure to look at it, especially if your type is
--   recursive!
arbitrary :: Arbitrary a => Gen a

-- | Produces a (possibly) empty list of all the possible immediate shrinks
--   of the given value.
--   
--   The default implementation returns the empty list, so will not try to
--   shrink the value. If your data type has no special invariants, you can
--   enable shrinking by defining <tt>shrink = <a>genericShrink</a></tt>,
--   but by customising the behaviour of <tt>shrink</tt> you can often get
--   simpler counterexamples.
--   
--   Most implementations of <a>shrink</a> should try at least three
--   things:
--   
--   <ol>
--   <li>Shrink a term to any of its immediate subterms. You can use
--   <a>subterms</a> to do this.</li>
--   <li>Recursively apply <a>shrink</a> to all immediate subterms. You can
--   use <a>recursivelyShrink</a> to do this.</li>
--   <li>Type-specific shrinkings such as replacing a constructor by a
--   simpler constructor.</li>
--   </ol>
--   
--   For example, suppose we have the following implementation of binary
--   trees:
--   
--   <pre>
--   data Tree a = Nil | Branch a (Tree a) (Tree a)
--   </pre>
--   
--   We can then define <a>shrink</a> as follows:
--   
--   <pre>
--   shrink Nil = []
--   shrink (Branch x l r) =
--     -- shrink Branch to Nil
--     [Nil] ++
--     -- shrink to subterms
--     [l, r] ++
--     -- recursively shrink subterms
--     [Branch x' l' r' | (x', l', r') &lt;- shrink (x, l, r)]
--   </pre>
--   
--   There are a couple of subtleties here:
--   
--   <ul>
--   <li>QuickCheck tries the shrinking candidates in the order they appear
--   in the list, so we put more aggressive shrinking steps (such as
--   replacing the whole tree by <tt>Nil</tt>) before smaller ones (such as
--   recursively shrinking the subtrees).</li>
--   <li>It is tempting to write the last line as <tt>[Branch x' l' r' | x'
--   &lt;- shrink x, l' &lt;- shrink l, r' &lt;- shrink r]</tt> but this is
--   the <i>wrong thing</i>! It will force QuickCheck to shrink <tt>x</tt>,
--   <tt>l</tt> and <tt>r</tt> in tandem, and shrinking will stop once
--   <i>one</i> of the three is fully shrunk.</li>
--   </ul>
--   
--   There is a fair bit of boilerplate in the code above. We can avoid it
--   with the help of some generic functions. The function
--   <a>genericShrink</a> tries shrinking a term to all of its subterms
--   and, failing that, recursively shrinks the subterms. Using it, we can
--   define <a>shrink</a> as:
--   
--   <pre>
--   shrink x = shrinkToNil x ++ genericShrink x
--     where
--       shrinkToNil Nil = []
--       shrinkToNil (Branch _ l r) = [Nil]
--   </pre>
--   
--   <a>genericShrink</a> is a combination of <a>subterms</a>, which
--   shrinks a term to any of its subterms, and <a>recursivelyShrink</a>,
--   which shrinks all subterms of a term. These may be useful if you need
--   a bit more control over shrinking than <a>genericShrink</a> gives you.
--   
--   A final gotcha: we cannot define <a>shrink</a> as simply
--   <tt><a>shrink</a> x = Nil:<a>genericShrink</a> x</tt> as this shrinks
--   <tt>Nil</tt> to <tt>Nil</tt>, and shrinking will go into an infinite
--   loop.
--   
--   If all this leaves you bewildered, you might try <tt><a>shrink</a> =
--   <a>genericShrink</a></tt> to begin with, after deriving
--   <tt>Generic</tt> for your type. However, if your data type has any
--   special invariants, you will need to check that <a>genericShrink</a>
--   can't break those invariants.
shrink :: Arbitrary a => a -> [a]

-- | Used for random generation of functions.
--   
--   If you are using a recent GHC, there is a default definition of
--   <a>coarbitrary</a> using <a>genericCoarbitrary</a>, so if your type
--   has a <a>Generic</a> instance it's enough to say
--   
--   <pre>
--   instance CoArbitrary MyType
--   </pre>
--   
--   You should only use <a>genericCoarbitrary</a> for data types where
--   equality is structural, i.e. if you can't have two different
--   representations of the same value. An example where it's not safe is
--   sets implemented using binary search trees: the same set can be
--   represented as several different trees. Here you would have to
--   explicitly define <tt>coarbitrary s = coarbitrary (toList s)</tt>.
class CoArbitrary a

-- | Used to generate a function of type <tt>a -&gt; b</tt>. The first
--   argument is a value, the second a generator. You should use
--   <a>variant</a> to perturb the random generator; the goal is that
--   different values for the first argument will lead to different calls
--   to <a>variant</a>. An example will help:
--   
--   <pre>
--   instance CoArbitrary a =&gt; CoArbitrary [a] where
--     coarbitrary []     = <a>variant</a> 0
--     coarbitrary (x:xs) = <a>variant</a> 1 . coarbitrary (x,xs)
--   </pre>
coarbitrary :: CoArbitrary a => a -> Gen b -> Gen b

-- | Used to generate a function of type <tt>a -&gt; b</tt>. The first
--   argument is a value, the second a generator. You should use
--   <a>variant</a> to perturb the random generator; the goal is that
--   different values for the first argument will lead to different calls
--   to <a>variant</a>. An example will help:
--   
--   <pre>
--   instance CoArbitrary a =&gt; CoArbitrary [a] where
--     coarbitrary []     = <a>variant</a> 0
--     coarbitrary (x:xs) = <a>variant</a> 1 . coarbitrary (x,xs)
--   </pre>
coarbitrary :: (CoArbitrary a, Generic a, GCoArbitrary (Rep a)) => a -> Gen b -> Gen b

-- | Lifting of the <a>Arbitrary</a> class to unary type constructors.
class Arbitrary1 f
liftArbitrary :: Arbitrary1 f => Gen a -> Gen (f a)
liftShrink :: Arbitrary1 f => (a -> [a]) -> f a -> [f a]
arbitrary1 :: (Arbitrary1 f, Arbitrary a) => Gen (f a)
shrink1 :: (Arbitrary1 f, Arbitrary a) => f a -> [f a]

-- | Lifting of the <a>Arbitrary</a> class to binary type constructors.
class Arbitrary2 f
liftArbitrary2 :: Arbitrary2 f => Gen a -> Gen b -> Gen (f a b)
liftShrink2 :: Arbitrary2 f => (a -> [a]) -> (b -> [b]) -> f a b -> [f a b]
arbitrary2 :: (Arbitrary2 f, Arbitrary a, Arbitrary b) => Gen (f a b)
shrink2 :: (Arbitrary2 f, Arbitrary a, Arbitrary b) => f a b -> [f a b]

-- | Generates an integral number. The number can be positive or negative
--   and its maximum absolute value depends on the size parameter.
arbitrarySizedIntegral :: Integral a => Gen a

-- | Generates a natural number. The number's maximum value depends on the
--   size parameter.
arbitrarySizedNatural :: Integral a => Gen a

-- | Generates an integral number. The number is chosen uniformly from the
--   entire range of the type. You may want to use
--   <a>arbitrarySizedBoundedIntegral</a> instead.
arbitraryBoundedIntegral :: (Bounded a, Integral a) => Gen a

-- | Generates an integral number from a bounded domain. The number is
--   chosen from the entire range of the type, but small numbers are
--   generated more often than big numbers. Inspired by demands from Phil
--   Wadler.
arbitrarySizedBoundedIntegral :: (Bounded a, Integral a) => Gen a

-- | Generates a fractional number. The number can be positive or negative
--   and its maximum absolute value depends on the size parameter.
arbitrarySizedFractional :: Fractional a => Gen a

-- | Generates an element of a bounded type. The element is chosen from the
--   entire range of the type.
arbitraryBoundedRandom :: (Bounded a, Random a) => Gen a

-- | Generates an element of a bounded enumeration.
arbitraryBoundedEnum :: (Bounded a, Enum a) => Gen a

-- | Generates any Unicode character (but not a surrogate)
arbitraryUnicodeChar :: Gen Char

-- | Generates a random ASCII character (0-127).
arbitraryASCIIChar :: Gen Char

-- | Generates a printable Unicode character.
arbitraryPrintableChar :: Gen Char

-- | Shrink a term to any of its immediate subterms, and also recursively
--   shrink all subterms.
genericShrink :: (Generic a, RecursivelyShrink (Rep a), GSubterms (Rep a) a) => a -> [a]

-- | All immediate subterms of a term.
subterms :: (Generic a, GSubterms (Rep a) a) => a -> [a]

-- | Recursively shrink all immediate subterms.
recursivelyShrink :: (Generic a, RecursivelyShrink (Rep a)) => a -> [a]

-- | Generic CoArbitrary implementation.
genericCoarbitrary :: (Generic a, GCoArbitrary (Rep a)) => a -> Gen b -> Gen b

-- | Returns no shrinking alternatives.
shrinkNothing :: a -> [a]

-- | Shrink a list of values given a shrinking function for individual
--   values.
shrinkList :: (a -> [a]) -> [a] -> [[a]]

-- | Map a shrink function to another domain. This is handy if your data
--   type has special invariants, but is <i>almost</i> isomorphic to some
--   other type.
--   
--   <pre>
--   shrinkOrderedList :: (Ord a, Arbitrary a) =&gt; [a] -&gt; [[a]]
--   shrinkOrderedList = shrinkMap sort id
--   
--   shrinkSet :: (Ord a, Arbitrary a) =&gt; Set a -&gt; Set [a]
--   shrinkSet = shrinkMap fromList toList
--   </pre>
shrinkMap :: Arbitrary a => (a -> b) -> (b -> a) -> b -> [b]

-- | Non-overloaded version of <a>shrinkMap</a>.
shrinkMapBy :: (a -> b) -> (b -> a) -> (a -> [a]) -> b -> [b]

-- | Shrink an integral number.
shrinkIntegral :: Integral a => a -> [a]

-- | Shrink a fraction.
shrinkRealFrac :: RealFrac a => a -> [a]

-- | A <a>coarbitrary</a> implementation for integral numbers.
coarbitraryIntegral :: Integral a => a -> Gen b -> Gen b

-- | A <a>coarbitrary</a> implementation for real numbers.
coarbitraryReal :: Real a => a -> Gen b -> Gen b

-- | <a>coarbitrary</a> helper for lazy people :-).
coarbitraryShow :: Show a => a -> Gen b -> Gen b

-- | A <a>coarbitrary</a> implementation for enums.
coarbitraryEnum :: Enum a => a -> Gen b -> Gen b

-- | Combine two generator perturbing functions, for example the results of
--   calls to <a>variant</a> or <a>coarbitrary</a>.

-- | <i>Deprecated: Use ordinary function composition instead</i>
(><) :: (Gen a -> Gen a) -> (Gen a -> Gen a) -> (Gen a -> Gen a)

-- | Generates a list of a given length.
vector :: Arbitrary a => Int -> Gen [a]

-- | Generates an ordered list.
orderedList :: (Ord a, Arbitrary a) => Gen [a]

-- | Generates an infinite list.
infiniteList :: Arbitrary a => Gen [a]
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Arbitrary.Bounds a)
instance GHC.Real.Real a => GHC.Real.Real (Test.QuickCheck.Arbitrary.Bounds a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Arbitrary.Bounds a)
instance GHC.Num.Num a => GHC.Num.Num (Test.QuickCheck.Arbitrary.Bounds a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Arbitrary.Bounds a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Arbitrary.Bounds a)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.Arbitrary1 ((->) a)
instance (Test.QuickCheck.Arbitrary.CoArbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b) => Test.QuickCheck.Arbitrary.Arbitrary (a -> b)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.CoArbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Monoid.Endo a)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.GCoArbitrary (GHC.Generics.K1 i a)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.CoArbitrary b) => Test.QuickCheck.Arbitrary.CoArbitrary (a -> b)
instance Test.QuickCheck.Arbitrary.CoArbitrary ()
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Types.Bool
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Types.Ordering
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (GHC.Base.Maybe a)
instance (Test.QuickCheck.Arbitrary.CoArbitrary a, Test.QuickCheck.Arbitrary.CoArbitrary b) => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Either.Either a b)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary [a]
instance (GHC.Real.Integral a, Test.QuickCheck.Arbitrary.CoArbitrary a) => Test.QuickCheck.Arbitrary.CoArbitrary (GHC.Real.Ratio a)
instance Data.Fixed.HasResolution a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Fixed.Fixed a)
instance (GHC.Float.RealFloat a, Test.QuickCheck.Arbitrary.CoArbitrary a) => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Complex.Complex a)
instance (Test.QuickCheck.Arbitrary.CoArbitrary a, Test.QuickCheck.Arbitrary.CoArbitrary b) => Test.QuickCheck.Arbitrary.CoArbitrary (a, b)
instance (Test.QuickCheck.Arbitrary.CoArbitrary a, Test.QuickCheck.Arbitrary.CoArbitrary b, Test.QuickCheck.Arbitrary.CoArbitrary c) => Test.QuickCheck.Arbitrary.CoArbitrary (a, b, c)
instance (Test.QuickCheck.Arbitrary.CoArbitrary a, Test.QuickCheck.Arbitrary.CoArbitrary b, Test.QuickCheck.Arbitrary.CoArbitrary c, Test.QuickCheck.Arbitrary.CoArbitrary d) => Test.QuickCheck.Arbitrary.CoArbitrary (a, b, c, d)
instance (Test.QuickCheck.Arbitrary.CoArbitrary a, Test.QuickCheck.Arbitrary.CoArbitrary b, Test.QuickCheck.Arbitrary.CoArbitrary c, Test.QuickCheck.Arbitrary.CoArbitrary d, Test.QuickCheck.Arbitrary.CoArbitrary e) => Test.QuickCheck.Arbitrary.CoArbitrary (a, b, c, d, e)
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Integer.Type.Integer
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Types.Int
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Int.Int8
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Int.Int16
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Int.Int32
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Int.Int64
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Types.Word
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Word.Word8
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Word.Word16
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Word.Word32
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Word.Word64
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Types.Char
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Types.Float
instance Test.QuickCheck.Arbitrary.CoArbitrary GHC.Types.Double
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Set.Internal.Set a)
instance (Test.QuickCheck.Arbitrary.CoArbitrary k, Test.QuickCheck.Arbitrary.CoArbitrary v) => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Map.Internal.Map k v)
instance Test.QuickCheck.Arbitrary.CoArbitrary Data.IntSet.Internal.IntSet
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.IntMap.Internal.IntMap a)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Sequence.Internal.Seq a)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Control.Applicative.ZipList a)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Functor.Identity.Identity a)
instance forall k a (b :: k). Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Functor.Constant.Constant a b)
instance forall k a (b :: k). Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Functor.Const.Const a b)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Monoid.Dual a)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.CoArbitrary a) => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Monoid.Endo a)
instance Test.QuickCheck.Arbitrary.CoArbitrary Data.Monoid.All
instance Test.QuickCheck.Arbitrary.CoArbitrary Data.Monoid.Any
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Monoid.Sum a)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Monoid.Product a)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Monoid.First a)
instance Test.QuickCheck.Arbitrary.CoArbitrary a => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Monoid.Last a)
instance forall k (f :: k -> *) (a :: k). Test.QuickCheck.Arbitrary.CoArbitrary (f a) => Test.QuickCheck.Arbitrary.CoArbitrary (Data.Monoid.Alt f a)
instance Test.QuickCheck.Arbitrary.CoArbitrary Data.Version.Version
instance Test.QuickCheck.Arbitrary.GCoArbitrary GHC.Generics.U1
instance forall k (f :: k -> *) (g :: k -> *). (Test.QuickCheck.Arbitrary.GCoArbitrary f, Test.QuickCheck.Arbitrary.GCoArbitrary g) => Test.QuickCheck.Arbitrary.GCoArbitrary (f GHC.Generics.:*: g)
instance forall k (f :: k -> *) (g :: k -> *). (Test.QuickCheck.Arbitrary.GCoArbitrary f, Test.QuickCheck.Arbitrary.GCoArbitrary g) => Test.QuickCheck.Arbitrary.GCoArbitrary (f GHC.Generics.:+: g)
instance forall k (f :: k -> *) i (c :: GHC.Generics.Meta). Test.QuickCheck.Arbitrary.GCoArbitrary f => Test.QuickCheck.Arbitrary.GCoArbitrary (GHC.Generics.M1 i c f)
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CClock
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CTime
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CUSeconds
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CSUSeconds
instance (GHC.Classes.Ord a, GHC.Num.Num a) => GHC.Enum.Bounded (Test.QuickCheck.Arbitrary.Bounds a)
instance (GHC.Num.Num a, GHC.Real.Real a, GHC.Enum.Enum a) => GHC.Real.Integral (Test.QuickCheck.Arbitrary.Bounds a)
instance (GHC.Classes.Ord a, GHC.Num.Num a, GHC.Real.Real a, GHC.Enum.Enum a) => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Arbitrary.Bounds a)
instance (Test.QuickCheck.Arbitrary.GSubtermsIncl f a, Test.QuickCheck.Arbitrary.GSubtermsIncl g a) => Test.QuickCheck.Arbitrary.GSubterms (f GHC.Generics.:*: g) a
instance (Test.QuickCheck.Arbitrary.GSubtermsIncl f a, Test.QuickCheck.Arbitrary.GSubtermsIncl g a) => Test.QuickCheck.Arbitrary.GSubterms (f GHC.Generics.:+: g) a
instance Test.QuickCheck.Arbitrary.GSubtermsIncl GHC.Generics.V1 a
instance Test.QuickCheck.Arbitrary.GSubtermsIncl GHC.Generics.U1 a
instance (Test.QuickCheck.Arbitrary.GSubtermsIncl f a, Test.QuickCheck.Arbitrary.GSubtermsIncl g a) => Test.QuickCheck.Arbitrary.GSubtermsIncl (f GHC.Generics.:*: g) a
instance (Test.QuickCheck.Arbitrary.GSubtermsIncl f a, Test.QuickCheck.Arbitrary.GSubtermsIncl g a) => Test.QuickCheck.Arbitrary.GSubtermsIncl (f GHC.Generics.:+: g) a
instance Test.QuickCheck.Arbitrary.GSubtermsIncl f a => Test.QuickCheck.Arbitrary.GSubtermsIncl (GHC.Generics.M1 i c f) a
instance Test.QuickCheck.Arbitrary.GSubtermsIncl (GHC.Generics.K1 i a) a
instance Test.QuickCheck.Arbitrary.GSubtermsIncl (GHC.Generics.K1 i a) b
instance Test.QuickCheck.Arbitrary.GSubterms GHC.Generics.V1 a
instance Test.QuickCheck.Arbitrary.GSubterms GHC.Generics.U1 a
instance Test.QuickCheck.Arbitrary.GSubterms f a => Test.QuickCheck.Arbitrary.GSubterms (GHC.Generics.M1 i c f) a
instance Test.QuickCheck.Arbitrary.GSubterms (GHC.Generics.K1 i a) b
instance forall k (f :: k -> *) (g :: k -> *). (Test.QuickCheck.Arbitrary.RecursivelyShrink f, Test.QuickCheck.Arbitrary.RecursivelyShrink g) => Test.QuickCheck.Arbitrary.RecursivelyShrink (f GHC.Generics.:*: g)
instance forall k (f :: k -> *) (g :: k -> *). (Test.QuickCheck.Arbitrary.RecursivelyShrink f, Test.QuickCheck.Arbitrary.RecursivelyShrink g) => Test.QuickCheck.Arbitrary.RecursivelyShrink (f GHC.Generics.:+: g)
instance forall k (f :: k -> *) i (c :: GHC.Generics.Meta). Test.QuickCheck.Arbitrary.RecursivelyShrink f => Test.QuickCheck.Arbitrary.RecursivelyShrink (GHC.Generics.M1 i c f)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.RecursivelyShrink (GHC.Generics.K1 i a)
instance Test.QuickCheck.Arbitrary.RecursivelyShrink GHC.Generics.U1
instance Test.QuickCheck.Arbitrary.RecursivelyShrink GHC.Generics.V1
instance Test.QuickCheck.Arbitrary.Arbitrary2 Data.Either.Either
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary1 (Data.Either.Either a)
instance Test.QuickCheck.Arbitrary.Arbitrary2 (,)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary1 ((,) a)
instance Test.QuickCheck.Arbitrary.Arbitrary2 Data.Functor.Constant.Constant
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary1 (Data.Functor.Constant.Constant a)
instance Test.QuickCheck.Arbitrary.Arbitrary2 Data.Functor.Const.Const
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary1 (Data.Functor.Const.Const a)
instance Test.QuickCheck.Arbitrary.Arbitrary1 GHC.Base.Maybe
instance Test.QuickCheck.Arbitrary.Arbitrary1 []
instance (GHC.Classes.Ord k, Test.QuickCheck.Arbitrary.Arbitrary k) => Test.QuickCheck.Arbitrary.Arbitrary1 (Data.Map.Internal.Map k)
instance Test.QuickCheck.Arbitrary.Arbitrary1 Data.IntMap.Internal.IntMap
instance Test.QuickCheck.Arbitrary.Arbitrary1 Data.Sequence.Internal.Seq
instance Test.QuickCheck.Arbitrary.Arbitrary1 Control.Applicative.ZipList
instance Test.QuickCheck.Arbitrary.Arbitrary1 Data.Functor.Identity.Identity
instance (Test.QuickCheck.Arbitrary.Arbitrary1 f, Test.QuickCheck.Arbitrary.Arbitrary1 g) => Test.QuickCheck.Arbitrary.Arbitrary1 (Data.Functor.Product.Product f g)
instance (Test.QuickCheck.Arbitrary.Arbitrary1 f, Test.QuickCheck.Arbitrary.Arbitrary1 g, Test.QuickCheck.Arbitrary.Arbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Functor.Product.Product f g a)
instance (Test.QuickCheck.Arbitrary.Arbitrary1 f, Test.QuickCheck.Arbitrary.Arbitrary1 g) => Test.QuickCheck.Arbitrary.Arbitrary1 (Data.Functor.Compose.Compose f g)
instance (Test.QuickCheck.Arbitrary.Arbitrary1 f, Test.QuickCheck.Arbitrary.Arbitrary1 g, Test.QuickCheck.Arbitrary.Arbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Functor.Compose.Compose f g a)
instance Test.QuickCheck.Arbitrary.Arbitrary ()
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Bool
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Ordering
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (GHC.Base.Maybe a)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Either.Either a b)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary [a]
instance GHC.Real.Integral a => Test.QuickCheck.Arbitrary.Arbitrary (GHC.Real.Ratio a)
instance (GHC.Float.RealFloat a, Test.QuickCheck.Arbitrary.Arbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Complex.Complex a)
instance Data.Fixed.HasResolution a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Fixed.Fixed a)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b) => Test.QuickCheck.Arbitrary.Arbitrary (a, b)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b, Test.QuickCheck.Arbitrary.Arbitrary c) => Test.QuickCheck.Arbitrary.Arbitrary (a, b, c)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b, Test.QuickCheck.Arbitrary.Arbitrary c, Test.QuickCheck.Arbitrary.Arbitrary d) => Test.QuickCheck.Arbitrary.Arbitrary (a, b, c, d)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b, Test.QuickCheck.Arbitrary.Arbitrary c, Test.QuickCheck.Arbitrary.Arbitrary d, Test.QuickCheck.Arbitrary.Arbitrary e) => Test.QuickCheck.Arbitrary.Arbitrary (a, b, c, d, e)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b, Test.QuickCheck.Arbitrary.Arbitrary c, Test.QuickCheck.Arbitrary.Arbitrary d, Test.QuickCheck.Arbitrary.Arbitrary e, Test.QuickCheck.Arbitrary.Arbitrary f) => Test.QuickCheck.Arbitrary.Arbitrary (a, b, c, d, e, f)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b, Test.QuickCheck.Arbitrary.Arbitrary c, Test.QuickCheck.Arbitrary.Arbitrary d, Test.QuickCheck.Arbitrary.Arbitrary e, Test.QuickCheck.Arbitrary.Arbitrary f, Test.QuickCheck.Arbitrary.Arbitrary g) => Test.QuickCheck.Arbitrary.Arbitrary (a, b, c, d, e, f, g)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b, Test.QuickCheck.Arbitrary.Arbitrary c, Test.QuickCheck.Arbitrary.Arbitrary d, Test.QuickCheck.Arbitrary.Arbitrary e, Test.QuickCheck.Arbitrary.Arbitrary f, Test.QuickCheck.Arbitrary.Arbitrary g, Test.QuickCheck.Arbitrary.Arbitrary h) => Test.QuickCheck.Arbitrary.Arbitrary (a, b, c, d, e, f, g, h)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b, Test.QuickCheck.Arbitrary.Arbitrary c, Test.QuickCheck.Arbitrary.Arbitrary d, Test.QuickCheck.Arbitrary.Arbitrary e, Test.QuickCheck.Arbitrary.Arbitrary f, Test.QuickCheck.Arbitrary.Arbitrary g, Test.QuickCheck.Arbitrary.Arbitrary h, Test.QuickCheck.Arbitrary.Arbitrary i) => Test.QuickCheck.Arbitrary.Arbitrary (a, b, c, d, e, f, g, h, i)
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b, Test.QuickCheck.Arbitrary.Arbitrary c, Test.QuickCheck.Arbitrary.Arbitrary d, Test.QuickCheck.Arbitrary.Arbitrary e, Test.QuickCheck.Arbitrary.Arbitrary f, Test.QuickCheck.Arbitrary.Arbitrary g, Test.QuickCheck.Arbitrary.Arbitrary h, Test.QuickCheck.Arbitrary.Arbitrary i, Test.QuickCheck.Arbitrary.Arbitrary j) => Test.QuickCheck.Arbitrary.Arbitrary (a, b, c, d, e, f, g, h, i, j)
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Integer.Type.Integer
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Int
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Int.Int8
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Int.Int16
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Int.Int32
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Int.Int64
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Word
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Word.Word8
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Word.Word16
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Word.Word32
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Word.Word64
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Char
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Double
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CChar
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CSChar
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CUChar
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CShort
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CUShort
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CInt
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CUInt
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CLong
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CULong
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CPtrdiff
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CSize
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CWchar
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CSigAtomic
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CLLong
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CULLong
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CIntPtr
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CUIntPtr
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CIntMax
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CUIntMax
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CFloat
instance Test.QuickCheck.Arbitrary.Arbitrary Foreign.C.Types.CDouble
instance (GHC.Classes.Ord a, Test.QuickCheck.Arbitrary.Arbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Set.Internal.Set a)
instance (GHC.Classes.Ord k, Test.QuickCheck.Arbitrary.Arbitrary k, Test.QuickCheck.Arbitrary.Arbitrary v) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Map.Internal.Map k v)
instance Test.QuickCheck.Arbitrary.Arbitrary Data.IntSet.Internal.IntSet
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.IntMap.Internal.IntMap a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Sequence.Internal.Seq a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Control.Applicative.ZipList a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Functor.Identity.Identity a)
instance forall k a (b :: k). Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Functor.Constant.Constant a b)
instance forall k a (b :: k). Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Functor.Const.Const a b)
instance Test.QuickCheck.Arbitrary.Arbitrary (m a) => Test.QuickCheck.Arbitrary.Arbitrary (Control.Applicative.WrappedMonad m a)
instance Test.QuickCheck.Arbitrary.Arbitrary (a b c) => Test.QuickCheck.Arbitrary.Arbitrary (Control.Applicative.WrappedArrow a b c)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Monoid.Dual a)
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Monoid.All
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Monoid.Any
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Monoid.Sum a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Monoid.Product a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Monoid.First a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Data.Monoid.Last a)
instance forall k (f :: k -> *) (a :: k). Test.QuickCheck.Arbitrary.Arbitrary (f a) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Monoid.Alt f a)
instance Test.QuickCheck.Arbitrary.Arbitrary Data.Version.Version
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Random.QCGen
instance Test.QuickCheck.Arbitrary.Arbitrary GHC.IO.Exception.ExitCode


-- | Types to help with testing polymorphic properties.
--   
--   Types <a>A</a>, <a>B</a> and <a>C</a> are <tt>newtype</tt> wrappers
--   around <a>Integer</a> that implement <a>Eq</a>, <a>Show</a>,
--   <a>Arbitrary</a> and <a>CoArbitrary</a>. Types <a>OrdA</a>,
--   <a>OrdB</a> and <a>OrdC</a> also implement <a>Ord</a> and <a>Num</a>.
--   
--   See also <a>Test.QuickCheck.All</a> for an automatic way of testing
--   polymorphic properties.
module Test.QuickCheck.Poly
newtype A
A :: Integer -> A
[unA] :: A -> Integer
newtype B
B :: Integer -> B
[unB] :: B -> Integer
newtype C
C :: Integer -> C
[unC] :: C -> Integer
newtype OrdA
OrdA :: Integer -> OrdA
[unOrdA] :: OrdA -> Integer
newtype OrdB
OrdB :: Integer -> OrdB
[unOrdB] :: OrdB -> Integer
newtype OrdC
OrdC :: Integer -> OrdC
[unOrdC] :: OrdC -> Integer
instance GHC.Classes.Ord Test.QuickCheck.Poly.OrdC
instance GHC.Classes.Eq Test.QuickCheck.Poly.OrdC
instance GHC.Classes.Ord Test.QuickCheck.Poly.OrdB
instance GHC.Classes.Eq Test.QuickCheck.Poly.OrdB
instance GHC.Classes.Ord Test.QuickCheck.Poly.OrdA
instance GHC.Classes.Eq Test.QuickCheck.Poly.OrdA
instance GHC.Classes.Eq Test.QuickCheck.Poly.C
instance GHC.Classes.Eq Test.QuickCheck.Poly.B
instance GHC.Classes.Eq Test.QuickCheck.Poly.A
instance GHC.Num.Num Test.QuickCheck.Poly.OrdC
instance GHC.Show.Show Test.QuickCheck.Poly.OrdC
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Poly.OrdC
instance Test.QuickCheck.Arbitrary.CoArbitrary Test.QuickCheck.Poly.OrdC
instance GHC.Num.Num Test.QuickCheck.Poly.OrdB
instance GHC.Show.Show Test.QuickCheck.Poly.OrdB
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Poly.OrdB
instance Test.QuickCheck.Arbitrary.CoArbitrary Test.QuickCheck.Poly.OrdB
instance GHC.Num.Num Test.QuickCheck.Poly.OrdA
instance GHC.Show.Show Test.QuickCheck.Poly.OrdA
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Poly.OrdA
instance Test.QuickCheck.Arbitrary.CoArbitrary Test.QuickCheck.Poly.OrdA
instance GHC.Show.Show Test.QuickCheck.Poly.C
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Poly.C
instance Test.QuickCheck.Arbitrary.CoArbitrary Test.QuickCheck.Poly.C
instance GHC.Show.Show Test.QuickCheck.Poly.B
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Poly.B
instance Test.QuickCheck.Arbitrary.CoArbitrary Test.QuickCheck.Poly.B
instance GHC.Show.Show Test.QuickCheck.Poly.A
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Poly.A
instance Test.QuickCheck.Arbitrary.CoArbitrary Test.QuickCheck.Poly.A


-- | Modifiers for test data.
--   
--   These types do things such as restricting the kind of test data that
--   can be generated. They can be pattern-matched on in properties as a
--   stylistic alternative to using explicit quantification.
--   
--   Examples:
--   
--   <pre>
--   -- Functions cannot be shown (but see <a>Test.QuickCheck.Function</a>)
--   prop_TakeDropWhile (<a>Blind</a> p) (xs :: [<tt>A</tt>]) =
--     takeWhile p xs ++ dropWhile p xs == xs
--   </pre>
--   
--   <pre>
--   prop_TakeDrop (<a>NonNegative</a> n) (xs :: [<tt>A</tt>]) =
--     take n xs ++ drop n xs == xs
--   </pre>
--   
--   <pre>
--   -- cycle does not work for empty lists
--   prop_Cycle (<a>NonNegative</a> n) (<a>NonEmpty</a> (xs :: [<tt>A</tt>])) =
--     take n (cycle xs) == take n (xs ++ cycle xs)
--   </pre>
--   
--   <pre>
--   -- Instead of <tt>forAll</tt> <a>orderedList</a>
--   prop_Sort (<a>Ordered</a> (xs :: [<tt>OrdA</tt>])) =
--     sort xs == xs
--   </pre>
module Test.QuickCheck.Modifiers

-- | <tt>Blind x</tt>: as x, but x does not have to be in the <a>Show</a>
--   class.
newtype Blind a
Blind :: a -> Blind a
[getBlind] :: Blind a -> a

-- | <tt>Fixed x</tt>: as x, but will not be shrunk.
newtype Fixed a
Fixed :: a -> Fixed a
[getFixed] :: Fixed a -> a

-- | <tt>Ordered xs</tt>: guarantees that xs is ordered.
newtype OrderedList a
Ordered :: [a] -> OrderedList a
[getOrdered] :: OrderedList a -> [a]

-- | <tt>NonEmpty xs</tt>: guarantees that xs is non-empty.
newtype NonEmptyList a
NonEmpty :: [a] -> NonEmptyList a
[getNonEmpty] :: NonEmptyList a -> [a]

-- | <tt>Positive x</tt>: guarantees that <tt>x &gt; 0</tt>.
newtype Positive a
Positive :: a -> Positive a
[getPositive] :: Positive a -> a

-- | <tt>NonZero x</tt>: guarantees that <tt>x /= 0</tt>.
newtype NonZero a
NonZero :: a -> NonZero a
[getNonZero] :: NonZero a -> a

-- | <tt>NonNegative x</tt>: guarantees that <tt>x &gt;= 0</tt>.
newtype NonNegative a
NonNegative :: a -> NonNegative a
[getNonNegative] :: NonNegative a -> a

-- | <tt>Large x</tt>: by default, QuickCheck generates <a>Int</a>s drawn
--   from a small range. <tt>Large Int</tt> gives you values drawn from the
--   entire range instead.
newtype Large a
Large :: a -> Large a
[getLarge] :: Large a -> a

-- | <tt>Small x</tt>: generates values of <tt>x</tt> drawn from a small
--   range. The opposite of <a>Large</a>.
newtype Small a
Small :: a -> Small a
[getSmall] :: Small a -> a

-- | <tt>Smart _ x</tt>: tries a different order when shrinking.
data Smart a
Smart :: Int -> a -> Smart a

-- | <tt>Shrink2 x</tt>: allows 2 shrinking steps at the same time when
--   shrinking x
newtype Shrink2 a
Shrink2 :: a -> Shrink2 a
[getShrink2] :: Shrink2 a -> a

-- | <tt>Shrinking _ x</tt>: allows for maintaining a state during
--   shrinking.
data Shrinking s a
Shrinking :: s -> a -> Shrinking s a
class ShrinkState s a
shrinkInit :: ShrinkState s a => a -> s
shrinkState :: ShrinkState s a => a -> s -> [(a, s)]

-- | <tt>ASCIIString</tt>: generates an ASCII string.
newtype ASCIIString
ASCIIString :: String -> ASCIIString
[getASCIIString] :: ASCIIString -> String

-- | <tt>UnicodeString</tt>: generates a unicode String. The string will
--   not contain surrogate pairs.
newtype UnicodeString
UnicodeString :: String -> UnicodeString
[getUnicodeString] :: UnicodeString -> String

-- | <tt>PrintableString</tt>: generates a printable unicode String. The
--   string will not contain surrogate pairs.
newtype PrintableString
PrintableString :: String -> PrintableString
[getPrintableString] :: PrintableString -> String
instance GHC.Read.Read Test.QuickCheck.Modifiers.PrintableString
instance GHC.Show.Show Test.QuickCheck.Modifiers.PrintableString
instance GHC.Classes.Ord Test.QuickCheck.Modifiers.PrintableString
instance GHC.Classes.Eq Test.QuickCheck.Modifiers.PrintableString
instance GHC.Read.Read Test.QuickCheck.Modifiers.UnicodeString
instance GHC.Show.Show Test.QuickCheck.Modifiers.UnicodeString
instance GHC.Classes.Ord Test.QuickCheck.Modifiers.UnicodeString
instance GHC.Classes.Eq Test.QuickCheck.Modifiers.UnicodeString
instance GHC.Read.Read Test.QuickCheck.Modifiers.ASCIIString
instance GHC.Show.Show Test.QuickCheck.Modifiers.ASCIIString
instance GHC.Classes.Ord Test.QuickCheck.Modifiers.ASCIIString
instance GHC.Classes.Eq Test.QuickCheck.Modifiers.ASCIIString
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Real.Real a => GHC.Real.Real (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Real.Integral a => GHC.Real.Integral (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Num.Num a => GHC.Num.Num (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Arr.Ix a => GHC.Arr.Ix (Test.QuickCheck.Modifiers.Small a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Modifiers.Small a)
instance GHC.Real.Real a => GHC.Real.Real (Test.QuickCheck.Modifiers.Small a)
instance GHC.Real.Integral a => GHC.Real.Integral (Test.QuickCheck.Modifiers.Small a)
instance GHC.Num.Num a => GHC.Num.Num (Test.QuickCheck.Modifiers.Small a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.Small a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.Small a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.Small a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.Small a)
instance GHC.Arr.Ix a => GHC.Arr.Ix (Test.QuickCheck.Modifiers.Large a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Modifiers.Large a)
instance GHC.Real.Real a => GHC.Real.Real (Test.QuickCheck.Modifiers.Large a)
instance GHC.Real.Integral a => GHC.Real.Integral (Test.QuickCheck.Modifiers.Large a)
instance GHC.Num.Num a => GHC.Num.Num (Test.QuickCheck.Modifiers.Large a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.Large a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.Large a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.Large a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.Large a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Modifiers.NonNegative a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.NonNegative a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.NonNegative a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.NonNegative a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.NonNegative a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Modifiers.NonZero a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.NonZero a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.NonZero a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.NonZero a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.NonZero a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Modifiers.Positive a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.Positive a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.Positive a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.Positive a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.Positive a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.NonEmptyList a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.NonEmptyList a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.NonEmptyList a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.NonEmptyList a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.OrderedList a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.OrderedList a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.OrderedList a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.OrderedList a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Real.Real a => GHC.Real.Real (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Real.Integral a => GHC.Real.Integral (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Num.Num a => GHC.Num.Num (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Read.Read a => GHC.Read.Read (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Test.QuickCheck.Modifiers.Blind a)
instance GHC.Real.Real a => GHC.Real.Real (Test.QuickCheck.Modifiers.Blind a)
instance GHC.Real.Integral a => GHC.Real.Integral (Test.QuickCheck.Modifiers.Blind a)
instance GHC.Num.Num a => GHC.Num.Num (Test.QuickCheck.Modifiers.Blind a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Test.QuickCheck.Modifiers.Blind a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Test.QuickCheck.Modifiers.Blind a)
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Modifiers.PrintableString
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Modifiers.UnicodeString
instance Test.QuickCheck.Arbitrary.Arbitrary Test.QuickCheck.Modifiers.ASCIIString
instance (Test.QuickCheck.Arbitrary.Arbitrary a, Test.QuickCheck.Modifiers.ShrinkState s a) => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.Shrinking s a)
instance GHC.Base.Functor (Test.QuickCheck.Modifiers.Shrinking s)
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.Shrinking s a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.Smart
instance GHC.Show.Show a => GHC.Show.Show (Test.QuickCheck.Modifiers.Smart a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.Smart a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.Shrink2
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.Shrink2 a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.Small
instance GHC.Real.Integral a => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.Small a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.Large
instance (GHC.Real.Integral a, GHC.Enum.Bounded a) => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.Large a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.NonNegative
instance (GHC.Num.Num a, GHC.Classes.Ord a, Test.QuickCheck.Arbitrary.Arbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.NonNegative a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.NonZero
instance (GHC.Num.Num a, GHC.Classes.Eq a, Test.QuickCheck.Arbitrary.Arbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.NonZero a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.Positive
instance (GHC.Num.Num a, GHC.Classes.Ord a, Test.QuickCheck.Arbitrary.Arbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.Positive a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.NonEmptyList
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.NonEmptyList a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.OrderedList
instance (GHC.Classes.Ord a, Test.QuickCheck.Arbitrary.Arbitrary a) => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.OrderedList a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.Fixed
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.Fixed a)
instance GHC.Base.Functor Test.QuickCheck.Modifiers.Blind
instance GHC.Show.Show (Test.QuickCheck.Modifiers.Blind a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Modifiers.Blind a)


-- | Generation of random shrinkable, showable functions. See the paper
--   "Shrinking and showing functions" by Koen Claessen.
--   
--   Example of use:
--   
--   <pre>
--   &gt;&gt;&gt; :{
--   
--   &gt;&gt;&gt; let prop :: Fun String Integer -&gt; Bool
--   
--   &gt;&gt;&gt; prop (Fun _ f) = f "monkey" == f "banana" || f "banana" == f "elephant"
--   
--   &gt;&gt;&gt; :}
--   
--   &gt;&gt;&gt; quickCheck prop
--   *** Failed! Falsifiable (after 3 tests and 134 shrinks):
--   {"elephant"-&gt;1, "monkey"-&gt;1, _-&gt;0}
--   </pre>
--   
--   To generate random values of type <tt><a>Fun</a> a b</tt>, you must
--   have an instance <tt><a>Function</a> a</tt>. If your type has a
--   <a>Show</a> instance, you can use <a>functionShow</a> to write the
--   instance; otherwise, use <a>functionMap</a> to give a bijection
--   between your type and a type that is already an instance of
--   <a>Function</a>. See the <tt><a>Function</a> [a]</tt> instance for an
--   example of the latter.
module Test.QuickCheck.Function

-- | Generation of random shrinkable, showable functions.
--   
--   To generate random values of type <tt><a>Fun</a> a b</tt>, you must
--   have an instance <tt><a>Function</a> a</tt>.
--   
--   See also <a>applyFun</a>, and <a>Fn</a> with GHC &gt;= 7.8.
data Fun a b
Fun :: (a :-> b, b, Shrunk) -> (a -> b) -> Fun a b

-- | Extracts the value of a function.
--   
--   <a>Fn</a> is the pattern equivalent of this function.
--   
--   <pre>
--   prop :: Fun String Integer -&gt; Bool
--   prop f = applyFun f "banana" == applyFun f "monkey"
--         || applyFun f "banana" == applyFun f "elephant"
--   </pre>
applyFun :: Fun a b -> (a -> b)

-- | Alias to <a>applyFun</a>.
apply :: Fun a b -> (a -> b)

-- | Extracts the value of a binary function.
--   
--   <a>Fn2</a> is the pattern equivalent of this function.
--   
--   <pre>
--   prop_zipWith :: Fun (Int, Bool) Char -&gt; [Int] -&gt; [Bool] -&gt; Bool
--   prop_zipWith f xs ys = zipWith (applyFun2 f) xs ys == [ applyFun2 f x y | (x, y) &lt;- zip xs ys]
--   </pre>
applyFun2 :: Fun (a, b) c -> (a -> b -> c)

-- | Extracts the value of a ternary function. <a>Fn3</a> is the pattern
--   equivalent of this function.
applyFun3 :: Fun (a, b, c) d -> (a -> b -> c -> d)

-- | The type of possibly partial concrete functions
data a (:->) c

-- | The class <tt>Function a</tt> is used for random generation of
--   showable functions of type <tt>a -&gt; b</tt>.
--   
--   There is a default implementation for <a>function</a>, which you can
--   use if your type has structural equality. Otherwise, you can normally
--   use <a>functionMap</a> or <a>functionShow</a>.
class Function a
function :: Function a => (a -> b) -> (a :-> b)
function :: (Function a, Generic a, GFunction (Rep a)) => (a -> b) -> (a :-> b)

-- | The basic building block for <a>Function</a> instances. Provides a
--   <a>Function</a> instance by mapping to and from a type that already
--   has a <a>Function</a> instance.
functionMap :: Function b => (a -> b) -> (b -> a) -> (a -> c) -> (a :-> c)

-- | Provides a <a>Function</a> instance for types with <a>Show</a> and
--   <a>Read</a>.
functionShow :: (Show a, Read a) => (a -> c) -> (a :-> c)

-- | Provides a <a>Function</a> instance for types with <a>Integral</a>.
functionIntegral :: Integral a => (a -> b) -> (a :-> b)

-- | Provides a <a>Function</a> instance for types with <a>RealFrac</a>.
functionRealFrac :: RealFrac a => (a -> b) -> (a :-> b)

-- | Provides a <a>Function</a> instance for types with <a>Bounded</a> and
--   <a>Enum</a>. Use only for small types (i.e. not integers): creates the
--   list <tt>['minBound'..'maxBound']</tt>!
functionBoundedEnum :: (Eq a, Bounded a, Enum a) => (a -> b) -> (a :-> b)

-- | A modifier for testing functions.
--   
--   <pre>
--   prop :: Fun String Integer -&gt; Bool
--   prop (Fn f) = f "banana" == f "monkey"
--              || f "banana" == f "elephant"
--   </pre>

-- | A modifier for testing binary functions.
--   
--   <pre>
--   prop_zipWith :: Fun (Int, Bool) Char -&gt; [Int] -&gt; [Bool] -&gt; Bool
--   prop_zipWith (Fn2 f) xs ys = zipWith f xs ys == [ f x y | (x, y) &lt;- zip xs ys]
--   </pre>

-- | A modifier for testing ternary functions.
instance GHC.Classes.Eq Test.QuickCheck.Function.Shrunk
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (Test.QuickCheck.Function.Fun a b)
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Arbitrary.CoArbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b) => Test.QuickCheck.Arbitrary.Arbitrary (Test.QuickCheck.Function.Fun a b)
instance Test.QuickCheck.Function.Function ()
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Function.Function b) => Test.QuickCheck.Function.Function (a, b)
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Function.Function b) => Test.QuickCheck.Function.Function (Data.Either.Either a b)
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Function.Function b, Test.QuickCheck.Function.Function c) => Test.QuickCheck.Function.Function (a, b, c)
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Function.Function b, Test.QuickCheck.Function.Function c, Test.QuickCheck.Function.Function d) => Test.QuickCheck.Function.Function (a, b, c, d)
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Function.Function b, Test.QuickCheck.Function.Function c, Test.QuickCheck.Function.Function d, Test.QuickCheck.Function.Function e) => Test.QuickCheck.Function.Function (a, b, c, d, e)
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Function.Function b, Test.QuickCheck.Function.Function c, Test.QuickCheck.Function.Function d, Test.QuickCheck.Function.Function e, Test.QuickCheck.Function.Function f) => Test.QuickCheck.Function.Function (a, b, c, d, e, f)
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Function.Function b, Test.QuickCheck.Function.Function c, Test.QuickCheck.Function.Function d, Test.QuickCheck.Function.Function e, Test.QuickCheck.Function.Function f, Test.QuickCheck.Function.Function g) => Test.QuickCheck.Function.Function (a, b, c, d, e, f, g)
instance Test.QuickCheck.Function.Function a => Test.QuickCheck.Function.Function [a]
instance Test.QuickCheck.Function.Function a => Test.QuickCheck.Function.Function (GHC.Base.Maybe a)
instance Test.QuickCheck.Function.Function GHC.Types.Bool
instance Test.QuickCheck.Function.Function GHC.Integer.Type.Integer
instance Test.QuickCheck.Function.Function GHC.Types.Int
instance Test.QuickCheck.Function.Function GHC.Types.Word
instance Test.QuickCheck.Function.Function GHC.Types.Char
instance Test.QuickCheck.Function.Function GHC.Types.Float
instance Test.QuickCheck.Function.Function GHC.Types.Double
instance Test.QuickCheck.Function.Function GHC.Types.Ordering
instance (GHC.Real.Integral a, Test.QuickCheck.Function.Function a) => Test.QuickCheck.Function.Function (GHC.Real.Ratio a)
instance Data.Fixed.HasResolution a => Test.QuickCheck.Function.Function (Data.Fixed.Fixed a)
instance (GHC.Float.RealFloat a, Test.QuickCheck.Function.Function a) => Test.QuickCheck.Function.Function (Data.Complex.Complex a)
instance (GHC.Classes.Ord a, Test.QuickCheck.Function.Function a) => Test.QuickCheck.Function.Function (Data.Set.Internal.Set a)
instance (GHC.Classes.Ord a, Test.QuickCheck.Function.Function a, Test.QuickCheck.Function.Function b) => Test.QuickCheck.Function.Function (Data.Map.Internal.Map a b)
instance Test.QuickCheck.Function.Function Data.IntSet.Internal.IntSet
instance Test.QuickCheck.Function.Function a => Test.QuickCheck.Function.Function (Data.IntMap.Internal.IntMap a)
instance Test.QuickCheck.Function.Function a => Test.QuickCheck.Function.Function (Data.Sequence.Internal.Seq a)
instance Test.QuickCheck.Function.Function GHC.Int.Int8
instance Test.QuickCheck.Function.Function GHC.Int.Int16
instance Test.QuickCheck.Function.Function GHC.Int.Int32
instance Test.QuickCheck.Function.Function GHC.Int.Int64
instance Test.QuickCheck.Function.Function GHC.Word.Word8
instance Test.QuickCheck.Function.Function GHC.Word.Word16
instance Test.QuickCheck.Function.Function GHC.Word.Word32
instance Test.QuickCheck.Function.Function GHC.Word.Word64
instance Test.QuickCheck.Function.Function Test.QuickCheck.Poly.A
instance Test.QuickCheck.Function.Function Test.QuickCheck.Poly.B
instance Test.QuickCheck.Function.Function Test.QuickCheck.Poly.C
instance Test.QuickCheck.Function.Function Test.QuickCheck.Poly.OrdA
instance Test.QuickCheck.Function.Function Test.QuickCheck.Poly.OrdB
instance Test.QuickCheck.Function.Function Test.QuickCheck.Poly.OrdC
instance (Test.QuickCheck.Function.Function a, Test.QuickCheck.Arbitrary.CoArbitrary a, Test.QuickCheck.Arbitrary.Arbitrary b) => Test.QuickCheck.Arbitrary.Arbitrary (a Test.QuickCheck.Function.:-> b)
instance Test.QuickCheck.Function.Function a => Test.QuickCheck.Function.GFunction (GHC.Generics.K1 i a)
instance Test.QuickCheck.Function.GFunction GHC.Generics.U1
instance forall k (f :: k -> *) (g :: k -> *). (Test.QuickCheck.Function.GFunction f, Test.QuickCheck.Function.GFunction g) => Test.QuickCheck.Function.GFunction (f GHC.Generics.:*: g)
instance forall k (f :: k -> *) (g :: k -> *). (Test.QuickCheck.Function.GFunction f, Test.QuickCheck.Function.GFunction g) => Test.QuickCheck.Function.GFunction (f GHC.Generics.:+: g)
instance forall k (f :: k -> *) i (c :: GHC.Generics.Meta). Test.QuickCheck.Function.GFunction f => Test.QuickCheck.Function.GFunction (GHC.Generics.M1 i c f)
instance GHC.Base.Functor ((Test.QuickCheck.Function.:->) a)
instance (GHC.Show.Show a, GHC.Show.Show b) => GHC.Show.Show (a Test.QuickCheck.Function.:-> b)


-- | Terminal control. Internal QuickCheck module.
module Test.QuickCheck.Text
newtype Str
MkStr :: String -> Str
ranges :: (Show a, Integral a) => a -> a -> Str
number :: Int -> String -> String
short :: Int -> String -> String
showErr :: Show a => a -> String
oneLine :: String -> String
isOneLine :: String -> Bool
bold :: String -> String
newTerminal :: (String -> IO ()) -> (String -> IO ()) -> IO Terminal
withStdioTerminal :: (Terminal -> IO a) -> IO a
withNullTerminal :: (Terminal -> IO a) -> IO a
terminalOutput :: Terminal -> IO String
handle :: Handle -> String -> IO ()
data Terminal
putTemp :: Terminal -> String -> IO ()
putPart :: Terminal -> String -> IO ()
putLine :: Terminal -> String -> IO ()
instance GHC.Show.Show Test.QuickCheck.Text.Str


-- | QuickCheck's internal state. Internal QuickCheck module.
module Test.QuickCheck.State

-- | State represents QuickCheck's internal state while testing a property.
--   The state is made visible to callback functions.
data State
MkState :: Terminal -> Int -> Int -> (Int -> Int -> Int) -> !Int -> !Int -> !Int -> !Int -> !(Map String Int) -> ![Set String] -> !Bool -> !QCGen -> !Int -> !Int -> !Int -> State

-- | the current terminal
[terminal] :: State -> Terminal

-- | maximum number of successful tests needed
[maxSuccessTests] :: State -> Int

-- | maximum number of discarded tests per successful test
[maxDiscardedRatio] :: State -> Int

-- | how to compute the size of test cases from discarded tests
[computeSize] :: State -> Int -> Int -> Int

-- | How many shrinks to try before giving up
[numTotMaxShrinks] :: State -> !Int

-- | the current number of tests that have succeeded
[numSuccessTests] :: State -> !Int

-- | the current number of discarded tests
[numDiscardedTests] :: State -> !Int

-- | the number of discarded tests since the last successful test
[numRecentlyDiscardedTests] :: State -> !Int

-- | all labels that have been defined so far
[labels] :: State -> !(Map String Int)

-- | all labels that have been collected so far
[collected] :: State -> ![Set String]

-- | indicates if the property is expected to fail
[expectedFailure] :: State -> !Bool

-- | the current random seed
[randomSeed] :: State -> !QCGen

-- | number of successful shrinking steps so far
[numSuccessShrinks] :: State -> !Int

-- | number of failed shrinking steps since the last successful shrink
[numTryShrinks] :: State -> !Int

-- | total number of failed shrinking steps
[numTotTryShrinks] :: State -> !Int


-- | Combinators for constructing properties.
module Test.QuickCheck.Property

-- | The type of properties.
newtype Property
MkProperty :: Gen Prop -> Property
[unProperty] :: Property -> Gen Prop

-- | The class of properties, i.e., types which QuickCheck knows how to
--   test. Typically a property will be a function returning <a>Bool</a> or
--   <a>Property</a>.
--   
--   If a property does no quantification, i.e. has no parameters and
--   doesn't use <a>forAll</a>, it will only be tested once. This may not
--   be what you want if your property is an <tt>IO Bool</tt>. You can
--   change this behaviour using the <a>again</a> combinator.
class Testable prop

-- | Convert the thing to a property.
property :: Testable prop => prop -> Property

-- | If a property returns <a>Discard</a>, the current test case is
--   discarded, the same as if a precondition was false.
data Discard
Discard :: Discard

-- | Do I/O inside a property.

-- | <i>Deprecated: Use <a>ioProperty</a> instead</i>
morallyDubiousIOProperty :: Testable prop => IO prop -> Property

-- | Do I/O inside a property.
--   
--   Warning: any random values generated inside of the argument to
--   <tt>ioProperty</tt> will not currently be shrunk. For best results,
--   generate all random values before calling <tt>ioProperty</tt>.
ioProperty :: Testable prop => IO prop -> Property
protect :: (AnException -> a) -> IO a -> IO a
newtype Prop
MkProp :: Rose Result -> Prop
[unProp] :: Prop -> Rose Result
data Rose a
MkRose :: a -> [Rose a] -> Rose a
IORose :: (IO (Rose a)) -> Rose a
ioRose :: IO (Rose Result) -> Rose Result
joinRose :: Rose (Rose a) -> Rose a

-- | Execute the <a>IORose</a> bits of a rose tree, returning a tree
--   constructed by MkRose.
reduceRose :: Rose Result -> IO (Rose Result)

-- | Apply a function to the outermost MkRose constructor of a rose tree.
--   The function must be total!
onRose :: (a -> [Rose a] -> Rose a) -> Rose a -> Rose a

-- | Wrap a rose tree in an exception handler.
protectRose :: IO (Rose Result) -> IO (Rose Result)

-- | Wrap all the Results in a rose tree in exception handlers.
protectResults :: Rose Result -> Rose Result

-- | Different kinds of callbacks
data Callback

-- | Called just after a test
PostTest :: CallbackKind -> (State -> Result -> IO ()) -> Callback

-- | Called with the final failing test-case
PostFinalFailure :: CallbackKind -> (State -> Result -> IO ()) -> Callback
data CallbackKind

-- | Affected by the <a>verbose</a> combinator
Counterexample :: CallbackKind

-- | Not affected by the <a>verbose</a> combinator
NotCounterexample :: CallbackKind

-- | The result of a single test.
data Result
MkResult :: Maybe Bool -> Bool -> String -> Maybe AnException -> Bool -> Maybe Int -> Map String Int -> Set String -> [Callback] -> [String] -> Result

-- | result of the test case; Nothing = discard
[ok] :: Result -> Maybe Bool

-- | indicates what the expected result of the property is
[expect] :: Result -> Bool

-- | a message indicating what went wrong
[reason] :: Result -> String

-- | the exception thrown, if any
[theException] :: Result -> Maybe AnException

-- | if True, the test should not be repeated
[abort] :: Result -> Bool

-- | stop after this many tests
[maybeNumTests] :: Result -> Maybe Int

-- | all labels used by this property
[labels] :: Result -> Map String Int

-- | the collected labels for this test case
[stamp] :: Result -> Set String

-- | the callbacks for this test case
[callbacks] :: Result -> [Callback]

-- | the generated test case
[testCase] :: Result -> [String]
exception :: String -> AnException -> Result
formatException :: String -> AnException -> String
protectResult :: IO Result -> IO Result
succeeded :: Result
failed :: Result
rejected :: Result
liftBool :: Bool -> Result
mapResult :: Testable prop => (Result -> Result) -> prop -> Property
mapTotalResult :: Testable prop => (Result -> Result) -> prop -> Property
mapRoseResult :: Testable prop => (Rose Result -> Rose Result) -> prop -> Property
mapProp :: Testable prop => (Prop -> Prop) -> prop -> Property

-- | Changes the maximum test case size for a property.
mapSize :: Testable prop => (Int -> Int) -> prop -> Property

-- | Shrinks the argument to a property if it fails. Shrinking is done
--   automatically for most types. This function is only needed when you
--   want to override the default behavior.
shrinking :: Testable prop => (a -> [a]) -> a -> (a -> prop) -> Property

-- | Disables shrinking for a property altogether.
noShrinking :: Testable prop => prop -> Property

-- | Adds a callback
callback :: Testable prop => Callback -> prop -> Property

-- | Adds the given string to the counterexample if the property fails.
counterexample :: Testable prop => String -> prop -> Property
showCounterexample :: String -> IO String

-- | Adds the given string to the counterexample if the property fails.

-- | <i>Deprecated: Use counterexample instead</i>
printTestCase :: Testable prop => String -> prop -> Property

-- | Performs an <a>IO</a> action after the last failure of a property.
whenFail :: Testable prop => IO () -> prop -> Property

-- | Performs an <a>IO</a> action every time a property fails. Thus, if
--   shrinking is done, this can be used to keep track of the failures
--   along the way.
whenFail' :: Testable prop => IO () -> prop -> Property

-- | Prints out the generated testcase every time the property is tested.
--   Only variables quantified over <i>inside</i> the <a>verbose</a> are
--   printed.
verbose :: Testable prop => prop -> Property

-- | Indicates that a property is supposed to fail. QuickCheck will report
--   an error if it does not fail.
expectFailure :: Testable prop => prop -> Property

-- | Modifies a property so that it only will be tested once. Opposite of
--   <a>again</a>.
once :: Testable prop => prop -> Property

-- | Modifies a property so that it will be tested repeatedly. Opposite of
--   <a>once</a>.
again :: Testable prop => prop -> Property

-- | Configures how many times a property will be tested.
--   
--   For example,
--   
--   <pre>
--   quickCheck (withMaxSuccess 1000 p)
--   </pre>
--   
--   will test <tt>p</tt> up to 1000 times.
withMaxSuccess :: Testable prop => Int -> prop -> Property

-- | Attaches a label to a property. This is used for reporting test case
--   distribution.
--   
--   For example:
--   
--   <pre>
--   prop_reverse_reverse :: [Int] -&gt; Property
--   prop_reverse_reverse xs =
--     label ("length of input is " ++ show (length xs)) $
--       reverse (reverse xs) === xs
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_reverse_reverse
--   +++ OK, passed 100 tests:
--   7% length of input is 7
--   6% length of input is 3
--   5% length of input is 4
--   4% length of input is 6
--   ...
--   </pre>
label :: Testable prop => String -> prop -> Property

-- | Attaches a label to a property. This is used for reporting test case
--   distribution.
--   
--   <pre>
--   collect x = label (show x)
--   </pre>
--   
--   For example:
--   
--   <pre>
--   prop_reverse_reverse :: [Int] -&gt; Property
--   prop_reverse_reverse xs =
--     collect (length xs) $
--       reverse (reverse xs) === xs
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_reverse_reverse
--   +++ OK, passed 100 tests:
--   7% 7
--   6% 3
--   5% 4
--   4% 6
--   ...
--   </pre>
collect :: (Show a, Testable prop) => a -> prop -> Property

-- | Records how many test cases satisfy a given condition.
--   
--   For example:
--   
--   <pre>
--   prop_sorted_sort :: [Int] -&gt; Property
--   prop_sorted_sort xs =
--     sorted xs ==&gt;
--     classify (length xs &gt; 1) "non-trivial" $
--     sort xs === xs
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_sorted_sort
--   +++ OK, passed 100 tests (22% non-trivial).
--   </pre>
classify :: Testable prop => Bool -> String -> prop -> Property

-- | Checks that at least the given proportion of <i>successful</i> test
--   cases belong to the given class. Discarded tests (i.e. ones with a
--   false precondition) do not affect coverage.
--   
--   For example:
--   
--   <pre>
--   prop_sorted_sort :: [Int] -&gt; Property
--   prop_sorted_sort xs =
--     sorted xs ==&gt;
--     cover (length xs &gt; 1) 50 "non-trivial" $
--     sort xs === xs
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_sorted_sort
--   *** Insufficient coverage after 100 tests (only 24% non-trivial, not 50%).
--   </pre>
cover :: Testable prop => Bool -> Int -> String -> prop -> Property

-- | Implication for properties: The resulting property holds if the first
--   argument is <a>False</a> (in which case the test case is discarded),
--   or if the given property holds.
(==>) :: Testable prop => Bool -> prop -> Property
infixr 0 ==>

-- | Considers a property failed if it does not complete within the given
--   number of microseconds.
within :: Testable prop => Int -> prop -> Property

-- | Explicit universal quantification: uses an explicitly given test case
--   generator.
forAll :: (Show a, Testable prop) => Gen a -> (a -> prop) -> Property

-- | Like <a>forAll</a>, but tries to shrink the argument for failing test
--   cases.
forAllShrink :: (Show a, Testable prop) => Gen a -> (a -> [a]) -> (a -> prop) -> Property

-- | Nondeterministic choice: <tt>p1</tt> <a>.&amp;.</a> <tt>p2</tt> picks
--   randomly one of <tt>p1</tt> and <tt>p2</tt> to test. If you test the
--   property 100 times it makes 100 random choices.
(.&.) :: (Testable prop1, Testable prop2) => prop1 -> prop2 -> Property
infixr 1 .&.

-- | Conjunction: <tt>p1</tt> <a>.&amp;&amp;.</a> <tt>p2</tt> passes if
--   both <tt>p1</tt> and <tt>p2</tt> pass.
(.&&.) :: (Testable prop1, Testable prop2) => prop1 -> prop2 -> Property
infixr 1 .&&.

-- | Take the conjunction of several properties.
conjoin :: Testable prop => [prop] -> Property

-- | Disjunction: <tt>p1</tt> <a>.||.</a> <tt>p2</tt> passes unless
--   <tt>p1</tt> and <tt>p2</tt> simultaneously fail.
(.||.) :: (Testable prop1, Testable prop2) => prop1 -> prop2 -> Property
infixr 1 .||.

-- | Take the disjunction of several properties.
disjoin :: Testable prop => [prop] -> Property

-- | Like <a>==</a>, but prints a counterexample when it fails.
(===) :: (Eq a, Show a) => a -> a -> Property
infix 4 ===

-- | Checks that a value is total, i.e., doesn't crash when evaluated.
total :: NFData a => a -> Property
instance Test.QuickCheck.Property.Testable Test.QuickCheck.Property.Discard
instance Test.QuickCheck.Property.Testable ()
instance Test.QuickCheck.Property.Testable GHC.Types.Bool
instance Test.QuickCheck.Property.Testable Test.QuickCheck.Property.Result
instance Test.QuickCheck.Property.Testable Test.QuickCheck.Property.Prop
instance Test.QuickCheck.Property.Testable prop => Test.QuickCheck.Property.Testable (Test.QuickCheck.Gen.Gen prop)
instance Test.QuickCheck.Property.Testable Test.QuickCheck.Property.Property
instance (Test.QuickCheck.Arbitrary.Arbitrary a, GHC.Show.Show a, Test.QuickCheck.Property.Testable prop) => Test.QuickCheck.Property.Testable (a -> prop)
instance GHC.Base.Functor Test.QuickCheck.Property.Rose
instance GHC.Base.Applicative Test.QuickCheck.Property.Rose
instance GHC.Base.Monad Test.QuickCheck.Property.Rose


-- | The main test loop.
module Test.QuickCheck.Test

-- | Args specifies arguments to the QuickCheck driver
data Args
Args :: Maybe (QCGen, Int) -> Int -> Int -> Int -> Bool -> Int -> Args

-- | Should we replay a previous test? Note: saving a seed from one version
--   of QuickCheck and replaying it in another is not supported. If you
--   want to store a test case permanently you should save the test case
--   itself.
[replay] :: Args -> Maybe (QCGen, Int)

-- | Maximum number of successful tests before succeeding. Testing stops at
--   the first failure. If all tests are passing and you want to run more
--   tests, increase this number.
[maxSuccess] :: Args -> Int

-- | Maximum number of discarded tests per successful test before giving up
[maxDiscardRatio] :: Args -> Int

-- | Size to use for the biggest test cases
[maxSize] :: Args -> Int

-- | Whether to print anything
[chatty] :: Args -> Bool

-- | Maximum number of shrinks to before giving up. Setting this to zero
--   turns shrinking off.
[maxShrinks] :: Args -> Int

-- | Result represents the test result
data Result

-- | A successful test run
Success :: Int -> [(String, Double)] -> String -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | Given up
GaveUp :: Int -> [(String, Double)] -> String -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | A failed test run
Failure :: Int -> Int -> Int -> Int -> QCGen -> Int -> String -> Maybe AnException -> [(String, Double)] -> String -> [String] -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Number of successful shrinking steps performed
[numShrinks] :: Result -> Int

-- | Number of unsuccessful shrinking steps performed
[numShrinkTries] :: Result -> Int

-- | Number of unsuccessful shrinking steps performed since last successful
--   shrink
[numShrinkFinal] :: Result -> Int

-- | What seed was used
[usedSeed] :: Result -> QCGen

-- | What was the test size
[usedSize] :: Result -> Int

-- | Why did the property fail
[reason] :: Result -> String

-- | The exception the property threw, if any
[theException] :: Result -> Maybe AnException

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | The test case which provoked the failure
[failingTestCase] :: Result -> [String]

-- | A property that should have failed did not
NoExpectedFailure :: Int -> [(String, Double)] -> String -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | The tests passed but a use of <a>cover</a> had insufficient coverage
InsufficientCoverage :: Int -> [(String, Double)] -> String -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | Check if the test run result was a success
isSuccess :: Result -> Bool

-- | The default test arguments
stdArgs :: Args

-- | Tests a property and prints the results to <tt>stdout</tt>.
--   
--   By default up to 100 tests are performed, which may not be enough to
--   find all bugs. To run more tests, use <a>withMaxSuccess</a>.
quickCheck :: Testable prop => prop -> IO ()

-- | Tests a property, using test arguments, and prints the results to
--   <tt>stdout</tt>.
quickCheckWith :: Testable prop => Args -> prop -> IO ()

-- | Tests a property, produces a test result, and prints the results to
--   <tt>stdout</tt>.
quickCheckResult :: Testable prop => prop -> IO Result

-- | Tests a property, using test arguments, produces a test result, and
--   prints the results to <tt>stdout</tt>.
quickCheckWithResult :: Testable prop => Args -> prop -> IO Result

-- | Tests a property and prints the results and all test cases generated
--   to <tt>stdout</tt>. This is just a convenience function that means the
--   same as <tt><a>quickCheck</a> . <a>verbose</a></tt>.
verboseCheck :: Testable prop => prop -> IO ()

-- | Tests a property, using test arguments, and prints the results and all
--   test cases generated to <tt>stdout</tt>. This is just a convenience
--   function that combines <a>quickCheckWith</a> and <a>verbose</a>.
verboseCheckWith :: Testable prop => Args -> prop -> IO ()

-- | Tests a property, produces a test result, and prints the results and
--   all test cases generated to <tt>stdout</tt>. This is just a
--   convenience function that combines <a>quickCheckResult</a> and
--   <a>verbose</a>.
verboseCheckResult :: Testable prop => prop -> IO Result

-- | Tests a property, using test arguments, produces a test result, and
--   prints the results and all test cases generated to <tt>stdout</tt>.
--   This is just a convenience function that combines
--   <a>quickCheckWithResult</a> and <a>verbose</a>.
verboseCheckWithResult :: Testable prop => Args -> prop -> IO Result
test :: State -> (QCGen -> Int -> Prop) -> IO Result
doneTesting :: State -> (QCGen -> Int -> Prop) -> IO Result
giveUp :: State -> (QCGen -> Int -> Prop) -> IO Result
runATest :: State -> (QCGen -> Int -> Prop) -> IO Result
summary :: State -> [(String, Double)]
success :: State -> IO ()
formatLabel :: Int -> Bool -> (String, Double) -> String
labelCount :: String -> State -> Int
percentage :: Integral a => State -> a -> Double
insufficientlyCovered :: State -> [(String, Int, Double)]
foundFailure :: State -> Result -> [Rose Result] -> IO (Int, Int, Int, Result)
localMin :: State -> Result -> Result -> [Rose Result] -> IO (Int, Int, Int, Result)
localMin' :: State -> Result -> [Rose Result] -> IO (Int, Int, Int, Result)
localMinFound :: State -> Result -> IO (Int, Int, Int, Result)
callbackPostTest :: State -> Result -> IO Result
callbackPostFinalFailure :: State -> Result -> IO ()
instance GHC.Show.Show Test.QuickCheck.Test.Result
instance GHC.Read.Read Test.QuickCheck.Test.Args
instance GHC.Show.Show Test.QuickCheck.Test.Args


-- | Allows testing of monadic values. Will generally follow this form:
--   
--   <pre>
--   prop_monadic a b = <a>monadicIO</a> $ do
--     a' &lt;- <a>run</a> (f a)
--     b' &lt;- <a>run</a> (f b)
--     -- ...
--     <a>assert</a> someBoolean
--   </pre>
--   
--   Example using the <tt>FACTOR(1)</tt> command-line utility:
--   
--   <pre>
--   import System.Process
--   import Test.QuickCheck
--   import Test.QuickCheck.Monadic
--   
--   -- $ factor 16
--   -- 16: 2 2 2 2
--   factor :: Integer -&gt; IO [Integer]
--   factor n = parse `fmap` <a>readProcess</a> "factor" [show n] "" where
--   
--     parse :: String -&gt; [Integer]
--     parse = map read . tail . words
--   
--   prop_factor :: Positive Integer -&gt; Property
--   prop_factor (<a>Positive</a> n) = <a>monadicIO</a> $ do
--     factors &lt;- <a>run</a> (factor n)
--   
--     <a>assert</a> (product factors == n)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_factor
--   +++ OK, passed 100 tests.
--   </pre>
--   
--   See the paper "<a>Testing Monadic Code with QuickCheck</a>".
module Test.QuickCheck.Monadic

-- | The property monad is really a monad transformer that can contain
--   monadic computations in the monad <tt>m</tt> it is parameterized by:
--   
--   <ul>
--   <li><tt>m</tt> - the <tt>m</tt>-computations that may be performed
--   within <tt>PropertyM</tt></li>
--   </ul>
--   
--   Elements of <tt>PropertyM m a</tt> may mix property operations and
--   <tt>m</tt>-computations.
newtype PropertyM m a
MkPropertyM :: ((a -> Gen (m Property)) -> Gen (m Property)) -> PropertyM m a
[unPropertyM] :: PropertyM m a -> (a -> Gen (m Property)) -> Gen (m Property)

-- | The lifting operation of the property monad. Allows embedding
--   monadic/<a>IO</a>-actions in properties:
--   
--   <pre>
--   log :: Int -&gt; IO ()
--   
--   prop_foo n = monadicIO $ do
--     run (log n)
--     -- ...
--   </pre>
run :: Monad m => m a -> PropertyM m a

-- | Allows embedding non-monadic properties into monadic ones.
assert :: Monad m => Bool -> PropertyM m ()

-- | Tests preconditions. Unlike <a>assert</a> this does not cause the
--   property to fail, rather it discards them just like using the
--   implication combinator <a>==&gt;</a>.
--   
--   This allows representing the <a>Hoare triple</a>
--   
--   <pre>
--   {p} x ← e{q}
--   </pre>
--   
--   as
--   
--   <pre>
--   pre p
--   x &lt;- run e
--   assert q
--   </pre>
pre :: Monad m => Bool -> PropertyM m ()

-- | The <a>weakest precondition</a>
--   
--   <pre>
--   wp(x ← e, p)
--   </pre>
--   
--   can be expressed as in code as <tt>wp e (\x -&gt; p)</tt>.
wp :: Monad m => m a -> (a -> PropertyM m b) -> PropertyM m b

-- | Quantification in a monadic property, fits better with
--   <i>do-notation</i> than <a>forAllM</a>.
pick :: (Monad m, Show a) => Gen a -> PropertyM m a

-- | An alternative to quantification a monadic properties to <a>pick</a>,
--   with a notation similar to <a>forAll</a>.
forAllM :: (Monad m, Show a) => Gen a -> (a -> PropertyM m b) -> PropertyM m b

-- | Allows making observations about the test data:
--   
--   <pre>
--   monitor (<a>collect</a> e)
--   </pre>
--   
--   collects the distribution of value of <tt>e</tt>.
--   
--   <pre>
--   monitor (<a>counterexample</a> "Failure!")
--   </pre>
--   
--   Adds <tt>"Failure!"</tt> to the counterexamples.
monitor :: Monad m => (Property -> Property) -> PropertyM m ()
stop :: (Testable prop, Monad m) => prop -> PropertyM m a
monadic :: (Testable a, Monad m) => (m Property -> Property) -> PropertyM m a -> Property
monadic' :: (Testable a, Monad m) => PropertyM m a -> Gen (m Property)

-- | Runs the property monad for <a>IO</a>-computations.
--   
--   <pre>
--   prop_cat msg = monadicIO $ do
--     (exitCode, stdout, _) &lt;- run (<a>readProcessWithExitCode</a> "cat" [] msg)
--   
--     pre (<a>ExitSuccess</a> == exitCode)
--   
--     assert (stdout == msg)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_cat
--   +++ OK, passed 100 tests.
--   </pre>
monadicIO :: Testable a => PropertyM IO a -> Property

-- | Runs the property monad for <a>ST</a>-computations.
--   
--   <pre>
--   -- Your mutable sorting algorithm here
--   sortST :: Ord a =&gt; [a] -&gt; <a>ST</a> s (MVector s a)
--   sortST = <a>thaw</a> . <a>fromList</a> . <a>sort</a>
--   
--   prop_sortST xs = monadicST $ do
--     sorted  &lt;- run (<a>freeze</a> =&lt;&lt; sortST xs)
--     assert (<a>toList</a> sorted == sort xs)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_sortST
--   +++ OK, passed 100 tests.
--   </pre>
monadicST :: Testable a => (forall s. PropertyM (ST s) a) -> Property
runSTGen :: (forall s. Gen (ST s a)) -> Gen a
instance GHC.Base.Functor (Test.QuickCheck.Monadic.PropertyM m)
instance GHC.Base.Applicative (Test.QuickCheck.Monadic.PropertyM m)
instance GHC.Base.Monad m => GHC.Base.Monad (Test.QuickCheck.Monadic.PropertyM m)
instance GHC.Base.Monad m => Control.Monad.Fail.MonadFail (Test.QuickCheck.Monadic.PropertyM m)
instance Control.Monad.Trans.Class.MonadTrans Test.QuickCheck.Monadic.PropertyM
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Test.QuickCheck.Monadic.PropertyM m)


-- | Test all properties in the current module, using Template Haskell. You
--   need to have a <tt>{-# LANGUAGE TemplateHaskell #-}</tt> pragma in
--   your module for any of these to work.
module Test.QuickCheck.All

-- | Test all properties in the current module. The name of the property
--   must begin with <tt>prop_</tt>. Polymorphic properties will be
--   defaulted to <a>Integer</a>. Returns <a>True</a> if all tests
--   succeeded, <a>False</a> otherwise.
--   
--   To use <a>quickCheckAll</a>, add a definition to your module along the
--   lines of
--   
--   <pre>
--   return []
--   runTests = $quickCheckAll
--   </pre>
--   
--   and then execute <tt>runTests</tt>.
--   
--   Note: the bizarre <tt>return []</tt> in the example above is needed on
--   GHC 7.8; without it, <a>quickCheckAll</a> will not be able to find any
--   of the properties. For the curious, the <tt>return []</tt> is a
--   Template Haskell splice that makes GHC insert the empty list of
--   declarations at that point in the program; GHC typechecks everything
--   before the <tt>return []</tt> before it starts on the rest of the
--   module, which means that the later call to <a>quickCheckAll</a> can
--   see everything that was defined before the <tt>return []</tt>. Yikes!
quickCheckAll :: Q Exp

-- | Test all properties in the current module. This is just a convenience
--   function that combines <a>quickCheckAll</a> and <a>verbose</a>.
--   
--   <a>verboseCheckAll</a> has the same issue with scoping as
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
verboseCheckAll :: Q Exp

-- | Test all properties in the current module, using a custom
--   <a>quickCheck</a> function. The same caveats as with
--   <a>quickCheckAll</a> apply.
--   
--   <tt>$<a>forAllProperties</a></tt> has type <tt>(<a>Property</a> -&gt;
--   <a>IO</a> <a>Result</a>) -&gt; <a>IO</a> <a>Bool</a></tt>. An example
--   invocation is <tt>$<a>forAllProperties</a>
--   <a>quickCheckResult</a></tt>, which does the same thing as
--   <tt>$<a>quickCheckAll</a></tt>.
--   
--   <a>forAllProperties</a> has the same issue with scoping as
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
forAllProperties :: Q Exp

-- | Test a polymorphic property, defaulting all type variables to
--   <a>Integer</a>.
--   
--   Invoke as <tt>$(<a>polyQuickCheck</a> 'prop)</tt>, where <tt>prop</tt>
--   is a property. Note that just evaluating <tt><a>quickCheck</a>
--   prop</tt> in GHCi will seem to work, but will silently default all
--   type variables to <tt>()</tt>!
--   
--   <tt>$(<a>polyQuickCheck</a> 'prop)</tt> means the same as
--   <tt><a>quickCheck</a> $(<a>monomorphic</a> 'prop)</tt>. If you want to
--   supply custom arguments to <a>polyQuickCheck</a>, you will have to
--   combine <a>quickCheckWith</a> and <a>monomorphic</a> yourself.
--   
--   If you want to use <a>polyQuickCheck</a> in the same file where you
--   defined the property, the same scoping problems pop up as in
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
polyQuickCheck :: Name -> ExpQ

-- | Test a polymorphic property, defaulting all type variables to
--   <a>Integer</a>. This is just a convenience function that combines
--   <a>verboseCheck</a> and <a>monomorphic</a>.
--   
--   If you want to use <a>polyVerboseCheck</a> in the same file where you
--   defined the property, the same scoping problems pop up as in
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
polyVerboseCheck :: Name -> ExpQ

-- | Monomorphise an arbitrary property by defaulting all type variables to
--   <a>Integer</a>.
--   
--   For example, if <tt>f</tt> has type <tt><a>Ord</a> a =&gt; [a] -&gt;
--   [a]</tt> then <tt>$(<a>monomorphic</a> 'f)</tt> has type
--   <tt>[<a>Integer</a>] -&gt; [<a>Integer</a>]</tt>.
--   
--   If you want to use <a>monomorphic</a> in the same file where you
--   defined the property, the same scoping problems pop up as in
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
monomorphic :: Name -> ExpQ


-- | The <a>QuickCheck manual</a> gives detailed information about using
--   QuickCheck effectively.
--   
--   To start using QuickCheck, write down your property as a function
--   returning <tt>Bool</tt>. For example, to check that reversing a list
--   twice gives back the same list you can write:
--   
--   <pre>
--   import Test.QuickCheck
--   
--   prop_reverse :: [Int] -&gt; Bool
--   prop_reverse xs = reverse (reverse xs) == xs
--   </pre>
--   
--   You can then use QuickCheck to test <tt>prop_reverse</tt> on 100
--   random lists:
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_reverse
--   +++ OK, passed 100 tests.
--   </pre>
--   
--   To run more tests you can use the <a>withMaxSuccess</a> combinator:
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck (withMaxSuccess 10000 prop_reverse)
--   +++ OK, passed 10000 tests.
--   </pre>
--   
--   To use QuickCheck on your own data types you will need to write
--   <a>Arbitrary</a> instances for those types. See the <a>QuickCheck
--   manual</a> for details about how to do that.
--   
--   This module exports most of QuickCheck's functionality, but see also
--   <a>Test.QuickCheck.Monadic</a> which helps with testing impure or
--   monadic code.
module Test.QuickCheck

-- | Tests a property and prints the results to <tt>stdout</tt>.
--   
--   By default up to 100 tests are performed, which may not be enough to
--   find all bugs. To run more tests, use <a>withMaxSuccess</a>.
quickCheck :: Testable prop => prop -> IO ()

-- | Args specifies arguments to the QuickCheck driver
data Args
Args :: Maybe (QCGen, Int) -> Int -> Int -> Int -> Bool -> Int -> Args

-- | Should we replay a previous test? Note: saving a seed from one version
--   of QuickCheck and replaying it in another is not supported. If you
--   want to store a test case permanently you should save the test case
--   itself.
[replay] :: Args -> Maybe (QCGen, Int)

-- | Maximum number of successful tests before succeeding. Testing stops at
--   the first failure. If all tests are passing and you want to run more
--   tests, increase this number.
[maxSuccess] :: Args -> Int

-- | Maximum number of discarded tests per successful test before giving up
[maxDiscardRatio] :: Args -> Int

-- | Size to use for the biggest test cases
[maxSize] :: Args -> Int

-- | Whether to print anything
[chatty] :: Args -> Bool

-- | Maximum number of shrinks to before giving up. Setting this to zero
--   turns shrinking off.
[maxShrinks] :: Args -> Int

-- | Result represents the test result
data Result

-- | A successful test run
Success :: Int -> [(String, Double)] -> String -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | Given up
GaveUp :: Int -> [(String, Double)] -> String -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | A failed test run
Failure :: Int -> Int -> Int -> Int -> QCGen -> Int -> String -> Maybe AnException -> [(String, Double)] -> String -> [String] -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Number of successful shrinking steps performed
[numShrinks] :: Result -> Int

-- | Number of unsuccessful shrinking steps performed
[numShrinkTries] :: Result -> Int

-- | Number of unsuccessful shrinking steps performed since last successful
--   shrink
[numShrinkFinal] :: Result -> Int

-- | What seed was used
[usedSeed] :: Result -> QCGen

-- | What was the test size
[usedSize] :: Result -> Int

-- | Why did the property fail
[reason] :: Result -> String

-- | The exception the property threw, if any
[theException] :: Result -> Maybe AnException

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | The test case which provoked the failure
[failingTestCase] :: Result -> [String]

-- | A property that should have failed did not
NoExpectedFailure :: Int -> [(String, Double)] -> String -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | The tests passed but a use of <a>cover</a> had insufficient coverage
InsufficientCoverage :: Int -> [(String, Double)] -> String -> Result

-- | Number of tests performed
[numTests] :: Result -> Int

-- | Labels and frequencies found during all successful tests
[labels] :: Result -> [(String, Double)]

-- | Printed output
[output] :: Result -> String

-- | The default test arguments
stdArgs :: Args

-- | Tests a property, using test arguments, and prints the results to
--   <tt>stdout</tt>.
quickCheckWith :: Testable prop => Args -> prop -> IO ()

-- | Tests a property, using test arguments, produces a test result, and
--   prints the results to <tt>stdout</tt>.
quickCheckWithResult :: Testable prop => Args -> prop -> IO Result

-- | Tests a property, produces a test result, and prints the results to
--   <tt>stdout</tt>.
quickCheckResult :: Testable prop => prop -> IO Result

-- | Tests a property and prints the results and all test cases generated
--   to <tt>stdout</tt>. This is just a convenience function that means the
--   same as <tt><a>quickCheck</a> . <a>verbose</a></tt>.
verboseCheck :: Testable prop => prop -> IO ()

-- | Tests a property, using test arguments, and prints the results and all
--   test cases generated to <tt>stdout</tt>. This is just a convenience
--   function that combines <a>quickCheckWith</a> and <a>verbose</a>.
verboseCheckWith :: Testable prop => Args -> prop -> IO ()

-- | Tests a property, using test arguments, produces a test result, and
--   prints the results and all test cases generated to <tt>stdout</tt>.
--   This is just a convenience function that combines
--   <a>quickCheckWithResult</a> and <a>verbose</a>.
verboseCheckWithResult :: Testable prop => Args -> prop -> IO Result

-- | Tests a property, produces a test result, and prints the results and
--   all test cases generated to <tt>stdout</tt>. This is just a
--   convenience function that combines <a>quickCheckResult</a> and
--   <a>verbose</a>.
verboseCheckResult :: Testable prop => prop -> IO Result

-- | Test all properties in the current module. The name of the property
--   must begin with <tt>prop_</tt>. Polymorphic properties will be
--   defaulted to <a>Integer</a>. Returns <a>True</a> if all tests
--   succeeded, <a>False</a> otherwise.
--   
--   To use <a>quickCheckAll</a>, add a definition to your module along the
--   lines of
--   
--   <pre>
--   return []
--   runTests = $quickCheckAll
--   </pre>
--   
--   and then execute <tt>runTests</tt>.
--   
--   Note: the bizarre <tt>return []</tt> in the example above is needed on
--   GHC 7.8; without it, <a>quickCheckAll</a> will not be able to find any
--   of the properties. For the curious, the <tt>return []</tt> is a
--   Template Haskell splice that makes GHC insert the empty list of
--   declarations at that point in the program; GHC typechecks everything
--   before the <tt>return []</tt> before it starts on the rest of the
--   module, which means that the later call to <a>quickCheckAll</a> can
--   see everything that was defined before the <tt>return []</tt>. Yikes!
quickCheckAll :: Q Exp

-- | Test all properties in the current module. This is just a convenience
--   function that combines <a>quickCheckAll</a> and <a>verbose</a>.
--   
--   <a>verboseCheckAll</a> has the same issue with scoping as
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
verboseCheckAll :: Q Exp

-- | Test all properties in the current module, using a custom
--   <a>quickCheck</a> function. The same caveats as with
--   <a>quickCheckAll</a> apply.
--   
--   <tt>$<a>forAllProperties</a></tt> has type <tt>(<a>Property</a> -&gt;
--   <a>IO</a> <a>Result</a>) -&gt; <a>IO</a> <a>Bool</a></tt>. An example
--   invocation is <tt>$<a>forAllProperties</a>
--   <a>quickCheckResult</a></tt>, which does the same thing as
--   <tt>$<a>quickCheckAll</a></tt>.
--   
--   <a>forAllProperties</a> has the same issue with scoping as
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
forAllProperties :: Q Exp

-- | Test a polymorphic property, defaulting all type variables to
--   <a>Integer</a>.
--   
--   Invoke as <tt>$(<a>polyQuickCheck</a> 'prop)</tt>, where <tt>prop</tt>
--   is a property. Note that just evaluating <tt><a>quickCheck</a>
--   prop</tt> in GHCi will seem to work, but will silently default all
--   type variables to <tt>()</tt>!
--   
--   <tt>$(<a>polyQuickCheck</a> 'prop)</tt> means the same as
--   <tt><a>quickCheck</a> $(<a>monomorphic</a> 'prop)</tt>. If you want to
--   supply custom arguments to <a>polyQuickCheck</a>, you will have to
--   combine <a>quickCheckWith</a> and <a>monomorphic</a> yourself.
--   
--   If you want to use <a>polyQuickCheck</a> in the same file where you
--   defined the property, the same scoping problems pop up as in
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
polyQuickCheck :: Name -> ExpQ

-- | Test a polymorphic property, defaulting all type variables to
--   <a>Integer</a>. This is just a convenience function that combines
--   <a>verboseCheck</a> and <a>monomorphic</a>.
--   
--   If you want to use <a>polyVerboseCheck</a> in the same file where you
--   defined the property, the same scoping problems pop up as in
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
polyVerboseCheck :: Name -> ExpQ

-- | Monomorphise an arbitrary property by defaulting all type variables to
--   <a>Integer</a>.
--   
--   For example, if <tt>f</tt> has type <tt><a>Ord</a> a =&gt; [a] -&gt;
--   [a]</tt> then <tt>$(<a>monomorphic</a> 'f)</tt> has type
--   <tt>[<a>Integer</a>] -&gt; [<a>Integer</a>]</tt>.
--   
--   If you want to use <a>monomorphic</a> in the same file where you
--   defined the property, the same scoping problems pop up as in
--   <a>quickCheckAll</a>: see the note there about <tt>return []</tt>.
monomorphic :: Name -> ExpQ

-- | A generator for values of type <tt>a</tt>.
--   
--   The third-party package <a>QuickCheck-GenT</a> provides a monad
--   transformer version of <tt>GenT</tt>.
data Gen a

-- | Generates a random element in the given inclusive range.
choose :: Random a => (a, a) -> Gen a

-- | Randomly uses one of the given generators. The input list must be
--   non-empty.
oneof :: [Gen a] -> Gen a

-- | Chooses one of the given generators, with a weighted random
--   distribution. The input list must be non-empty.
frequency :: [(Int, Gen a)] -> Gen a

-- | Generates one of the given values. The input list must be non-empty.
elements :: [a] -> Gen a

-- | Takes a list of elements of increasing size, and chooses among an
--   initial segment of the list. The size of this initial segment
--   increases with the size parameter. The input list must be non-empty.
growingElements :: [a] -> Gen a

-- | Used to construct generators that depend on the size parameter.
--   
--   For example, <a>listOf</a>, which uses the size parameter as an upper
--   bound on length of lists it generates, can be defined like this:
--   
--   <pre>
--   listOf :: Gen a -&gt; Gen [a]
--   listOf gen = sized $ \n -&gt;
--     do k &lt;- choose (0,n)
--        vectorOf k gen
--   </pre>
--   
--   You can also do this using <a>getSize</a>.
sized :: (Int -> Gen a) -> Gen a

-- | Generates the size parameter. Used to construct generators that depend
--   on the size parameter.
--   
--   For example, <a>listOf</a>, which uses the size parameter as an upper
--   bound on length of lists it generates, can be defined like this:
--   
--   <pre>
--   listOf :: Gen a -&gt; Gen [a]
--   listOf gen = do
--     n &lt;- getSize
--     k &lt;- choose (0,n)
--     vectorOf k gen
--   </pre>
--   
--   You can also do this using <a>sized</a>.
getSize :: Gen Int

-- | Overrides the size parameter. Returns a generator which uses the given
--   size instead of the runtime-size parameter.
resize :: Int -> Gen a -> Gen a

-- | Adjust the size parameter, by transforming it with the given function.
scale :: (Int -> Int) -> Gen a -> Gen a

-- | Generates a value that satisfies a predicate.
suchThat :: Gen a -> (a -> Bool) -> Gen a

-- | Generates a value for which the given function returns a <a>Just</a>,
--   and then applies the function.
suchThatMap :: Gen a -> (a -> Maybe b) -> Gen b

-- | Tries to generate a value that satisfies a predicate. If it fails to
--   do so after enough attempts, returns <tt>Nothing</tt>.
suchThatMaybe :: Gen a -> (a -> Bool) -> Gen (Maybe a)

-- | Generates a list of random length. The maximum length depends on the
--   size parameter.
listOf :: Gen a -> Gen [a]

-- | Generates a non-empty list of random length. The maximum length
--   depends on the size parameter.
listOf1 :: Gen a -> Gen [a]

-- | Generates a list of the given length.
vectorOf :: Int -> Gen a -> Gen [a]

-- | Generates an infinite list.
infiniteListOf :: Gen a -> Gen [a]

-- | Generates a random permutation of the given list.
shuffle :: [a] -> Gen [a]

-- | Generates a random subsequence of the given list.
sublistOf :: [a] -> Gen [a]

-- | Generates a list of a given length.
vector :: Arbitrary a => Int -> Gen [a]

-- | Generates an ordered list.
orderedList :: (Ord a, Arbitrary a) => Gen [a]

-- | Generates an infinite list.
infiniteList :: Arbitrary a => Gen [a]

-- | Run a generator. The size passed to the generator is always 30; if you
--   want another size then you should explicitly use <a>resize</a>.
generate :: Gen a -> IO a

-- | Generates some example values and prints them to <tt>stdout</tt>.
sample :: Show a => Gen a -> IO ()

-- | Generates some example values.
sample' :: Gen a -> IO [a]

-- | Random generation and shrinking of values.
--   
--   QuickCheck provides <tt>Arbitrary</tt> instances for most types in
--   <tt>base</tt>, except those which incur extra dependencies. For a
--   wider range of <tt>Arbitrary</tt> instances see the
--   <a>quickcheck-instances</a> package.
class Arbitrary a

-- | A generator for values of the given type.
--   
--   It is worth spending time thinking about what sort of test data you
--   want - good generators are often the difference between finding bugs
--   and not finding them. You can use <a>sample</a>, <tt>label</tt> and
--   <tt>classify</tt> to check the quality of your test data.
--   
--   There is no generic <tt>arbitrary</tt> implementation included because
--   we don't know how to make a high-quality one. If you want one,
--   consider using the <a>testing-feat</a> package.
--   
--   The <a>QuickCheck manual</a> goes into detail on how to write good
--   generators. Make sure to look at it, especially if your type is
--   recursive!
arbitrary :: Arbitrary a => Gen a

-- | Produces a (possibly) empty list of all the possible immediate shrinks
--   of the given value.
--   
--   The default implementation returns the empty list, so will not try to
--   shrink the value. If your data type has no special invariants, you can
--   enable shrinking by defining <tt>shrink = <a>genericShrink</a></tt>,
--   but by customising the behaviour of <tt>shrink</tt> you can often get
--   simpler counterexamples.
--   
--   Most implementations of <a>shrink</a> should try at least three
--   things:
--   
--   <ol>
--   <li>Shrink a term to any of its immediate subterms. You can use
--   <a>subterms</a> to do this.</li>
--   <li>Recursively apply <a>shrink</a> to all immediate subterms. You can
--   use <a>recursivelyShrink</a> to do this.</li>
--   <li>Type-specific shrinkings such as replacing a constructor by a
--   simpler constructor.</li>
--   </ol>
--   
--   For example, suppose we have the following implementation of binary
--   trees:
--   
--   <pre>
--   data Tree a = Nil | Branch a (Tree a) (Tree a)
--   </pre>
--   
--   We can then define <a>shrink</a> as follows:
--   
--   <pre>
--   shrink Nil = []
--   shrink (Branch x l r) =
--     -- shrink Branch to Nil
--     [Nil] ++
--     -- shrink to subterms
--     [l, r] ++
--     -- recursively shrink subterms
--     [Branch x' l' r' | (x', l', r') &lt;- shrink (x, l, r)]
--   </pre>
--   
--   There are a couple of subtleties here:
--   
--   <ul>
--   <li>QuickCheck tries the shrinking candidates in the order they appear
--   in the list, so we put more aggressive shrinking steps (such as
--   replacing the whole tree by <tt>Nil</tt>) before smaller ones (such as
--   recursively shrinking the subtrees).</li>
--   <li>It is tempting to write the last line as <tt>[Branch x' l' r' | x'
--   &lt;- shrink x, l' &lt;- shrink l, r' &lt;- shrink r]</tt> but this is
--   the <i>wrong thing</i>! It will force QuickCheck to shrink <tt>x</tt>,
--   <tt>l</tt> and <tt>r</tt> in tandem, and shrinking will stop once
--   <i>one</i> of the three is fully shrunk.</li>
--   </ul>
--   
--   There is a fair bit of boilerplate in the code above. We can avoid it
--   with the help of some generic functions. The function
--   <a>genericShrink</a> tries shrinking a term to all of its subterms
--   and, failing that, recursively shrinks the subterms. Using it, we can
--   define <a>shrink</a> as:
--   
--   <pre>
--   shrink x = shrinkToNil x ++ genericShrink x
--     where
--       shrinkToNil Nil = []
--       shrinkToNil (Branch _ l r) = [Nil]
--   </pre>
--   
--   <a>genericShrink</a> is a combination of <a>subterms</a>, which
--   shrinks a term to any of its subterms, and <a>recursivelyShrink</a>,
--   which shrinks all subterms of a term. These may be useful if you need
--   a bit more control over shrinking than <a>genericShrink</a> gives you.
--   
--   A final gotcha: we cannot define <a>shrink</a> as simply
--   <tt><a>shrink</a> x = Nil:<a>genericShrink</a> x</tt> as this shrinks
--   <tt>Nil</tt> to <tt>Nil</tt>, and shrinking will go into an infinite
--   loop.
--   
--   If all this leaves you bewildered, you might try <tt><a>shrink</a> =
--   <a>genericShrink</a></tt> to begin with, after deriving
--   <tt>Generic</tt> for your type. However, if your data type has any
--   special invariants, you will need to check that <a>genericShrink</a>
--   can't break those invariants.
shrink :: Arbitrary a => a -> [a]

-- | Used for random generation of functions.
--   
--   If you are using a recent GHC, there is a default definition of
--   <a>coarbitrary</a> using <a>genericCoarbitrary</a>, so if your type
--   has a <a>Generic</a> instance it's enough to say
--   
--   <pre>
--   instance CoArbitrary MyType
--   </pre>
--   
--   You should only use <a>genericCoarbitrary</a> for data types where
--   equality is structural, i.e. if you can't have two different
--   representations of the same value. An example where it's not safe is
--   sets implemented using binary search trees: the same set can be
--   represented as several different trees. Here you would have to
--   explicitly define <tt>coarbitrary s = coarbitrary (toList s)</tt>.
class CoArbitrary a

-- | Used to generate a function of type <tt>a -&gt; b</tt>. The first
--   argument is a value, the second a generator. You should use
--   <a>variant</a> to perturb the random generator; the goal is that
--   different values for the first argument will lead to different calls
--   to <a>variant</a>. An example will help:
--   
--   <pre>
--   instance CoArbitrary a =&gt; CoArbitrary [a] where
--     coarbitrary []     = <a>variant</a> 0
--     coarbitrary (x:xs) = <a>variant</a> 1 . coarbitrary (x,xs)
--   </pre>
coarbitrary :: CoArbitrary a => a -> Gen b -> Gen b

-- | Used to generate a function of type <tt>a -&gt; b</tt>. The first
--   argument is a value, the second a generator. You should use
--   <a>variant</a> to perturb the random generator; the goal is that
--   different values for the first argument will lead to different calls
--   to <a>variant</a>. An example will help:
--   
--   <pre>
--   instance CoArbitrary a =&gt; CoArbitrary [a] where
--     coarbitrary []     = <a>variant</a> 0
--     coarbitrary (x:xs) = <a>variant</a> 1 . coarbitrary (x,xs)
--   </pre>
coarbitrary :: (CoArbitrary a, Generic a, GCoArbitrary (Rep a)) => a -> Gen b -> Gen b

-- | Lifting of the <a>Arbitrary</a> class to unary type constructors.
class Arbitrary1 f
liftArbitrary :: Arbitrary1 f => Gen a -> Gen (f a)
liftShrink :: Arbitrary1 f => (a -> [a]) -> f a -> [f a]
arbitrary1 :: (Arbitrary1 f, Arbitrary a) => Gen (f a)
shrink1 :: (Arbitrary1 f, Arbitrary a) => f a -> [f a]

-- | Lifting of the <a>Arbitrary</a> class to binary type constructors.
class Arbitrary2 f
liftArbitrary2 :: Arbitrary2 f => Gen a -> Gen b -> Gen (f a b)
liftShrink2 :: Arbitrary2 f => (a -> [a]) -> (b -> [b]) -> f a b -> [f a b]
arbitrary2 :: (Arbitrary2 f, Arbitrary a, Arbitrary b) => Gen (f a b)
shrink2 :: (Arbitrary2 f, Arbitrary a, Arbitrary b) => f a b -> [f a b]

-- | Generates an integral number. The number can be positive or negative
--   and its maximum absolute value depends on the size parameter.
arbitrarySizedIntegral :: Integral a => Gen a

-- | Generates a natural number. The number's maximum value depends on the
--   size parameter.
arbitrarySizedNatural :: Integral a => Gen a

-- | Generates a fractional number. The number can be positive or negative
--   and its maximum absolute value depends on the size parameter.
arbitrarySizedFractional :: Fractional a => Gen a

-- | Generates an integral number from a bounded domain. The number is
--   chosen from the entire range of the type, but small numbers are
--   generated more often than big numbers. Inspired by demands from Phil
--   Wadler.
arbitrarySizedBoundedIntegral :: (Bounded a, Integral a) => Gen a

-- | Generates an integral number. The number is chosen uniformly from the
--   entire range of the type. You may want to use
--   <a>arbitrarySizedBoundedIntegral</a> instead.
arbitraryBoundedIntegral :: (Bounded a, Integral a) => Gen a

-- | Generates an element of a bounded type. The element is chosen from the
--   entire range of the type.
arbitraryBoundedRandom :: (Bounded a, Random a) => Gen a

-- | Generates an element of a bounded enumeration.
arbitraryBoundedEnum :: (Bounded a, Enum a) => Gen a

-- | Generates any Unicode character (but not a surrogate)
arbitraryUnicodeChar :: Gen Char

-- | Generates a random ASCII character (0-127).
arbitraryASCIIChar :: Gen Char

-- | Generates a printable Unicode character.
arbitraryPrintableChar :: Gen Char

-- | Generic CoArbitrary implementation.
genericCoarbitrary :: (Generic a, GCoArbitrary (Rep a)) => a -> Gen b -> Gen b

-- | Shrink a term to any of its immediate subterms, and also recursively
--   shrink all subterms.
genericShrink :: (Generic a, RecursivelyShrink (Rep a), GSubterms (Rep a) a) => a -> [a]

-- | All immediate subterms of a term.
subterms :: (Generic a, GSubterms (Rep a) a) => a -> [a]

-- | Recursively shrink all immediate subterms.
recursivelyShrink :: (Generic a, RecursivelyShrink (Rep a)) => a -> [a]

-- | Returns no shrinking alternatives.
shrinkNothing :: a -> [a]

-- | Shrink a list of values given a shrinking function for individual
--   values.
shrinkList :: (a -> [a]) -> [a] -> [[a]]

-- | Map a shrink function to another domain. This is handy if your data
--   type has special invariants, but is <i>almost</i> isomorphic to some
--   other type.
--   
--   <pre>
--   shrinkOrderedList :: (Ord a, Arbitrary a) =&gt; [a] -&gt; [[a]]
--   shrinkOrderedList = shrinkMap sort id
--   
--   shrinkSet :: (Ord a, Arbitrary a) =&gt; Set a -&gt; Set [a]
--   shrinkSet = shrinkMap fromList toList
--   </pre>
shrinkMap :: Arbitrary a => (a -> b) -> (b -> a) -> b -> [b]

-- | Non-overloaded version of <a>shrinkMap</a>.
shrinkMapBy :: (a -> b) -> (b -> a) -> (a -> [a]) -> b -> [b]

-- | Shrink an integral number.
shrinkIntegral :: Integral a => a -> [a]

-- | Shrink a fraction.
shrinkRealFrac :: RealFrac a => a -> [a]

-- | Modifies a generator using an integer seed.
variant :: Integral n => n -> Gen a -> Gen a

-- | A <a>coarbitrary</a> implementation for integral numbers.
coarbitraryIntegral :: Integral a => a -> Gen b -> Gen b

-- | A <a>coarbitrary</a> implementation for real numbers.
coarbitraryReal :: Real a => a -> Gen b -> Gen b

-- | <a>coarbitrary</a> helper for lazy people :-).
coarbitraryShow :: Show a => a -> Gen b -> Gen b

-- | A <a>coarbitrary</a> implementation for enums.
coarbitraryEnum :: Enum a => a -> Gen b -> Gen b

-- | Combine two generator perturbing functions, for example the results of
--   calls to <a>variant</a> or <a>coarbitrary</a>.

-- | <i>Deprecated: Use ordinary function composition instead</i>
(><) :: (Gen a -> Gen a) -> (Gen a -> Gen a) -> (Gen a -> Gen a)

-- | <tt>Blind x</tt>: as x, but x does not have to be in the <a>Show</a>
--   class.
newtype Blind a
Blind :: a -> Blind a
[getBlind] :: Blind a -> a

-- | <tt>Fixed x</tt>: as x, but will not be shrunk.
newtype Fixed a
Fixed :: a -> Fixed a
[getFixed] :: Fixed a -> a

-- | <tt>Ordered xs</tt>: guarantees that xs is ordered.
newtype OrderedList a
Ordered :: [a] -> OrderedList a
[getOrdered] :: OrderedList a -> [a]

-- | <tt>NonEmpty xs</tt>: guarantees that xs is non-empty.
newtype NonEmptyList a
NonEmpty :: [a] -> NonEmptyList a
[getNonEmpty] :: NonEmptyList a -> [a]

-- | <tt>Positive x</tt>: guarantees that <tt>x &gt; 0</tt>.
newtype Positive a
Positive :: a -> Positive a
[getPositive] :: Positive a -> a

-- | <tt>NonZero x</tt>: guarantees that <tt>x /= 0</tt>.
newtype NonZero a
NonZero :: a -> NonZero a
[getNonZero] :: NonZero a -> a

-- | <tt>NonNegative x</tt>: guarantees that <tt>x &gt;= 0</tt>.
newtype NonNegative a
NonNegative :: a -> NonNegative a
[getNonNegative] :: NonNegative a -> a

-- | <tt>Large x</tt>: by default, QuickCheck generates <a>Int</a>s drawn
--   from a small range. <tt>Large Int</tt> gives you values drawn from the
--   entire range instead.
newtype Large a
Large :: a -> Large a
[getLarge] :: Large a -> a

-- | <tt>Small x</tt>: generates values of <tt>x</tt> drawn from a small
--   range. The opposite of <a>Large</a>.
newtype Small a
Small :: a -> Small a
[getSmall] :: Small a -> a

-- | <tt>Smart _ x</tt>: tries a different order when shrinking.
data Smart a
Smart :: Int -> a -> Smart a

-- | <tt>Shrink2 x</tt>: allows 2 shrinking steps at the same time when
--   shrinking x
newtype Shrink2 a
Shrink2 :: a -> Shrink2 a
[getShrink2] :: Shrink2 a -> a

-- | <tt>Shrinking _ x</tt>: allows for maintaining a state during
--   shrinking.
data Shrinking s a
Shrinking :: s -> a -> Shrinking s a
class ShrinkState s a
shrinkInit :: ShrinkState s a => a -> s
shrinkState :: ShrinkState s a => a -> s -> [(a, s)]

-- | <tt>ASCIIString</tt>: generates an ASCII string.
newtype ASCIIString
ASCIIString :: String -> ASCIIString
[getASCIIString] :: ASCIIString -> String

-- | <tt>UnicodeString</tt>: generates a unicode String. The string will
--   not contain surrogate pairs.
newtype UnicodeString
UnicodeString :: String -> UnicodeString
[getUnicodeString] :: UnicodeString -> String

-- | <tt>PrintableString</tt>: generates a printable unicode String. The
--   string will not contain surrogate pairs.
newtype PrintableString
PrintableString :: String -> PrintableString
[getPrintableString] :: PrintableString -> String

-- | Generation of random shrinkable, showable functions.
--   
--   To generate random values of type <tt><a>Fun</a> a b</tt>, you must
--   have an instance <tt><a>Function</a> a</tt>.
--   
--   See also <a>applyFun</a>, and <a>Fn</a> with GHC &gt;= 7.8.
data Fun a b

-- | Extracts the value of a function.
--   
--   <a>Fn</a> is the pattern equivalent of this function.
--   
--   <pre>
--   prop :: Fun String Integer -&gt; Bool
--   prop f = applyFun f "banana" == applyFun f "monkey"
--         || applyFun f "banana" == applyFun f "elephant"
--   </pre>
applyFun :: Fun a b -> (a -> b)

-- | Extracts the value of a binary function.
--   
--   <a>Fn2</a> is the pattern equivalent of this function.
--   
--   <pre>
--   prop_zipWith :: Fun (Int, Bool) Char -&gt; [Int] -&gt; [Bool] -&gt; Bool
--   prop_zipWith f xs ys = zipWith (applyFun2 f) xs ys == [ applyFun2 f x y | (x, y) &lt;- zip xs ys]
--   </pre>
applyFun2 :: Fun (a, b) c -> (a -> b -> c)

-- | Extracts the value of a ternary function. <a>Fn3</a> is the pattern
--   equivalent of this function.
applyFun3 :: Fun (a, b, c) d -> (a -> b -> c -> d)

-- | A modifier for testing functions.
--   
--   <pre>
--   prop :: Fun String Integer -&gt; Bool
--   prop (Fn f) = f "banana" == f "monkey"
--              || f "banana" == f "elephant"
--   </pre>

-- | A modifier for testing binary functions.
--   
--   <pre>
--   prop_zipWith :: Fun (Int, Bool) Char -&gt; [Int] -&gt; [Bool] -&gt; Bool
--   prop_zipWith (Fn2 f) xs ys = zipWith f xs ys == [ f x y | (x, y) &lt;- zip xs ys]
--   </pre>

-- | A modifier for testing ternary functions.

-- | The class <tt>Function a</tt> is used for random generation of
--   showable functions of type <tt>a -&gt; b</tt>.
--   
--   There is a default implementation for <a>function</a>, which you can
--   use if your type has structural equality. Otherwise, you can normally
--   use <a>functionMap</a> or <a>functionShow</a>.
class Function a
function :: Function a => (a -> b) -> (a :-> b)
function :: (Function a, Generic a, GFunction (Rep a)) => (a -> b) -> (a :-> b)

-- | The basic building block for <a>Function</a> instances. Provides a
--   <a>Function</a> instance by mapping to and from a type that already
--   has a <a>Function</a> instance.
functionMap :: Function b => (a -> b) -> (b -> a) -> (a -> c) -> (a :-> c)

-- | The type of properties.
data Property

-- | The class of properties, i.e., types which QuickCheck knows how to
--   test. Typically a property will be a function returning <a>Bool</a> or
--   <a>Property</a>.
--   
--   If a property does no quantification, i.e. has no parameters and
--   doesn't use <a>forAll</a>, it will only be tested once. This may not
--   be what you want if your property is an <tt>IO Bool</tt>. You can
--   change this behaviour using the <a>again</a> combinator.
class Testable prop

-- | Convert the thing to a property.
property :: Testable prop => prop -> Property

-- | Explicit universal quantification: uses an explicitly given test case
--   generator.
forAll :: (Show a, Testable prop) => Gen a -> (a -> prop) -> Property

-- | Like <a>forAll</a>, but tries to shrink the argument for failing test
--   cases.
forAllShrink :: (Show a, Testable prop) => Gen a -> (a -> [a]) -> (a -> prop) -> Property

-- | Shrinks the argument to a property if it fails. Shrinking is done
--   automatically for most types. This function is only needed when you
--   want to override the default behavior.
shrinking :: Testable prop => (a -> [a]) -> a -> (a -> prop) -> Property

-- | Implication for properties: The resulting property holds if the first
--   argument is <a>False</a> (in which case the test case is discarded),
--   or if the given property holds.
(==>) :: Testable prop => Bool -> prop -> Property
infixr 0 ==>

-- | Like <a>==</a>, but prints a counterexample when it fails.
(===) :: (Eq a, Show a) => a -> a -> Property
infix 4 ===

-- | Checks that a value is total, i.e., doesn't crash when evaluated.
total :: NFData a => a -> Property

-- | Do I/O inside a property.
--   
--   Warning: any random values generated inside of the argument to
--   <tt>ioProperty</tt> will not currently be shrunk. For best results,
--   generate all random values before calling <tt>ioProperty</tt>.
ioProperty :: Testable prop => IO prop -> Property

-- | Prints out the generated testcase every time the property is tested.
--   Only variables quantified over <i>inside</i> the <a>verbose</a> are
--   printed.
verbose :: Testable prop => prop -> Property

-- | Modifies a property so that it only will be tested once. Opposite of
--   <a>again</a>.
once :: Testable prop => prop -> Property

-- | Modifies a property so that it will be tested repeatedly. Opposite of
--   <a>once</a>.
again :: Testable prop => prop -> Property

-- | Configures how many times a property will be tested.
--   
--   For example,
--   
--   <pre>
--   quickCheck (withMaxSuccess 1000 p)
--   </pre>
--   
--   will test <tt>p</tt> up to 1000 times.
withMaxSuccess :: Testable prop => Int -> prop -> Property

-- | Considers a property failed if it does not complete within the given
--   number of microseconds.
within :: Testable prop => Int -> prop -> Property

-- | Disables shrinking for a property altogether.
noShrinking :: Testable prop => prop -> Property

-- | Nondeterministic choice: <tt>p1</tt> <a>.&amp;.</a> <tt>p2</tt> picks
--   randomly one of <tt>p1</tt> and <tt>p2</tt> to test. If you test the
--   property 100 times it makes 100 random choices.
(.&.) :: (Testable prop1, Testable prop2) => prop1 -> prop2 -> Property
infixr 1 .&.

-- | Conjunction: <tt>p1</tt> <a>.&amp;&amp;.</a> <tt>p2</tt> passes if
--   both <tt>p1</tt> and <tt>p2</tt> pass.
(.&&.) :: (Testable prop1, Testable prop2) => prop1 -> prop2 -> Property
infixr 1 .&&.

-- | Take the conjunction of several properties.
conjoin :: Testable prop => [prop] -> Property

-- | Disjunction: <tt>p1</tt> <a>.||.</a> <tt>p2</tt> passes unless
--   <tt>p1</tt> and <tt>p2</tt> simultaneously fail.
(.||.) :: (Testable prop1, Testable prop2) => prop1 -> prop2 -> Property
infixr 1 .||.

-- | Take the disjunction of several properties.
disjoin :: Testable prop => [prop] -> Property

-- | Adds the given string to the counterexample if the property fails.
counterexample :: Testable prop => String -> prop -> Property

-- | Adds the given string to the counterexample if the property fails.

-- | <i>Deprecated: Use counterexample instead</i>
printTestCase :: Testable prop => String -> prop -> Property

-- | Performs an <a>IO</a> action after the last failure of a property.
whenFail :: Testable prop => IO () -> prop -> Property

-- | Performs an <a>IO</a> action every time a property fails. Thus, if
--   shrinking is done, this can be used to keep track of the failures
--   along the way.
whenFail' :: Testable prop => IO () -> prop -> Property

-- | Indicates that a property is supposed to fail. QuickCheck will report
--   an error if it does not fail.
expectFailure :: Testable prop => prop -> Property

-- | Attaches a label to a property. This is used for reporting test case
--   distribution.
--   
--   For example:
--   
--   <pre>
--   prop_reverse_reverse :: [Int] -&gt; Property
--   prop_reverse_reverse xs =
--     label ("length of input is " ++ show (length xs)) $
--       reverse (reverse xs) === xs
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_reverse_reverse
--   +++ OK, passed 100 tests:
--   7% length of input is 7
--   6% length of input is 3
--   5% length of input is 4
--   4% length of input is 6
--   ...
--   </pre>
label :: Testable prop => String -> prop -> Property

-- | Attaches a label to a property. This is used for reporting test case
--   distribution.
--   
--   <pre>
--   collect x = label (show x)
--   </pre>
--   
--   For example:
--   
--   <pre>
--   prop_reverse_reverse :: [Int] -&gt; Property
--   prop_reverse_reverse xs =
--     collect (length xs) $
--       reverse (reverse xs) === xs
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_reverse_reverse
--   +++ OK, passed 100 tests:
--   7% 7
--   6% 3
--   5% 4
--   4% 6
--   ...
--   </pre>
collect :: (Show a, Testable prop) => a -> prop -> Property

-- | Records how many test cases satisfy a given condition.
--   
--   For example:
--   
--   <pre>
--   prop_sorted_sort :: [Int] -&gt; Property
--   prop_sorted_sort xs =
--     sorted xs ==&gt;
--     classify (length xs &gt; 1) "non-trivial" $
--     sort xs === xs
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_sorted_sort
--   +++ OK, passed 100 tests (22% non-trivial).
--   </pre>
classify :: Testable prop => Bool -> String -> prop -> Property

-- | Checks that at least the given proportion of <i>successful</i> test
--   cases belong to the given class. Discarded tests (i.e. ones with a
--   false precondition) do not affect coverage.
--   
--   For example:
--   
--   <pre>
--   prop_sorted_sort :: [Int] -&gt; Property
--   prop_sorted_sort xs =
--     sorted xs ==&gt;
--     cover (length xs &gt; 1) 50 "non-trivial" $
--     sort xs === xs
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; quickCheck prop_sorted_sort
--   *** Insufficient coverage after 100 tests (only 24% non-trivial, not 50%).
--   </pre>
cover :: Testable prop => Bool -> Int -> String -> prop -> Property

-- | If a property returns <a>Discard</a>, the current test case is
--   discarded, the same as if a precondition was false.
data Discard
Discard :: Discard

-- | A special exception that makes QuickCheck discard the test case.
--   Normally you should use <tt>==&gt;</tt>, but if for some reason this
--   isn't possible (e.g. you are deep inside a generator), use
--   <a>discard</a> instead.
discard :: a

-- | Changes the maximum test case size for a property.
mapSize :: Testable prop => (Int -> Int) -> prop -> Property
