-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Half-precision floating-point
--   
--   Half-precision floating-point
@package half
@version 0.2.2.3


-- | Half-precision floating-point values. These arise commonly in GPU work
--   and it is useful to be able to compute them and compute with them on
--   the CPU as well.
module Numeric.Half
newtype {-# CTYPE "unsigned short" #-} Half
Half :: CUShort -> Half
[getHalf] :: Half -> CUShort

-- | Is this <a>Half</a> equal to 0?
isZero :: Half -> Bool

-- | Convert a <a>Half</a> to a <a>Float</a> while preserving NaN
fromHalf :: Half -> Float

-- | Convert a <a>Float</a> to a <a>Half</a> with proper rounding, while
--   preserving NaN and dealing appropriately with infinity
toHalf :: Float -> Half

-- | Positive infinity

-- | Negative infinity

-- | Quiet NaN

-- | Signalling NaN

-- | Smallest positive half

-- | Smallest positive normalized half

-- | Largest positive half

-- | Smallest positive e for which half (1.0 + e) != half (1.0)

-- | Number of base 10 digits that can be represented without change
instance Foreign.Storable.Storable Numeric.Half.Half
instance GHC.Show.Show Numeric.Half.Half
instance GHC.Read.Read Numeric.Half.Half
instance GHC.Classes.Eq Numeric.Half.Half
instance GHC.Classes.Ord Numeric.Half.Half
instance GHC.Real.Real Numeric.Half.Half
instance GHC.Real.Fractional Numeric.Half.Half
instance GHC.Real.RealFrac Numeric.Half.Half
instance GHC.Float.Floating Numeric.Half.Half
instance GHC.Float.RealFloat Numeric.Half.Half
instance GHC.Num.Num Numeric.Half.Half
