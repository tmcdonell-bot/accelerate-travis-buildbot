-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings for the CUFFT library
--   
--   This library contains FFI bindings to the CUFFT library, which
--   provides highly optimised, FFTW compatible, Fast-Fourier Transform
--   (FFT) implementations for NVIDIA GPUs. The cuFFT library is part of
--   the CUDA developer toolkit.
--   
--   <a>http://developer.nvidia.com/cuda-downloads</a>
--   
--   See the <a>travis-ci.org</a> build matrix for tested CUDA library
--   versions.
@package cufft
@version 0.9.0.1


module Foreign.CUDA.FFT.Error

-- | Error codes used by cuFFT library functions
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#cufftresult</a>
data Result
Success :: Result
InvalidPlan :: Result
AllocFailed :: Result
InvalidType :: Result
InvalidValue :: Result
InternalError :: Result
ExecFailed :: Result
SetupFailed :: Result
InvalidSize :: Result
UnalignedData :: Result
IncompleteParameterList :: Result
InvalidDevice :: Result
ParseError :: Result
NoWorkspace :: Result
NotImplemented :: Result
LicenseError :: Result
NotSupported :: Result

-- | Describe an error code
describe :: Result -> String
data CUFFTException
ExitCode :: Result -> CUFFTException
UserError :: String -> CUFFTException

-- | Raise a CUFFTException in the IO Monad
cufftError :: String -> IO a

-- | Return the results of a function on successful execution, otherwise
--   throw an exception with an error string associated with the return
--   code
resultIfOk :: (Result, a) -> IO a

-- | Throw an exception with an error string associated with an
--   unsuccessful return code, otherwise return unit.
nothingIfOk :: Result -> IO ()
checkStatus :: CInt -> IO ()
instance GHC.Show.Show Foreign.CUDA.FFT.Error.Result
instance GHC.Classes.Eq Foreign.CUDA.FFT.Error.Result
instance GHC.Exception.Type.Exception Foreign.CUDA.FFT.Error.CUFFTException
instance GHC.Show.Show Foreign.CUDA.FFT.Error.CUFFTException
instance GHC.Enum.Enum Foreign.CUDA.FFT.Error.Result


module Foreign.CUDA.FFT.Plan

-- | A handle used to store and access cuFFT plans.
--   
--   A handle is created by the FFT planning functions (e.g. <a>plan1D</a>)
--   and used during execution of the transforms (e.g. <a>execC2C</a>).
--   
--   The handle may be reused, but should be <a>destroy</a>ed once it is no
--   longer required, in order to release associated GPU memory and other
--   resources.
newtype Handle
Handle :: CInt -> Handle
[useHandle] :: Handle -> CInt

-- | The cuFFT library supports complex- and real-valued transforms. This
--   data type enumerates the kind of transform a plan will execute.
--   
--   Key:
--   
--   <ul>
--   <li><b>R</b>: real (32-bit float)</li>
--   <li><b>D</b>: double (64-bit float)</li>
--   <li><b>C</b>: single-precision complex numbers (32-bit,
--   interleaved)</li>
--   <li><b>Z</b>: double-precision complex numbers (64-bit,
--   interleaved)</li>
--   </ul>
data Type
C2C :: Type
R2C :: Type
C2R :: Type
Z2Z :: Type
D2Z :: Type
Z2D :: Type

-- | Creates a 1D FFT plan configured for a specified signal size and data
--   type.
--   
--   The third argument tells cuFFT how many 1D transforms, of size given
--   by the first argument, to configure. Consider using <a>planMany</a>
--   for multiple transforms instead.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan1d</a>
plan1D :: Int -> Type -> Int -> IO Handle

-- | Creates a 2D FFT plan configuration for a specified signal size and
--   data type.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan2d</a>
plan2D :: Int -> Int -> Type -> IO Handle

-- | Creates a 3D FFT plan configuration for a specified signal size and
--   data type.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan3d</a>
plan3D :: Int -> Int -> Int -> Type -> IO Handle

-- | Creates a batched plan configuration for many signals of a specified
--   size and data type in either 1, 2 or 3 dimensions.
--   
--   This function supports more complicated input and output data layouts.
--   If not specified (that is, <a>Nothing</a> is passed for either of the
--   second or third parameters), contiguous data arrays are assumed.
--   
--   Data layout configuration consists of three fields, respectively:
--   
--   <ul>
--   <li>storage dimensions of the input data in memory</li>
--   <li>the distance between two successive input elements in the
--   innermost (least significant) dimension</li>
--   <li>the distance between the first element of two consecutive signals
--   in a batch of the input data</li>
--   </ul>
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplanmany</a>
planMany :: [Int] -> Maybe ([Int], Int, Int) -> Maybe ([Int], Int, Int) -> Type -> Int -> IO Handle

-- | Release resources associated with the given plan. This function should
--   be called once a plan is no longer needed, to avoid wasting GPU
--   memory.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftdestroy</a>
destroy :: Handle -> IO ()
instance GHC.Show.Show Foreign.CUDA.FFT.Plan.Type
instance GHC.Classes.Eq Foreign.CUDA.FFT.Plan.Type
instance GHC.Enum.Enum Foreign.CUDA.FFT.Plan.Type


module Foreign.CUDA.FFT.Execute

-- | FFT transform direction
data Mode
Forward :: Mode
Inverse :: Mode

-- | Executes a single-precision complex-to-complex transform.
--   
--   If the input and output device pointers are the same, an in-place
--   transform is executed.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftexecc2c-cufftexecz2z</a>
execC2C :: Handle -> Mode -> DevicePtr (Complex Float) -> DevicePtr (Complex Float) -> IO ()

-- | Executes a double-precision complex-to-complex transform.
--   
--   If the input and output device pointers are the same, an in-place
--   transform is executed.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftexecc2c-cufftexecz2z</a>
execZ2Z :: Handle -> Mode -> DevicePtr (Complex Double) -> DevicePtr (Complex Double) -> IO ()

-- | Executes a single-precision real-to-complex, implicitly forward,
--   transform.
--   
--   If the input and output device pointers refer to the same address, an
--   in-place transform is executed.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftexecr2c-cufftexecd2z</a>
execR2C :: Handle -> DevicePtr Float -> DevicePtr (Complex Float) -> IO ()

-- | Executes a double-precision real-to-complex, implicitly forward,
--   transform.
--   
--   If the input and output device pointers refer to the same address, an
--   in-place transform is executed.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftexecr2c-cufftexecd2z</a>
execD2Z :: Handle -> DevicePtr Double -> DevicePtr (Complex Double) -> IO ()

-- | Executes a single-precision complex-to-real, implicitly forward,
--   transform.
--   
--   If the input and output device pointers refer to the same address, an
--   in-place transform is executed.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftexecc2r-cufftexecz2d</a>
execC2R :: Handle -> DevicePtr (Complex Float) -> DevicePtr Float -> IO ()

-- | Executes a double-precision complex-to-real, implicitly forward,
--   transform.
--   
--   If the input and output device pointers refer to the same address, an
--   in-place transform is executed.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftexecc2r-cufftexecz2d</a>
execZ2D :: Handle -> DevicePtr (Complex Double) -> DevicePtr Double -> IO ()
instance GHC.Enum.Bounded Foreign.CUDA.FFT.Execute.Mode
instance GHC.Show.Show Foreign.CUDA.FFT.Execute.Mode
instance GHC.Classes.Eq Foreign.CUDA.FFT.Execute.Mode
instance GHC.Enum.Enum Foreign.CUDA.FFT.Execute.Mode


module Foreign.CUDA.FFT.Stream

-- | A processing stream. All operations in a stream are synchronous and
--   executed in sequence, but operations in different non-default streams
--   may happen out-of-order or concurrently with one another.
--   
--   Use <tt>Event</tt>s to synchronise operations between streams.
data Stream

-- | Set the execution stream which all subsequent cuFFT library functions
--   will execute with. This enables the activity in this execution stream
--   (e.g. kernel launches and data transfer) to overlap with activity in
--   other execution streams. The association remains until the plan is
--   destroyed or the stream is changed.
--   
--   If not set, functions execute in the default stream, which never
--   overlaps with any other operation.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftsetstream</a>
setStream :: Handle -> Stream -> IO ()


-- | The cuFFT library is an implementation of Fast Fourier Transform (FFT)
--   operations for NVIDIA GPUs.
--   
--   The FFT is a divide-and-conquer algorithm for efficiently computing
--   discrete Fourier transforms of real- or complex-valued data sets. It
--   is one of the most important and widely used numerical algorithms in
--   computational physics and general signals processing. The cuFFT
--   library provides a simple interface for computing FFTs on a NVIDIA
--   GPU.
--   
--   To use operations from the cuFFT library, the user must allocate the
--   required arrays in the GPU memory space, fill them with data, call the
--   desired sequence of cuFFT library functions, then copy the results
--   from the GPU memory back to the host.
--   
--   The <a>cuda</a> package can be used for writing to and retrieving data
--   from the GPU.
--   
--   <ul>
--   <li><i><i>Example</i></i></li>
--   </ul>
--   
--   _TODO_
--   
--   <ul>
--   <li><i><i>Additional information</i></i></li>
--   </ul>
--   
--   For more information, see the NVIDIA cuFFT documentation:
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html</a>
module Foreign.CUDA.FFT

-- | The cuFFT library supports complex- and real-valued transforms. This
--   data type enumerates the kind of transform a plan will execute.
--   
--   Key:
--   
--   <ul>
--   <li><b>R</b>: real (32-bit float)</li>
--   <li><b>D</b>: double (64-bit float)</li>
--   <li><b>C</b>: single-precision complex numbers (32-bit,
--   interleaved)</li>
--   <li><b>Z</b>: double-precision complex numbers (64-bit,
--   interleaved)</li>
--   </ul>
data Type
C2C :: Type
R2C :: Type
C2R :: Type
Z2Z :: Type
D2Z :: Type
Z2D :: Type

-- | A handle used to store and access cuFFT plans.
--   
--   A handle is created by the FFT planning functions (e.g. <a>plan1D</a>)
--   and used during execution of the transforms (e.g. <a>execC2C</a>).
--   
--   The handle may be reused, but should be <a>destroy</a>ed once it is no
--   longer required, in order to release associated GPU memory and other
--   resources.
newtype Handle
Handle :: CInt -> Handle

-- | Creates a 1D FFT plan configured for a specified signal size and data
--   type.
--   
--   The third argument tells cuFFT how many 1D transforms, of size given
--   by the first argument, to configure. Consider using <a>planMany</a>
--   for multiple transforms instead.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan1d</a>
plan1D :: Int -> Type -> Int -> IO Handle

-- | Creates a 2D FFT plan configuration for a specified signal size and
--   data type.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan2d</a>
plan2D :: Int -> Int -> Type -> IO Handle

-- | Creates a 3D FFT plan configuration for a specified signal size and
--   data type.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplan3d</a>
plan3D :: Int -> Int -> Int -> Type -> IO Handle

-- | Creates a batched plan configuration for many signals of a specified
--   size and data type in either 1, 2 or 3 dimensions.
--   
--   This function supports more complicated input and output data layouts.
--   If not specified (that is, <a>Nothing</a> is passed for either of the
--   second or third parameters), contiguous data arrays are assumed.
--   
--   Data layout configuration consists of three fields, respectively:
--   
--   <ul>
--   <li>storage dimensions of the input data in memory</li>
--   <li>the distance between two successive input elements in the
--   innermost (least significant) dimension</li>
--   <li>the distance between the first element of two consecutive signals
--   in a batch of the input data</li>
--   </ul>
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftplanmany</a>
planMany :: [Int] -> Maybe ([Int], Int, Int) -> Maybe ([Int], Int, Int) -> Type -> Int -> IO Handle

-- | Release resources associated with the given plan. This function should
--   be called once a plan is no longer needed, to avoid wasting GPU
--   memory.
--   
--   
--   <a>http://docs.nvidia.com/cuda/cufft/index.html#function-cufftdestroy</a>
destroy :: Handle -> IO ()
data CUFFTException
ExitCode :: Result -> CUFFTException
UserError :: String -> CUFFTException
