-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Pretty printer with annotation support
--   
--   Wadler/Leijen pretty printer with support for annotations and
--   modernized API. Annotations are useful for coloring. See
--   wl-pprint-console.
@package wl-pprint-annotated
@version 0.1.0.1


-- | Pretty print module based on Daan Leijen's implementation of Philip
--   Wadler's "prettier printer"
--   
--   <pre>
--   "A prettier printer"
--   Draft paper, April 1997, revised March 1998.
--   <a>http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf</a>
--   </pre>
--   
--   This is an implementation of the pretty printing combinators described
--   by Philip Wadler (1997). In their bare essence, the combinators of
--   Wadler are not expressive enough to describe some commonly occurring
--   layouts. The PPrint library adds new primitives to describe these
--   layouts and works well in practice.
--   
--   The library is based on a single way to concatenate documents, which
--   is associative and has both a left and right unit. This simple design
--   leads to an efficient and short implementation. The simplicity is
--   reflected in the predictable behaviour of the combinators which make
--   them easy to use in practice.
--   
--   A thorough description of the primitive combinators and their
--   implementation can be found in Philip Wadler's paper (1997). Additions
--   and the main differences with his original paper are:
--   
--   <ul>
--   <li>The nil document is called <a>mempty</a>. We cannot use
--   <a>empty</a> for compatibility with base.</li>
--   <li>The operator <a>&lt;/&gt;</a> is used for soft line breaks.</li>
--   <li>There are three new primitives: <a>align</a>, <a>fill</a> and
--   <a>fillBreak</a>. These are very useful in practice.</li>
--   <li>Lots of other useful combinators, like <a>fillSep</a> and
--   <a>list</a>.</li>
--   <li>There are three renderers, 'renderPretty/renderPrettyDefault' and
--   <a>renderSmart</a> for pretty printing and <a>renderCompact</a> for
--   compact output. The pretty printing algorithm also uses a ribbon-width
--   now for even prettier output.</li>
--   <li>There are display routines <a>displayS</a> and <a>display</a> for
--   strings, <a>displayT</a> for lazy text, <a>displayIO</a> for file
--   based output. Generalized display routines for display with
--   annotations are provided, i.e., <a>displayDecoratedA</a> and
--   <a>displayDecorated</a>. Furthermore <a>displaySpans</a> exists which
--   creates a monoid and a SpanList of the annotations.</li>
--   <li>There is a <a>Pretty</a> class which creates documents without
--   annotations.</li>
--   <li>The implementation uses optimised representations and strictness
--   annotations.</li>
--   <li>There is the wl-pprint-console package, based on this package,
--   which provides additional display routines, e.g., colorful output
--   using ANSI escape sequences.</li>
--   </ul>
module Text.PrettyPrint.Annotated.WL

-- | The data type <tt>Doc</tt> represents pretty documents.
--   
--   <tt>Doc</tt> is an instance of the <a>Show</a> class. <tt>(show
--   doc)</tt> pretty prints document <tt>doc</tt> with a page width of 100
--   characters and a ribbon width of 40 characters.
--   
--   <pre>
--   show (text "hello" &lt;#&gt; text "world")
--   </pre>
--   
--   Which would return the string "hello\nworld", i.e.
--   
--   <pre>
--   hello
--   world
--   </pre>
data Doc a
Empty :: Doc a
Char :: {-# UNPACK #-} !Char -> Doc a
Text :: {-# UNPACK #-} !Int -> String -> Doc a
Line :: Doc a
FlatAlt :: Doc a -> Doc a -> Doc a
Cat :: Doc a -> Doc a -> Doc a
Nest :: {-# UNPACK #-} !Int -> Doc a -> Doc a
Union :: Doc a -> Doc a -> Doc a
Annotate :: a -> Doc a -> Doc a
Column :: (Int -> Doc a) -> Doc a
Nesting :: (Int -> Doc a) -> Doc a
Columns :: (Maybe Int -> Doc a) -> Doc a
Ribbon :: (Maybe Int -> Doc a) -> Doc a

-- | The action <tt>(putDoc doc)</tt> pretty prints document <tt>doc</tt>
--   to the standard output, with a page width of 100 characters and a
--   ribbon width of 40 characters.
--   
--   <pre>
--   main :: IO ()
--   main = do{ putDoc (text "hello" &lt;+&gt; text "world") }
--   </pre>
--   
--   Which would output
--   
--   <pre>
--   hello world
--   </pre>
putDoc :: Doc a -> IO ()

-- | <tt>(hPutDoc handle doc)</tt> pretty prints document <tt>doc</tt> to
--   the file handle <tt>handle</tt> with a page width of 100 characters
--   and a ribbon width of 40 characters.
--   
--   <pre>
--   main = do{ handle &lt;- openFile "MyFile" WriteMode
--            ; hPutDoc handle (vcat (map text
--                              ["vertical","text"]))
--            ; hClose handle
--            }
--   </pre>
hPutDoc :: Handle -> Doc a -> IO ()

-- | The document <tt>(char c)</tt> contains the literal character
--   <tt>c</tt>. The character shouldn't be a newline (<tt>'\n'</tt>), the
--   function <a>line</a> should be used for line breaks.
char :: Char -> Doc a

-- | The document <tt>(text s)</tt> contains the literal string <tt>s</tt>.
--   The string shouldn't contain any newline (<tt>'\n'</tt>) characters.
--   If the string contains newline characters, the function <a>pretty</a>
--   should be used.
text :: String -> Doc a

-- | The document <tt>(nest i x)</tt> renders document <tt>x</tt> with the
--   current indentation level increased by i (See also <a>hang</a>,
--   <a>align</a> and <a>indent</a>).
--   
--   <pre>
--   nest 2 (text "hello" &lt;#&gt; text "world") &lt;#&gt; text "!"
--   </pre>
--   
--   outputs as:
--   
--   <pre>
--   hello
--     world
--   !
--   </pre>
nest :: Int -> Doc a -> Doc a

-- | The <tt>line</tt> document advances to the next line and indents to
--   the current nesting level. Document <tt>line</tt> behaves like
--   <tt>(text " ")</tt> if the line break is undone by <a>group</a>.
line :: Doc a

-- | The <tt>linebreak</tt> document advances to the next line and indents
--   to the current nesting level. Document <tt>linebreak</tt> behaves like
--   <a>mempty</a> if the line break is undone by <a>group</a>.
linebreak :: Doc a

-- | The <tt>group</tt> combinator is used to specify alternative layouts.
--   The document <tt>(group x)</tt> undoes all line breaks in document
--   <tt>x</tt>. The resulting line is added to the current line if that
--   fits the page. Otherwise, the document <tt>x</tt> is rendered without
--   any changes.
group :: Doc a -> Doc a

-- | The document <tt>softline</tt> behaves like <a>space</a> if the
--   resulting output fits the page, otherwise it behaves like <a>line</a>.
--   
--   <pre>
--   softline = group line
--   </pre>
softline :: Doc a

-- | The document <tt>softbreak</tt> behaves like <a>mempty</a> if the
--   resulting output fits the page, otherwise it behaves like <a>line</a>.
--   
--   <pre>
--   softbreak  = group linebreak
--   </pre>
softbreak :: Doc a

-- | A linebreak that can not be flattened; it is guaranteed to be rendered
--   as a newline.
hardline :: Doc a

-- | <tt>flatAlt</tt> creates a document that changes when flattened;
--   normally it is rendered as the first argument, but when flattened is
--   rendered as the second.
flatAlt :: Doc a -> Doc a -> Doc a
flatten :: Doc a -> Doc a

-- | Annotate a document.
annotate :: a -> Doc a -> Doc a

-- | Remove the annotations from a document.
noAnnotate :: Doc a -> Doc a'
docMapAnn :: (a -> Doc a' -> Doc a') -> Doc a -> Doc a'
simpleDocMapAnn :: (r -> a -> r) -> (r -> a -> r) -> (r -> SimpleDoc a' -> SimpleDoc a') -> (r -> SimpleDoc a' -> SimpleDoc a') -> r -> SimpleDoc a -> SimpleDoc a'
simpleDocScanAnn :: (r -> a -> r) -> r -> SimpleDoc a -> SimpleDoc r

-- | The document <tt>(align x)</tt> renders document <tt>x</tt> with the
--   nesting level set to the current column. It is used for example to
--   implement <a>hang</a>.
--   
--   As an example, we will put a document right above another one,
--   regardless of the current nesting level:
--   
--   <pre>
--   x $$ y = align (x &lt;#&gt; y)
--   </pre>
--   
--   <pre>
--   test = text "hi" &lt;+&gt; (text "nice" $$ text "world")
--   </pre>
--   
--   which will be layed out as:
--   
--   <pre>
--   hi nice
--      world
--   </pre>
align :: Doc a -> Doc a

-- | The hang combinator implements hanging indentation. The document
--   <tt>(hang i x)</tt> renders document <tt>x</tt> with a nesting level
--   set to the current column plus <tt>i</tt>. The following example uses
--   hanging indentation for some text:
--   
--   <pre>
--   test  = hang 4 (fillSep (map text
--           (words "the hang combinator indents these words !")))
--   </pre>
--   
--   Which lays out on a page with a width of 20 characters as:
--   
--   <pre>
--   the hang combinator
--       indents these
--       words !
--   </pre>
--   
--   The <tt>hang</tt> combinator is implemented as:
--   
--   <pre>
--   hang i x  = align (nest i x)
--   </pre>
hang :: Int -> Doc a -> Doc a

-- | The document <tt>(indent i x)</tt> indents document <tt>x</tt> with
--   <tt>i</tt> spaces.
--   
--   <pre>
--   test  = indent 4 (fillSep (map text
--           (words "the indent combinator indents these words !")))
--   </pre>
--   
--   Which lays out with a page width of 20 as:
--   
--   <pre>
--   the indent
--   combinator
--   indents these
--   words !
--   </pre>
indent :: Int -> Doc a -> Doc a

-- | The document <tt>(encloseSep l r sep xs)</tt> concatenates the
--   documents <tt>xs</tt> separated by <tt>sep</tt> and encloses the
--   resulting document by <tt>l</tt> and <tt>r</tt>. The documents are
--   rendered horizontally if that fits the page. Otherwise they are
--   aligned vertically. All separators are put in front of the elements.
--   For example, the combinator <a>list</a> can be defined with
--   <tt>encloseSep</tt>:
--   
--   <pre>
--   list xs = encloseSep lbracket rbracket comma xs
--   test    = text "list" &lt;+&gt; (list (map int [10,200,3000]))
--   </pre>
--   
--   Which is layed out with a page width of 20 as:
--   
--   <pre>
--   list [10, 200, 3000]
--   </pre>
--   
--   But when the page width is 15, it is layed out as:
--   
--   <pre>
--   list [ 10
--        , 200
--        , 3000 ]
--   </pre>
encloseSep :: Foldable f => Doc a -> Doc a -> Doc a -> f (Doc a) -> Doc a

-- | The document <tt>(list xs)</tt> comma separates the documents
--   <tt>xs</tt> and encloses them in square brackets. The documents are
--   rendered horizontally if that fits the page. Otherwise they are
--   aligned vertically. All comma separators are put in front of the
--   elements.
list :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(tupled xs)</tt> comma separates the documents
--   <tt>xs</tt> and encloses them in parenthesis. The documents are
--   rendered horizontally if that fits the page. Otherwise they are
--   aligned vertically. All comma separators are put in front of the
--   elements.
tupled :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(semiBraces xs)</tt> separates the documents
--   <tt>xs</tt> with semi colons and encloses them in braces. The
--   documents are rendered horizontally if that fits the page. Otherwise
--   they are aligned vertically. All semi colons are put in front of the
--   elements.
semiBraces :: Foldable f => f (Doc a) -> Doc a
(<+>) :: Doc a -> Doc a -> Doc a
infixr 6 <+>

-- | The document <tt>(x &lt;/&gt; y)</tt> concatenates document <tt>x</tt>
--   and <tt>y</tt> with a <a>softline</a> in between. This effectively
--   puts <tt>x</tt> and <tt>y</tt> either next to each other (with a
--   <tt>space</tt> in between) or underneath each other. (infixr 5)
(</>) :: Doc a -> Doc a -> Doc a
infixr 5 </>

-- | The document <tt>(x &lt;//&gt; y)</tt> concatenates document
--   <tt>x</tt> and <tt>y</tt> with a <a>softbreak</a> in between. This
--   effectively puts <tt>x</tt> and <tt>y</tt> either right next to each
--   other or underneath each other. (infixr 5)
(<//>) :: Doc a -> Doc a -> Doc a
infixr 5 <//>

-- | The document <tt>(x &lt;#&gt; y)</tt> concatenates document <tt>x</tt>
--   and <tt>y</tt> with a <a>line</a> in between. (infixr 5)
(<#>) :: Doc a -> Doc a -> Doc a
infixr 5 <#>

-- | The document <tt>(x &lt;##&gt; y)</tt> concatenates document
--   <tt>x</tt> and <tt>y</tt> with a <tt>linebreak</tt> in between.
--   (infixr 5)
(<##>) :: Doc a -> Doc a -> Doc a
infixr 5 <##>

-- | The document <tt>(hsep xs)</tt> concatenates all documents <tt>xs</tt>
--   horizontally with <tt>(&lt;+&gt;)</tt>.
hsep :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(vsep xs)</tt> concatenates all documents <tt>xs</tt>
--   vertically with <tt>(&lt;#&gt;)</tt>. If a <a>group</a> undoes the
--   line breaks inserted by <tt>vsep</tt>, all documents are separated
--   with a space.
--   
--   <pre>
--   someText = map text (words ("text to lay out"))
--   
--   test     = text "some" &lt;+&gt; vsep someText
--   </pre>
--   
--   This is layed out as:
--   
--   <pre>
--   some text
--   to
--   lay
--   out
--   </pre>
--   
--   The <a>align</a> combinator can be used to align the documents under
--   their first element
--   
--   <pre>
--   test = text "some" &lt;+&gt; align (vsep someText)
--   </pre>
--   
--   Which is printed as:
--   
--   <pre>
--   some text
--        to
--        lay
--        out
--   </pre>
vsep :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(fillSep xs)</tt> concatenates documents <tt>xs</tt>
--   horizontally with <tt>(&lt;+&gt;)</tt> as long as its fits the page,
--   then inserts a <tt>line</tt> and continues doing that for all
--   documents in <tt>xs</tt>.
--   
--   <pre>
--   fillSep xs  = foldr (&lt;/&gt;) mempty xs
--   </pre>
fillSep :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(sep xs)</tt> concatenates all documents <tt>xs</tt>
--   either horizontally with <tt>(&lt;+&gt;)</tt>, if it fits the page, or
--   vertically with <tt>(&lt;#&gt;)</tt>.
--   
--   <pre>
--   sep xs  = group (vsep xs)
--   </pre>
sep :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(hcat xs)</tt> concatenates all documents <tt>xs</tt>
--   horizontally with <tt>(&lt;&gt;)</tt>.
hcat :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(vcat xs)</tt> concatenates all documents <tt>xs</tt>
--   vertically with <tt>(&lt;##&gt;)</tt>. If a <a>group</a> undoes the
--   line breaks inserted by <tt>vcat</tt>, all documents are directly
--   concatenated.
vcat :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(fillCat xs)</tt> concatenates documents <tt>xs</tt>
--   horizontally with <tt>(&lt;&gt;)</tt> as long as its fits the page,
--   then inserts a <tt>linebreak</tt> and continues doing that for all
--   documents in <tt>xs</tt>.
--   
--   <pre>
--   fillCat xs  = foldr (&lt;//&gt;) mempty xs
--   </pre>
fillCat :: Foldable f => f (Doc a) -> Doc a

-- | The document <tt>(cat xs)</tt> concatenates all documents <tt>xs</tt>
--   either horizontally with <tt>(&lt;&gt;)</tt>, if it fits the page, or
--   vertically with <tt>(&lt;##&gt;)</tt>.
--   
--   <pre>
--   cat xs  = group (vcat xs)
--   </pre>
cat :: Foldable f => f (Doc a) -> Doc a

-- | <tt>(punctuate p xs)</tt> concatenates all documents in <tt>xs</tt>
--   with document <tt>p</tt> except for the last document.
--   
--   <pre>
--   someText = map text ["words","in","a","tuple"]
--   test     = parens (align (cat (punctuate comma someText)))
--   </pre>
--   
--   This is layed out on a page width of 20 as:
--   
--   <pre>
--   (words,in,a,tuple)
--   </pre>
--   
--   But when the page width is 15, it is layed out as:
--   
--   <pre>
--   (words,
--    in,
--    a,
--    tuple)
--   </pre>
--   
--   (If you want put the commas in front of their elements instead of at
--   the end, you should use <a>tupled</a> or, in general,
--   <a>encloseSep</a>.)
punctuate :: Traversable f => Doc a -> f (Doc a) -> f (Doc a)

-- | The document <tt>(fill i x)</tt> renders document <tt>x</tt>. It then
--   appends <tt>space</tt>s until the width is equal to <tt>i</tt>. If the
--   width of <tt>x</tt> is already larger, nothing is appended. This
--   combinator is quite useful in practice to output a list of bindings.
--   The following example demonstrates this.
--   
--   <pre>
--   types  = [("mempty","Doc a")
--            ,("nest","Int -&gt; Doc a -&gt; Doc a")
--            ,("linebreak","Doc a")]
--   
--   ptype (name,tp)
--          = fill 6 (text name) &lt;+&gt; text "::" &lt;+&gt; text tp
--   
--   test   = text "let" &lt;+&gt; align (vcat (map ptype types))
--   </pre>
--   
--   Which is layed out as:
--   
--   <pre>
--   let mempty  :: Doc a
--       nest   :: Int -&gt; Doc a -&gt; Doc a
--       linebreak :: Doc a
--   </pre>
fill :: Int -> Doc a -> Doc a

-- | The document <tt>(fillBreak i x)</tt> first renders document
--   <tt>x</tt>. It then appends <tt>space</tt>s until the width is equal
--   to <tt>i</tt>. If the width of <tt>x</tt> is already larger than
--   <tt>i</tt>, the nesting level is increased by <tt>i</tt> and a
--   <tt>line</tt> is appended. When we redefine <tt>ptype</tt> in the
--   previous example to use <tt>fillBreak</tt>, we get a useful variation
--   of the previous output:
--   
--   <pre>
--   ptype (name,tp)
--          = fillBreak 6 (text name) &lt;+&gt; text "::" &lt;+&gt; text tp
--   </pre>
--   
--   The output will now be:
--   
--   <pre>
--   let mempty  :: Doc a
--       nest   :: Int -&gt; Doc a -&gt; Doc a
--       linebreak
--              :: Doc a
--   </pre>
fillBreak :: Int -> Doc a -> Doc a

-- | The document <tt>(enclose l r x)</tt> encloses document <tt>x</tt>
--   between documents <tt>l</tt> and <tt>r</tt> using <tt>(&lt;&gt;)</tt>.
--   
--   <pre>
--   enclose l r x   = l &lt;&gt; x &lt;&gt; r
--   </pre>
enclose :: Doc a -> Doc a -> Doc a -> Doc a

-- | Document <tt>(squotes x)</tt> encloses document <tt>x</tt> with single
--   quotes "'".
squotes :: Doc a -> Doc a

-- | Document <tt>(dquotes x)</tt> encloses document <tt>x</tt> with double
--   quotes '"'.
dquotes :: Doc a -> Doc a

-- | Document <tt>(parens x)</tt> encloses document <tt>x</tt> in
--   parenthesis, "(" and ")".
parens :: Doc a -> Doc a

-- | Document <tt>(angles x)</tt> encloses document <tt>x</tt> in angles,
--   "&lt;" and "&gt;".
angles :: Doc a -> Doc a

-- | Document <tt>(braces x)</tt> encloses document <tt>x</tt> in braces,
--   "{" and "}".
braces :: Doc a -> Doc a

-- | Document <tt>(brackets x)</tt> encloses document <tt>x</tt> in square
--   brackets, "[" and "]".
brackets :: Doc a -> Doc a

-- | The document <tt>lparen</tt> contains a left parenthesis, "(".
lparen :: Doc a

-- | The document <tt>rparen</tt> contains a right parenthesis, ")".
rparen :: Doc a

-- | The document <tt>langle</tt> contains a left angle, "&lt;".
langle :: Doc a

-- | The document <tt>rangle</tt> contains a right angle, "&gt;".
rangle :: Doc a

-- | The document <tt>lbrace</tt> contains a left brace, "{".
lbrace :: Doc a

-- | The document <tt>rbrace</tt> contains a right brace, "}".
rbrace :: Doc a

-- | The document <tt>lbracket</tt> contains a left square bracket, "[".
lbracket :: Doc a

-- | The document <tt>rbracket</tt> contains a right square bracket, "]".
rbracket :: Doc a

-- | The document <tt>squote</tt> contains a single quote, "'".
squote :: Doc a

-- | The document <tt>dquote</tt> contains a double quote, '"'.
dquote :: Doc a

-- | The document <tt>semi</tt> contains a semi colon, ";".
semi :: Doc a

-- | The document <tt>colon</tt> contains a colon, ":".
colon :: Doc a

-- | The document <tt>comma</tt> contains a comma, ",".
comma :: Doc a

-- | The document <tt>space</tt> contains a single space, " ".
--   
--   <pre>
--   x &lt;+&gt; y   = x &lt;&gt; space &lt;&gt; y
--   </pre>
space :: Doc a

-- | The document <tt>dot</tt> contains a single dot, ".".
dot :: Doc a

-- | The document <tt>backslash</tt> contains a back slash, "\".
backslash :: Doc a

-- | The document <tt>equals</tt> contains an equal sign, "=".
equals :: Doc a

-- | The member <tt>prettyList</tt> is only used to define the <tt>instance
--   Pretty a =&gt; Pretty [a]</tt>. In normal circumstances only the
--   <tt>pretty</tt> function is used.
class Pretty a
pretty :: Pretty a => a -> Doc b
prettyList :: Pretty a => [a] -> Doc b
pretty :: (Pretty a, Show a) => a -> Doc b

-- | The data type <tt>SimpleDoc</tt> represents rendered documents and is
--   used by the display functions.
--   
--   The <tt>Int</tt> in <tt>SText</tt> contains the length of the string.
--   The <tt>Int</tt> in <tt>SLine</tt> contains the indentation for that
--   line. The library provides two default display functions
--   <a>displayS</a> and <a>displayIO</a>. You can provide your own display
--   function by writing a function from a <tt>SimpleDoc</tt> to your own
--   output format.
data SimpleDoc a
SEmpty :: SimpleDoc a
SChar :: {-# UNPACK #-} !Char -> SimpleDoc a -> SimpleDoc a
SText :: {-# UNPACK #-} !Int -> String -> SimpleDoc a -> SimpleDoc a
SLine :: {-# UNPACK #-} !Int -> SimpleDoc a -> SimpleDoc a
SPushAnn :: a -> SimpleDoc a -> SimpleDoc a
SPopAnn :: a -> SimpleDoc a -> SimpleDoc a

-- | This is the default pretty printer which is used by <a>show</a>,
--   <a>putDoc</a> and <a>hPutDoc</a>. This routine uses a page width of
--   100 characters and a ribbon width of 40 characters.
renderPrettyDefault :: Doc a -> SimpleDoc a

-- | This is the default pretty printer which is used by <a>show</a>,
--   <a>putDoc</a> and <a>hPutDoc</a>. <tt>(renderPretty ribbonfrac width
--   x)</tt> renders document <tt>x</tt> with a page width of
--   <tt>width</tt> and a ribbon width of <tt>(ribbonfrac * width)</tt>
--   characters. The ribbon width is the maximal amount of non-indentation
--   characters on a line. The parameter <tt>ribbonfrac</tt> should be
--   between <tt>0.0</tt> and <tt>1.0</tt>. If it is lower or higher, the
--   ribbon width will be 0 or <tt>width</tt> respectively.
renderPretty :: Float -> Int -> Doc a -> SimpleDoc a

-- | <tt>(renderCompact x)</tt> renders document <tt>x</tt> without adding
--   any indentation. Since no 'pretty' printing is involved, this renderer
--   is very fast. The resulting output contains fewer characters than a
--   pretty printed version and can be used for output that is read by
--   other programs.
renderCompact :: Doc a -> SimpleDoc a

-- | A slightly smarter rendering algorithm with more lookahead. It
--   provides provide earlier breaking on deeply nested structures. For
--   example, consider this python-ish pseudocode:
--   <tt>fun(fun(fun(fun(fun([abcdefg, abcdefg])))))</tt> If we put a
--   softbreak (+ nesting 2) after each open parenthesis, and align the
--   elements of the list to match the opening brackets, this will render
--   with <tt>renderPretty</tt> and a page width of 20c as: <tt>
--   fun(fun(fun(fun(fun([ | abcdef, | abcdef, ] ))))) | </tt> Where the
--   20c. boundary has been marked with |. Because <tt>renderPretty</tt>
--   only uses one-line lookahead, it sees that the first line fits, and is
--   stuck putting the second and third lines after the 20c mark. In
--   contrast, <tt>renderSmart</tt> will continue to check the potential
--   document up to the end of the indentation level. Thus, it will format
--   the document as:
--   
--   <pre>
--   fun(                |
--     fun(              |
--       fun(            |
--         fun(          |
--           fun([       |
--                 abcdef,
--                 abcdef,
--               ]       |
--     )))))             |
--   </pre>
--   
--   Which fits within the 20c. mark. In addition, <tt>renderSmart</tt>
--   uses this lookahead to minimize the number of lines printed, leading
--   to more compact and visually appealing output. Consider this example
--   using the same syntax as above: <tt>aaaaaaaaaaa([abc, def, ghi])</tt>
--   When rendered with <tt>renderPretty</tt> and a page width of 20c, we
--   get: <tt> aaaaaaaaaaa([ abc , def , ghi ]) </tt> Whereas when rendered
--   with <tt>renderSmart</tt> and a page width of 20c, we get: <tt>
--   aaaaaaaaaaa( [abc, def, ghi]) </tt>
renderSmart :: Int -> Doc a -> SimpleDoc a

-- | <tt>(display simpleDoc)</tt> takes the output <tt>simpleDoc</tt> from
--   a rendering function and outputs a <a>String</a>. Along the way, all
--   annotations are discarded.
display :: SimpleDoc a -> String

-- | <tt>(displayS simpleDoc)</tt> takes the output <tt>simpleDoc</tt> from
--   a rendering function and transforms it to a <a>ShowS</a> type (for use
--   in the <a>Show</a> class). Along the way, all annotations are
--   discarded.
displayS :: SimpleDoc a -> ShowS

-- | <tt>(display simpleDoc)</tt> takes the output <tt>simpleDoc</tt> from
--   a rendering function and outputs a <a>Text</a>. Along the way, all
--   annotations are discarded.
displayT :: SimpleDoc a -> Text

-- | <tt>(displayIO handle simpleDoc)</tt> writes <tt>simpleDoc</tt> to the
--   file handle <tt>handle</tt>, discarding all annotations. This function
--   is used for example by <a>hPutDoc</a>:
--   
--   <pre>
--   hPutDoc handle doc = displayIO handle (renderPrettyDefault doc)
--   </pre>
displayIO :: Handle -> SimpleDoc a -> IO ()

-- | Display a rendered document.
--   
--   This function takes a means of pushing an annotated region, a means of
--   ending it, and a means of displaying a string, with effects <tt>f</tt>
--   to display or compute the output <tt>o</tt>.
displayDecoratedA :: (Applicative f, Monoid o) => (a -> f o) -> (a -> f o) -> (String -> f o) -> SimpleDoc a -> f o

-- | Display a rendered document.
--   
--   This function takes a means of pushing an annotated region, a means of
--   ending it, and a means of displaying a string to compute the output
--   <tt>o</tt>.
displayDecorated :: Monoid o => (a -> o) -> (a -> o) -> (String -> o) -> SimpleDoc a -> o

-- | The type alias <tt>SpanList</tt> is used by <tt>displaySpan</tt>
--   
--   First element is the starting position, second the length and third
--   the annotation at the given range.
type SpanList a = [(Int, Int, a)]

-- | Generate a pair of a string and a list of source span/annotation pairs
displaySpans :: Monoid o => (String -> o) -> SimpleDoc a -> (o, SpanList a)
column :: (Int -> Doc a) -> Doc a
nesting :: (Int -> Doc a) -> Doc a
width :: Doc a -> (Int -> Doc a) -> Doc a
columns :: (Maybe Int -> Doc a) -> Doc a
ribbon :: (Maybe Int -> Doc a) -> Doc a

-- | Identity of <a>mappend</a>
mempty :: Monoid a => a

-- | An associative operation.
(<>) :: Semigroup a => a -> a -> a
infixr 6 <>
instance Data.Traversable.Traversable Text.PrettyPrint.Annotated.WL.SimpleDoc
instance Data.Foldable.Foldable Text.PrettyPrint.Annotated.WL.SimpleDoc
instance GHC.Base.Functor Text.PrettyPrint.Annotated.WL.SimpleDoc
instance GHC.Generics.Generic (Text.PrettyPrint.Annotated.WL.SimpleDoc a)
instance GHC.Base.Functor Text.PrettyPrint.Annotated.WL.Doc
instance GHC.Generics.Generic (Text.PrettyPrint.Annotated.WL.Doc a)
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Text.PrettyPrint.Annotated.WL.SimpleDoc a)
instance Data.String.IsString (Text.PrettyPrint.Annotated.WL.Doc a)
instance Text.PrettyPrint.Annotated.WL.Pretty (Text.PrettyPrint.Annotated.WL.Doc a)
instance Text.PrettyPrint.Annotated.WL.Pretty a => Text.PrettyPrint.Annotated.WL.Pretty [a]
instance Text.PrettyPrint.Annotated.WL.Pretty Data.Text.Internal.Text
instance Text.PrettyPrint.Annotated.WL.Pretty Data.Text.Internal.Lazy.Text
instance Text.PrettyPrint.Annotated.WL.Pretty ()
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Types.Char
instance Text.PrettyPrint.Annotated.WL.Pretty a => Text.PrettyPrint.Annotated.WL.Pretty (Data.Sequence.Internal.Seq a)
instance Text.PrettyPrint.Annotated.WL.Pretty a => Text.PrettyPrint.Annotated.WL.Pretty (GHC.Base.NonEmpty a)
instance (Text.PrettyPrint.Annotated.WL.Pretty a, Text.PrettyPrint.Annotated.WL.Pretty b) => Text.PrettyPrint.Annotated.WL.Pretty (a, b)
instance (Text.PrettyPrint.Annotated.WL.Pretty a, Text.PrettyPrint.Annotated.WL.Pretty b, Text.PrettyPrint.Annotated.WL.Pretty c) => Text.PrettyPrint.Annotated.WL.Pretty (a, b, c)
instance Text.PrettyPrint.Annotated.WL.Pretty a => Text.PrettyPrint.Annotated.WL.Pretty (GHC.Maybe.Maybe a)
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Types.Bool
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Types.Int
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Int.Int8
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Int.Int16
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Int.Int32
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Int.Int64
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Types.Word
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Word.Word8
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Word.Word16
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Word.Word32
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Word.Word64
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Integer.Type.Integer
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Natural.Natural
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Types.Float
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Types.Double
instance Text.PrettyPrint.Annotated.WL.Pretty GHC.Real.Rational
instance GHC.Base.Semigroup (Text.PrettyPrint.Annotated.WL.Doc a)
instance GHC.Base.Monoid (Text.PrettyPrint.Annotated.WL.Doc a)
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Text.PrettyPrint.Annotated.WL.Doc a)
instance GHC.Show.Show (Text.PrettyPrint.Annotated.WL.Doc a)
