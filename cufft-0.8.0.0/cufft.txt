-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings for the CUFFT library
--   
--   This library contains FFI bindings to the CUFFT library, which
--   provides highly optimised, FFTW compatible, Fast-Fourier Transform
--   (FFT) implementations for NVIDIA GPUs. The CUFFT library is part of
--   the CUDA developer toolkit.
--   
--   <a>http://developer.nvidia.com/cuda-downloads</a>
--   
--   See the <a>travis-ci.org</a> build matrix for tested CUDA library
--   versions.
@package cufft
@version 0.8.0.0

module Foreign.CUDA.FFT
data Result
Success :: Result
InvalidPlan :: Result
AllocFailed :: Result
InvalidType :: Result
InvalidValue :: Result
InternalError :: Result
ExecFailed :: Result
SetupFailed :: Result
InvalidSize :: Result
UnalignedData :: Result
IncompleteParameterList :: Result
InvalidDevice :: Result
ParseError :: Result
NoWorkspace :: Result
NotImplemented :: Result
LicenseError :: Result
NotSupported :: Result
describe :: Result -> String
data CUFFTException
ExitCode :: Result -> CUFFTException
UserError :: String -> CUFFTException

-- | Raise a CUFFTException in the IO Monad
cufftError :: String -> IO a

-- | Return the results of a function on successful execution, otherwise
--   throw an exception with an error string associated with the return
--   code
resultIfOk :: (Result, a) -> IO a

-- | Throw an exception with an error string associated with an
--   unsuccessful return code, otherwise return unit.
nothingIfOk :: Result -> IO ()

-- | Executes a single-precision complex-to-complex transform plan in the
--   transform direction specified by the fourth argument
execC2C :: Handle -> DevicePtr Float -> DevicePtr Float -> Int -> IO ()

-- | Executes a double-precision complex-to-complex transform plan in the
--   transform direction specified by the fourth argument
execZ2Z :: Handle -> DevicePtr Double -> DevicePtr Double -> Int -> IO ()

-- | Executes a single-precision real-to-complex (implicitly forward)
--   transform plan
execR2C :: Handle -> DevicePtr Float -> DevicePtr Float -> IO ()

-- | Executes a double-precision real-to-complex (implicitly forward)
--   transform plan
execD2Z :: Handle -> DevicePtr Double -> DevicePtr Double -> IO ()

-- | Executes a single-precision complex-to-real (implicitly forward)
--   transform plan
execC2R :: Handle -> DevicePtr Float -> DevicePtr Float -> IO ()

-- | Executes a double-precision complex-to-real (implicitly forward)
--   transform plan
execZ2D :: Handle -> DevicePtr Double -> DevicePtr Double -> IO ()

-- | Operations handle
newtype Handle
Handle :: (CInt) -> Handle
[useHandle] :: Handle -> (CInt)
data Type
C2C :: Type
R2C :: Type
C2R :: Type
Z2Z :: Type
D2Z :: Type
Z2D :: Type
plan1D :: Int -> Type -> Int -> IO Handle

-- | Creates a 2D FFT plan configuration for a specified signal size and
--   data type.
plan2D :: Int -> Int -> Type -> IO Handle

-- | Creates a 3D FFT plan configuration for a specified signal size and
--   data type.
plan3D :: Int -> Int -> Int -> Type -> IO Handle

-- | Creates a batched plan configuration for many signals of a specified
--   size in either 1, 2 or 3 dimensions, and of the specified data type.
planMany :: [Int] -> Maybe ([Int], Int, Int) -> Maybe ([Int], Int, Int) -> Type -> Int -> IO Handle

-- | This function releases hardware resources used by the CUFFT plan. The
--   release of GPU resources may be deferred until the application exits.
--   This function is usually the last call with a particular handle to the
--   CUFFT plan.
destroy :: Handle -> IO ()

-- | Associates a CUDA stream with a CUFFT plan. All kernel launches made
--   during plan execution are now done through the associated stream,
--   enabling overlap with activity in other streams (e.g. data copying).
--   The association remains until the plan is destroyed or the stream is
--   changed.
setStream :: Handle -> Stream -> IO ()
