-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Fixed-length large integer arithmetic for Accelerate
--   
--   This package provides fixed-length large integer types and arithmetic
--   operations for Accelerate. Signed and unsigned 96, 128, 160, 192, 224,
--   256, and 512-bit types are predefined.
--   
--   Refer to the main <i>Accelerate</i> package for more information:
--   <a>http://hackage.haskell.org/package/accelerate</a>
@package accelerate-bignum
@version 0.1.0.0


-- | Fixed length unsigned word types
module Data.Array.Accelerate.Data.BigWord
type Word96 = BigWord Word32 Word64
type Word128 = BigWord Word64 Word64
type Word160 = BigWord Word32 Word128
type Word192 = BigWord Word64 Word128
type Word224 = BigWord Word32 Word192
type Word256 = BigWord Word128 Word128
type Word512 = BigWord Word256 Word256

-- | Large word of fixed size represented as separate high and low
--   (unsigned) words.
data BigWord hi lo
W2 :: !hi -> !lo -> BigWord hi lo

-- | Addition and multiplication with carry
class Num2 w where {
    type family Signed w;
    type family Unsigned w;
}
signed :: Num2 w => w -> Signed w
unsigned :: Num2 w => w -> Unsigned w
addWithCarry :: Num2 w => w -> w -> (w, Unsigned w)
mulWithCarry :: Num2 w => w -> w -> (w, Unsigned w)


-- | Fixed length signed integer types
module Data.Array.Accelerate.Data.BigInt
type Int96 = BigInt Int32 Word64
type Int128 = BigInt Int64 Word64
type Int160 = BigInt Int32 Word128
type Int192 = BigInt Int64 Word128
type Int224 = BigInt Int32 Word192
type Int256 = BigInt Int128 Word128
type Int512 = BigInt Int256 Word256

-- | Large integers of fixed size represented as separate (signed) high and
--   (unsigned) low words.
data BigInt hi lo
I2 :: !hi -> !lo -> BigInt hi lo

-- | Addition and multiplication with carry
class Num2 w where {
    type family Signed w;
    type family Unsigned w;
}
signed :: Num2 w => w -> Signed w
unsigned :: Num2 w => w -> Unsigned w
addWithCarry :: Num2 w => w -> w -> (w, Unsigned w)
mulWithCarry :: Num2 w => w -> w -> (w, Unsigned w)
