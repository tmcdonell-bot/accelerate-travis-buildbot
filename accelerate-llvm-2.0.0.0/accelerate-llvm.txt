-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Accelerate backend generating LLVM
--   
--   This library implements direct LLVM IR generation for the
--   <i>Accelerate</i> language. For further information, refer to the main
--   <i>Accelerate</i> package:
--   <a>http://hackage.haskell.org/package/accelerate</a>
@package accelerate-llvm
@version 2.0.0.0


module Data.Array.Accelerate.LLVM.CodeGen.Permute

-- | A forward permutation might be specialised to use atomic instructions
--   to perform the read-modify-write of the output array directly, rather
--   than separately acquiring a lock. The basic operation is always
--   provided in case a backend does not support the atomic operation at
--   that type, or if it is executing sequentially.
--   
--   For the atomicRMW case, the function is applied to the new value
--   before feeding to the atomic instruction to combine with the old.
data IRPermuteFun arch aenv t
IRPermuteFun :: IRFun2 arch aenv (e -> e -> e) -> Maybe (RMWOperation, IRFun1 arch aenv (e -> e)) -> IRPermuteFun arch aenv (e -> e -> e)
[combine] :: IRPermuteFun arch aenv (e -> e -> e) -> IRFun2 arch aenv (e -> e -> e)
[atomicRMW] :: IRPermuteFun arch aenv (e -> e -> e) -> Maybe (RMWOperation, IRFun1 arch aenv (e -> e))

-- | Analysis and code generation for forward permutation combination
--   function.
--   
--   Specialisation for atomic operations is currently limited to direct
--   applications of the function; that is, we don't dig down underneath
--   let-bindings.
llvmOfPermuteFun :: Expression arch => arch -> DelayedFun aenv (e -> e -> e) -> Gamma aenv -> IRPermuteFun arch aenv (e -> e -> e)
