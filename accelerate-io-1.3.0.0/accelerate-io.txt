-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read and write Accelerate arrays in various formats
--   
--   This package provides efficient conversion routines between a range of
--   array types and Accelerate arrays.
--   
--   As of version 1.3 this package has been split up into smaller
--   components.
--   
--   Refer to the main <i>Accelerate</i> package for more information:
--   <a>http://hackage.haskell.org/package/accelerate</a>
@package accelerate-io
@version 1.3.0.0


module Data.Array.Accelerate.IO.Foreign.ForeignPtr

-- | A family of types which represent a collection of <a>ForeignPtr</a>s.
--   The structure of the collection depends on the element type
--   <tt>e</tt>.
type family ForeignPtrs e

-- | <i>O(1)</i>. Treat the set of <a>ForeignPtrs</a> as an Accelerate
--   array. The type of elements <tt>e</tt> in the output Accelerate array
--   determines the structure of the collection.
--   
--   Data is considered to be in row-major order. You must ensure that each
--   of the input pointers contains the right number of elements.
--   
--   The data may not be modified through the <a>ForeignPtr</a>s
--   afterwards.
--   
--   You should make sure that the data is suitably aligned.
--   
--   <pre>
--   since 1.1.0.0
--   </pre>
fromForeignPtrs :: (Shape sh, Elt e) => sh -> ForeignPtrs (EltRepr e) -> Array sh e

-- | <i>O(1)</i>. Yield the <a>ForeignPtr</a>s underlying the given
--   Accelerate <a>Array</a>. The element type <tt>e</tt> will determine
--   the structure of the output collection.
--   
--   Data is considered to be in row-major order.
--   
--   <pre>
--   since 1.1.0.0
--   </pre>
toForeignPtrs :: (Shape sh, Elt e) => Array sh e -> ForeignPtrs (EltRepr e)


module Data.Array.Accelerate.IO.Foreign.Ptr

-- | A family of types which represent a collection of <a>Ptr</a>s. The
--   structure of the collection depends on the element type <tt>e</tt>.
type Ptrs e = ArrayPtrs e

-- | <i>O(1)</i>. Treat the set of <a>Ptrs</a> as an Accelerate array. The
--   type of elements <tt>e</tt> in the output Accelerate array determines
--   the structure of the collection.
--   
--   Data is considered to be in row-major order. You must ensure that each
--   of the input pointers contains the right number of elements.
--   
--   The data may not be modified through the <a>Ptrs</a> afterwards.
--   
--   You are responsible for ensuring that the data remains alive for the
--   duration of the Accelerate computation, and for freeing it afterwards.
--   
--   You should make sure that the data is suitably aligned.
--   
--   <pre>
--   since 1.1.0.0
--   </pre>
fromPtrs :: (Shape sh, Elt e) => sh -> Ptrs (EltRepr e) -> Array sh e

-- | <i>O(1)</i>. Yield the underlying <a>Ptrs</a> backing the given
--   Accelerate array. The element type <tt>e</tt> will determine the
--   structure of the output collection.
--   
--   Data is considered to be in row-major order.
--   
--   <pre>
--   since 1.1.0.0
--   </pre>
toPtrs :: (Shape sh, Elt e) => Array sh e -> Ptrs (EltRepr e)
