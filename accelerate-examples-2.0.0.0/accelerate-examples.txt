-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Examples using the Accelerate library
--   
--   This package demonstrates a number of computation kernels and
--   applications showcasing the <i>Accelerate</i> language and associated
--   backend implementations. It is also used for performance and
--   regression testing.
--   
--   Refer to the main <i>Accelerate</i> package for more information:
--   <a>http://hackage.haskell.org/package/accelerate</a>
@package accelerate-examples
@version 2.0.0.0


-- | This module exposes some internal infrastructure that is useful and
--   common to the accelerate-examples test and benchmark program suite.
--   This is not intended for general consumption.
module Data.Array.Accelerate.Examples.Internal

-- | Process the command line arguments and return a tuple consisting of
--   the user options structure, accelerate-examples options (including
--   options for criterion and test-framework), and a list of unrecognised
--   command line arguments.
--   
--   Since criterion and test-framework both bail if they encounter
--   unrecognised options, we run getOpt' ourselves. This means that the
--   error messages might be slightly different.
--   
--   Any command line arguments following a "--" are not processed, but are
--   included as part of the unprocessed arguments returned on output.
parseArgs :: [OptDescr (config -> config)] -> config -> [String] -> [String] -> IO (config, Options, [String])
data Options
optBackend :: ArrowApply cat => Lens cat Options Backend
optTest :: ArrowApply cat => Lens cat Options Bool
optBenchmark :: ArrowApply cat => Lens cat Options Bool
optCodespeed :: ArrowApply cat => Lens cat Options (Maybe String)
optHostname :: ArrowApply cat => Lens cat Options String
optVariant :: ArrowApply cat => Lens cat Options String
optHelp :: ArrowApply cat => Lens cat Options Bool
optCriterion :: ArrowApply cat => Lens cat Options Config
optTestFramework :: ArrowApply cat => Lens cat Options Config

-- | Execute Accelerate expressions
run :: Arrays a => Backend -> Acc a -> a
run1 :: (Arrays a, Arrays b) => Backend -> (Acc a -> Acc b) -> a -> b
run2 :: (Arrays a, Arrays b, Arrays c) => Backend -> (Acc a -> Acc b -> Acc c) -> a -> b -> c

-- | The set of backends available to execute the program.
data Backend
Interpreter :: Backend
CUDA :: Backend
CPU :: Backend
PTX :: Backend
defaultBackend :: Backend
availableBackends :: (options :-> Backend) -> [OptDescr (options -> options)]
concurrentBackends :: Backend -> Maybe Int

-- | Run the given benchmarks, if we have enabled benchmark mode.
runBenchmarks :: Options -> [String] -> [Benchmark] -> IO ()
nf :: NFData b => (a -> b) -> a -> Benchmarkable
whnf :: (a -> b) -> a -> Benchmarkable
nfIO :: NFData a => IO a -> Benchmarkable
whnfIO :: IO a -> Benchmarkable
data Benchmark :: *
env :: NFData env => IO env -> (env -> Benchmark) -> Benchmark
bench :: String -> Benchmarkable -> Benchmark
bgroup :: String -> [Benchmark] -> Benchmark

-- | If accelerate-examples is configured to enable GUI programs, and we
--   are not in benchmarking mode, then execute the given action.
runInteractive :: Options -> [String] -> IO () -> IO ()
data Test :: *

-- | Run the given tests, if enabled.
runTests :: Options -> [String] -> [Test] -> IO ()
data Property :: *
testProperty :: Testable a => TestName -> a -> Test
testGroup :: TestName -> [Test] -> Test

-- | Short hand for a test case that asserts similarity, with the actual
--   value on the right hand side and the expected value on the left.
(~=?) :: (Similar a, Show a) => a -> a -> Property

-- | Short hand for a test case that asserts similarity, with the actual
--   value on the left hand side and the expected value on the right.
(~?=) :: (Similar a, Show a) => a -> a -> Property
type Assertion = IO ()
testCase :: TestName -> Assertion -> Test

-- | Assert that the specified actual value is equal-ish to the expected
--   value. If we are in verbose mode, the output message will contain the
--   expected and actual values.
assertEqual :: (Similar a, Show a) => a -> a -> Assertion
class Similar a where (~=) = (==)
(~=) :: Similar a => a -> a -> Bool

-- | Launch a monitoring server that will collect statistics on the running
--   application. This should be called as soon as the application starts.
--   The program will need to be run with the RTS option -T.
beginMonitoring :: IO ()

-- | A PNRG from indices to variates
type (:~>) sh e = sh -> GenIO -> IO e

-- | Uniformly distributed random variates.
uniform :: (Shape sh, Elt e, Variate e) => sh :~> e

-- | Uniformly distributed random variates in a given range.
uniformR :: (Shape sh, Elt e, Variate e) => (e, e) -> sh :~> e

-- | Generate an array of random values using the supplied generator
--   function. The generator for variates is initialised with a fixed seed.
randomArray :: (Shape sh, Elt e) => sh :~> e -> sh -> Array sh e

-- | Generate an array of random values using a supplied generator function
--   and seed value.
randomArrayWithSeed :: (Shape sh, Elt e) => Seed -> sh :~> e -> sh -> Array sh e

-- | Generate an array of random values using a supplied generator
--   function, initialised with the system's source of pseudo-random
--   numbers.
--   
--   TODO: find a way to do this directly, without going via save/restore.
randomArrayWithSystemRandom :: (Shape sh, Elt e) => sh :~> e -> sh -> IO (Array sh e)

-- | Show a floating point number in scientific notation with a specific
--   base.
showFFloatSIBase :: RealFloat a => Maybe Int -> a -> a -> ShowS
