-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Accelerate backend for multicore CPUs
--   
--   This library implements a backend for the <i>Accelerate</i> language
--   which generates LLVM-IR targeting multicore CPUs. For further
--   information, refer to the main <a>accelerate</a> package.
--   
--   <ul>
--   <li><i><i>Dependencies</i></i></li>
--   </ul>
--   
--   Haskell dependencies are available from Hackage. The following
--   external libraries are alse required:
--   
--   <ul>
--   <li><a>LLVM</a></li>
--   <li><a>libFFI</a></li>
--   </ul>
--   
--   <ul>
--   <li><i><i>Installing LLVM</i></i></li>
--   </ul>
--   
--   <i>Homebrew</i>
--   
--   Example using Homebrew on macOS:
--   
--   <pre>
--   brew install llvm-hs/llvm/llvm-8
--   </pre>
--   
--   <i>Debian &amp; Ubuntu</i>
--   
--   For Debian/Ubuntu based Linux distributions, the LLVM.org website
--   provides binary distribution packages. Check <a>apt.llvm.org</a> for
--   instructions for adding the correct package database for your OS
--   version, and then:
--   
--   <pre>
--   apt-get install llvm-8-dev
--   </pre>
--   
--   <i>Building from source</i>
--   
--   If your OS does not have an appropriate LLVM distribution available,
--   you can also build from source. Detailed build instructions are
--   available on <a>LLVM.org</a>. Make sure to include the cmake build
--   options <tt>-DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON</tt>
--   so that the <tt>libLLVM</tt> shared library will be built.
@package accelerate-llvm-native
@version 1.3.0.0


module Data.Array.Accelerate.LLVM.Native.Plugin

-- | This GHC plugin is required to support ahead-of-time compilation for
--   the accelerate-llvm-native backend. In particular, it tells GHC about
--   the additional object files generated by <a>runQ</a>* which must be
--   linked into the final executable.
--   
--   To use it, add the following to the .cabal file of your project:
--   
--   <pre>
--   ghc-options: -fplugin=Data.Array.Accelerate.LLVM.Native.Plugin
--   </pre>
plugin :: Plugin



-- | <i>Deprecated: This module is obviated by GHC-8.6 and will be removed
--   in future releases</i>
module Data.Array.Accelerate.LLVM.Native.Distribution.Simple

-- | A simple implementation of <tt>main</tt> for a Cabal setup script.
--   This is the same as <a>defaultMain</a>, with added support for
--   building libraries utilising <a>runQ</a>*.
defaultMain :: IO ()

-- | Hooks that correspond to a plain instantiation of the "simple" build
--   system.
simpleUserHooks :: UserHooks
autoconfUserHooks :: UserHooks

-- | Basic autoconf <a>UserHooks</a>:
--   
--   <ul>
--   <li><a>postConf</a> runs <tt>./configure</tt>, if present.</li>
--   <li>the pre-hooks <a>preBuild</a>, <a>preClean</a>, <a>preCopy</a>,
--   <a>preInst</a>, <a>preReg</a> and <a>preUnreg</a> read additional
--   build information from <i>package</i><tt>.buildinfo</tt>, if
--   present.</li>
--   </ul>
--   
--   Thus <tt>configure</tt> can use local system information to generate
--   <i>package</i><tt>.buildinfo</tt> and possibly other files.
defaultUserHooks :: UserHooks

-- | A customizable version of <a>defaultMainNoRead</a> that also takes the
--   command line arguments.
defaultMainWithHooksNoReadArgs :: UserHooks -> GenericPackageDescription -> [String] -> IO ()

-- | A customizable version of <a>defaultMainNoRead</a>.
defaultMainWithHooksNoRead :: UserHooks -> GenericPackageDescription -> IO ()

-- | Like <a>defaultMain</a>, but accepts the package description as input
--   rather than using IO to read it.
defaultMainNoRead :: GenericPackageDescription -> IO ()

-- | A customizable version of <a>defaultMain</a> that also takes the
--   command line arguments.
defaultMainWithHooksArgs :: UserHooks -> [String] -> IO ()

-- | A customizable version of <a>defaultMain</a>.
defaultMainWithHooks :: UserHooks -> IO ()

-- | A version of <a>defaultMain</a> that is passed the command line
--   arguments, rather than getting them from the environment.
defaultMainArgs :: [String] -> IO ()

-- | Empty <a>UserHooks</a> which do nothing.
emptyUserHooks :: UserHooks
type Args = [String]

-- | Hooks allow authors to add specific functionality before and after a
--   command is run, and also to specify additional preprocessors.
--   
--   <ul>
--   <li>WARNING: The hooks interface is under rather constant flux as we
--   try to understand users needs. Setup files that depend on this
--   interface may break in future releases.</li>
--   </ul>
data UserHooks
UserHooks :: (Args -> Bool -> PackageDescription -> LocalBuildInfo -> IO ()) -> IO (Maybe GenericPackageDescription) -> [PPSuffixHandler] -> [Program] -> (Args -> ConfigFlags -> IO HookedBuildInfo) -> ((GenericPackageDescription, HookedBuildInfo) -> ConfigFlags -> IO LocalBuildInfo) -> (Args -> ConfigFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> BuildFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> BuildFlags -> IO ()) -> (Args -> BuildFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> ReplFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> ReplFlags -> [String] -> IO ()) -> (Args -> ReplFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> CleanFlags -> IO HookedBuildInfo) -> (PackageDescription -> () -> UserHooks -> CleanFlags -> IO ()) -> (Args -> CleanFlags -> PackageDescription -> () -> IO ()) -> (Args -> CopyFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> CopyFlags -> IO ()) -> (Args -> CopyFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> InstallFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> InstallFlags -> IO ()) -> (Args -> InstallFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> SDistFlags -> IO HookedBuildInfo) -> (PackageDescription -> Maybe LocalBuildInfo -> UserHooks -> SDistFlags -> IO ()) -> (Args -> SDistFlags -> PackageDescription -> Maybe LocalBuildInfo -> IO ()) -> (Args -> RegisterFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> RegisterFlags -> IO ()) -> (Args -> RegisterFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> RegisterFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> RegisterFlags -> IO ()) -> (Args -> RegisterFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> HscolourFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> HscolourFlags -> IO ()) -> (Args -> HscolourFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> DoctestFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> DoctestFlags -> IO ()) -> (Args -> DoctestFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> HaddockFlags -> IO HookedBuildInfo) -> (PackageDescription -> LocalBuildInfo -> UserHooks -> HaddockFlags -> IO ()) -> (Args -> HaddockFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> TestFlags -> IO HookedBuildInfo) -> (Args -> PackageDescription -> LocalBuildInfo -> UserHooks -> TestFlags -> IO ()) -> (Args -> TestFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> (Args -> BenchmarkFlags -> IO HookedBuildInfo) -> (Args -> PackageDescription -> LocalBuildInfo -> UserHooks -> BenchmarkFlags -> IO ()) -> (Args -> BenchmarkFlags -> PackageDescription -> LocalBuildInfo -> IO ()) -> UserHooks

-- | Used for <tt>./setup test</tt>
[runTests] :: UserHooks -> Args -> Bool -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Read the description file
[readDesc] :: UserHooks -> IO (Maybe GenericPackageDescription)

-- | Custom preprocessors in addition to and overriding
--   <a>knownSuffixHandlers</a>.
[hookedPreProcessors] :: UserHooks -> [PPSuffixHandler]

-- | These programs are detected at configure time. Arguments for them are
--   added to the configure command.
[hookedPrograms] :: UserHooks -> [Program]

-- | Hook to run before configure command
[preConf] :: UserHooks -> Args -> ConfigFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during configure.
[confHook] :: UserHooks -> (GenericPackageDescription, HookedBuildInfo) -> ConfigFlags -> IO LocalBuildInfo

-- | Hook to run after configure command
[postConf] :: UserHooks -> Args -> ConfigFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before build command. Second arg indicates verbosity
--   level.
[preBuild] :: UserHooks -> Args -> BuildFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during build.
[buildHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> BuildFlags -> IO ()

-- | Hook to run after build command. Second arg indicates verbosity level.
[postBuild] :: UserHooks -> Args -> BuildFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before repl command. Second arg indicates verbosity level.
[preRepl] :: UserHooks -> Args -> ReplFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during interpretation.
[replHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> ReplFlags -> [String] -> IO ()

-- | Hook to run after repl command. Second arg indicates verbosity level.
[postRepl] :: UserHooks -> Args -> ReplFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before clean command. Second arg indicates verbosity
--   level.
[preClean] :: UserHooks -> Args -> CleanFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during clean.
[cleanHook] :: UserHooks -> PackageDescription -> () -> UserHooks -> CleanFlags -> IO ()

-- | Hook to run after clean command. Second arg indicates verbosity level.
[postClean] :: UserHooks -> Args -> CleanFlags -> PackageDescription -> () -> IO ()

-- | Hook to run before copy command
[preCopy] :: UserHooks -> Args -> CopyFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during copy.
[copyHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> CopyFlags -> IO ()

-- | Hook to run after copy command
[postCopy] :: UserHooks -> Args -> CopyFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before install command
[preInst] :: UserHooks -> Args -> InstallFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during install.
[instHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> InstallFlags -> IO ()

-- | Hook to run after install command. postInst should be run on the
--   target, not on the build machine.
[postInst] :: UserHooks -> Args -> InstallFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before sdist command. Second arg indicates verbosity
--   level.
[preSDist] :: UserHooks -> Args -> SDistFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during sdist.
[sDistHook] :: UserHooks -> PackageDescription -> Maybe LocalBuildInfo -> UserHooks -> SDistFlags -> IO ()

-- | Hook to run after sdist command. Second arg indicates verbosity level.
[postSDist] :: UserHooks -> Args -> SDistFlags -> PackageDescription -> Maybe LocalBuildInfo -> IO ()

-- | Hook to run before register command
[preReg] :: UserHooks -> Args -> RegisterFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during registration.
[regHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> RegisterFlags -> IO ()

-- | Hook to run after register command
[postReg] :: UserHooks -> Args -> RegisterFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before unregister command
[preUnreg] :: UserHooks -> Args -> RegisterFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during unregistration.
[unregHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> RegisterFlags -> IO ()

-- | Hook to run after unregister command
[postUnreg] :: UserHooks -> Args -> RegisterFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before hscolour command. Second arg indicates verbosity
--   level.
[preHscolour] :: UserHooks -> Args -> HscolourFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during hscolour.
[hscolourHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> HscolourFlags -> IO ()

-- | Hook to run after hscolour command. Second arg indicates verbosity
--   level.
[postHscolour] :: UserHooks -> Args -> HscolourFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before doctest command. Second arg indicates verbosity
--   level.
[preDoctest] :: UserHooks -> Args -> DoctestFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during doctest.
[doctestHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> DoctestFlags -> IO ()

-- | Hook to run after doctest command. Second arg indicates verbosity
--   level.
[postDoctest] :: UserHooks -> Args -> DoctestFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before haddock command. Second arg indicates verbosity
--   level.
[preHaddock] :: UserHooks -> Args -> HaddockFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during haddock.
[haddockHook] :: UserHooks -> PackageDescription -> LocalBuildInfo -> UserHooks -> HaddockFlags -> IO ()

-- | Hook to run after haddock command. Second arg indicates verbosity
--   level.
[postHaddock] :: UserHooks -> Args -> HaddockFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before test command.
[preTest] :: UserHooks -> Args -> TestFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during test.
[testHook] :: UserHooks -> Args -> PackageDescription -> LocalBuildInfo -> UserHooks -> TestFlags -> IO ()

-- | Hook to run after test command.
[postTest] :: UserHooks -> Args -> TestFlags -> PackageDescription -> LocalBuildInfo -> IO ()

-- | Hook to run before bench command.
[preBench] :: UserHooks -> Args -> BenchmarkFlags -> IO HookedBuildInfo

-- | Over-ride this hook to get different behavior during bench.
[benchHook] :: UserHooks -> Args -> PackageDescription -> LocalBuildInfo -> UserHooks -> BenchmarkFlags -> IO ()

-- | Hook to run after bench command.
[postBench] :: UserHooks -> Args -> BenchmarkFlags -> PackageDescription -> LocalBuildInfo -> IO ()
showProfDetailLevel :: ProfDetailLevel -> String
knownProfDetailLevels :: [(String, [String], ProfDetailLevel)]
flagToProfDetailLevel :: String -> ProfDetailLevel

-- | Does this compiler support profiling?
profilingSupported :: Compiler -> Bool

-- | Does this compiler support Haskell program coverage?
coverageSupported :: Compiler -> Bool

-- | Does this compiler's "ar" command supports response file arguments
--   (i.e. @file-style arguments).
arResponseFilesSupported :: Compiler -> Bool

-- | Does this compiler support a package database entry with:
--   "dynamic-library-dirs"?
libraryDynDirSupported :: Compiler -> Bool

-- | Does this compiler support Backpack?
backpackSupported :: Compiler -> Bool

-- | Does this compiler support unit IDs?
unitIdSupported :: Compiler -> Bool

-- | Does this compiler support package keys?
packageKeySupported :: Compiler -> Bool

-- | Does this compiler have unified IPIDs (so no package keys)
unifiedIPIDRequired :: Compiler -> Bool

-- | Does this compiler support thinning/renaming on package flags?
renamingPackageFlagsSupported :: Compiler -> Bool

-- | Does this compiler support reexported-modules?
reexportedModulesSupported :: Compiler -> Bool

-- | Does this compiler support parallel --make mode?
parmakeSupported :: Compiler -> Bool

-- | For the given compiler, return the flags for the supported extensions.
extensionsToFlags :: Compiler -> [Extension] -> [Flag]

-- | For the given compiler, return the extensions it does not support.
unsupportedExtensions :: Compiler -> [Extension] -> [Extension]
languageToFlags :: Compiler -> Maybe Language -> [Flag]
unsupportedLanguages :: Compiler -> [Language] -> [Language]
flagToDebugInfoLevel :: Maybe String -> DebugInfoLevel
flagToOptimisationLevel :: Maybe String -> OptimisationLevel
absolutePackageDBPath :: PackageDB -> NoCallStackIO PackageDB

-- | Make package paths absolute
absolutePackageDBPaths :: PackageDBStack -> NoCallStackIO PackageDBStack

-- | Return the package that we should register into. This is the package
--   db at the top of the stack.
registrationPackageDB :: PackageDBStack -> PackageDB
compilerInfo :: Compiler -> CompilerInfo

-- | Is this compiler compatible with the compiler flavour we're interested
--   in, and if so what version does it claim to be compatible with.
--   
--   For example this checks if the compiler is actually GHC-7.x or is
--   another compiler that claims to be compatible with some GHC-7.x
--   version.
--   
--   <pre>
--   case compilerCompatVersion GHC compiler of
--     Just (Version (7:_)) -&gt; ...
--     _                    -&gt; ...
--   </pre>
compilerCompatVersion :: CompilerFlavor -> Compiler -> Maybe Version

-- | Is this compiler compatible with the compiler flavour we're interested
--   in?
--   
--   For example this checks if the compiler is actually GHC or is another
--   compiler that claims to be compatible with some version of GHC, e.g.
--   GHCJS.
--   
--   <pre>
--   if compilerCompatFlavor GHC compiler then ... else ...
--   </pre>
compilerCompatFlavor :: CompilerFlavor -> Compiler -> Bool
compilerVersion :: Compiler -> Version
compilerFlavor :: Compiler -> CompilerFlavor
showCompilerIdWithAbi :: Compiler -> String
showCompilerId :: Compiler -> String
data Compiler
Compiler :: CompilerId -> AbiTag -> [CompilerId] -> [(Language, Flag)] -> [(Extension, Maybe Flag)] -> Map String String -> Compiler

-- | Compiler flavour and version.
[compilerId] :: Compiler -> CompilerId

-- | Tag for distinguishing incompatible ABI's on the same architecture/os.
[compilerAbiTag] :: Compiler -> AbiTag

-- | Other implementations that this compiler claims to be compatible with.
[compilerCompat] :: Compiler -> [CompilerId]

-- | Supported language standards.
[compilerLanguages] :: Compiler -> [(Language, Flag)]

-- | Supported extensions.
[compilerExtensions] :: Compiler -> [(Extension, Maybe Flag)]

-- | A key-value map for properties not covered by the above fields.
[compilerProperties] :: Compiler -> Map String String

-- | Some compilers have a notion of a database of available packages. For
--   some there is just one global db of packages, other compilers support
--   a per-user or an arbitrary db specified at some location in the file
--   system. This can be used to build isloated environments of packages,
--   for example to build a collection of related packages without
--   installing them globally.
data PackageDB
GlobalPackageDB :: PackageDB
UserPackageDB :: PackageDB
SpecificPackageDB :: FilePath -> PackageDB

-- | We typically get packages from several databases, and stack them
--   together. This type lets us be explicit about that stacking. For
--   example typical stacks include:
--   
--   <pre>
--   [GlobalPackageDB]
--   [GlobalPackageDB, UserPackageDB]
--   [GlobalPackageDB, SpecificPackageDB "package.conf.inplace"]
--   </pre>
--   
--   Note that the <a>GlobalPackageDB</a> is invariably at the bottom since
--   it contains the rts, base and other special compiler-specific
--   packages.
--   
--   We are not restricted to using just the above combinations. In
--   particular we can use several custom package dbs and the user package
--   db together.
--   
--   When it comes to writing, the top most (last) package is used.
type PackageDBStack = [PackageDB]

-- | Some compilers support optimising. Some have different levels. For
--   compilers that do not the level is just capped to the level they do
--   support.
data OptimisationLevel
NoOptimisation :: OptimisationLevel
NormalOptimisation :: OptimisationLevel
MaximumOptimisation :: OptimisationLevel

-- | Some compilers support emitting debug info. Some have different
--   levels. For compilers that do not the level is just capped to the
--   level they do support.
data DebugInfoLevel
NoDebugInfo :: DebugInfoLevel
MinimalDebugInfo :: DebugInfoLevel
NormalDebugInfo :: DebugInfoLevel
MaximalDebugInfo :: DebugInfoLevel

-- | Some compilers (notably GHC) support profiling and can instrument
--   programs so the system can account costs to different functions. There
--   are different levels of detail that can be used for this accounting.
--   For compilers that do not support this notion or the particular detail
--   levels, this is either ignored or just capped to some similar level
--   they do support.
data ProfDetailLevel
ProfDetailNone :: ProfDetailLevel
ProfDetailDefault :: ProfDetailLevel
ProfDetailExportedFunctions :: ProfDetailLevel
ProfDetailToplevelFunctions :: ProfDetailLevel
ProfDetailAllFunctions :: ProfDetailLevel
ProfDetailOther :: String -> ProfDetailLevel

-- | Optional auxiliary package information file
--   (<i>pkgname</i><tt>.buildinfo</tt>)
defaultHookedPackageDesc :: IO (Maybe FilePath)

-- | Compatibility wrapper for Cabal pre-1.24.
installedPackageId :: HasUnitId pkg => pkg -> UnitId
packageVersion :: Package pkg => pkg -> Version
packageName :: Package pkg => pkg -> PackageName
mungedVersion' :: HasMungedPackageId munged => munged -> Version
mungedName' :: HasMungedPackageId pkg => pkg -> MungedPackageName

-- | Class of things that have a <a>PackageIdentifier</a>
--   
--   Types in this class are all notions of a package. This allows us to
--   have different types for the different phases that packages go though,
--   from simple name/id, package description, configured or installed
--   packages.
--   
--   Not all kinds of packages can be uniquely identified by a
--   <a>PackageIdentifier</a>. In particular, installed packages cannot,
--   there may be many installed instances of the same source package.
class Package pkg
packageId :: Package pkg => pkg -> PackageIdentifier
class HasMungedPackageId pkg
mungedId :: HasMungedPackageId pkg => pkg -> MungedPackageId

-- | Packages that have an installed unit ID
class Package pkg => HasUnitId pkg
installedUnitId :: HasUnitId pkg => pkg -> UnitId

-- | Class of installed packages.
--   
--   The primary data type which is an instance of this package is
--   <tt>InstalledPackageInfo</tt>, but when we are doing install plans in
--   Cabal install we may have other, installed package-like things which
--   contain more metadata. Installed packages have exact dependencies
--   <a>installedDepends</a>.
class HasUnitId pkg => PackageInstalled pkg
installedDepends :: PackageInstalled pkg => pkg -> [UnitId]

-- | Simplify the <a>VersionRange</a> expression in a <a>Dependency</a>.
--   See <a>simplifyVersionRange</a>.
simplifyDependency :: Dependency -> Dependency
notThisPackageVersion :: PackageIdentifier -> Dependency
thisPackageVersion :: PackageIdentifier -> Dependency
depVerRange :: Dependency -> VersionRange
depPkgName :: Dependency -> PackageName

-- | Describes a dependency on a source package (API)
data Dependency
Dependency :: PackageName -> VersionRange -> Dependency

-- | A module identity uniquely identifies a Haskell module by qualifying a
--   <a>ModuleName</a> with the <a>UnitId</a> which defined it. This type
--   distinguishes between two packages which provide a module with the
--   same name, or a module from the same package compiled with different
--   dependencies. There are a few cases where Cabal needs to know about
--   module identities, e.g., when writing out reexported modules in the
--   <tt>InstalledPackageInfo</tt>.
data Module
Module :: DefUnitId -> ModuleName -> Module

-- | Unsafely create a <a>DefUnitId</a> from a <a>UnitId</a>. Your
--   responsibility is to ensure that the <a>DefUnitId</a> invariant holds.
unsafeMkDefUnitId :: UnitId -> DefUnitId

-- | Returns library name prefixed with HS, suitable for filenames
getHSLibraryName :: UnitId -> String

-- | Make an old-style UnitId from a package identifier. Assumed to be for
--   the public library
mkLegacyUnitId :: PackageId -> UnitId

-- | Create a unit identity with no associated hash directly from a
--   <a>ComponentId</a>.
newSimpleUnitId :: ComponentId -> UnitId
mkUnitId :: String -> UnitId

-- | If you need backwards compatibility, consider using <a>display</a>
--   instead, which is supported by all versions of Cabal.
unUnitId :: UnitId -> String

-- | A unit identifier identifies a (possibly instantiated)
--   package/component that can be installed the installed package
--   database. There are several types of components that can be installed:
--   
--   <ul>
--   <li>A traditional library with no holes, so that <tt>unitIdHash</tt>
--   is <tt>Nothing</tt>. In the absence of Backpack, <a>UnitId</a> is the
--   same as a <a>ComponentId</a>.</li>
--   <li>An indefinite, Backpack library with holes. In this case,
--   <tt>unitIdHash</tt> is still <tt>Nothing</tt>, but in the install,
--   there are only interfaces, no compiled objects.</li>
--   <li>An instantiated Backpack library with all the holes filled in.
--   <tt>unitIdHash</tt> is a <tt>Just</tt> a hash of the instantiating
--   mapping.</li>
--   </ul>
--   
--   A unit is a component plus the additional information on how the holes
--   are filled in. Thus there is a one to many relationship: for a
--   particular component there are many different ways of filling in the
--   holes, and each different combination is a unit (and has a separate
--   <a>UnitId</a>).
--   
--   <a>UnitId</a> is distinct from <tt>OpenUnitId</tt>, in that it is
--   always installed, whereas <tt>OpenUnitId</tt> are intermediate unit
--   identities that arise during mixin linking, and don't necessarily
--   correspond to any actually installed unit. Since the mapping is not
--   actually recorded in a <a>UnitId</a>, you can't actually substitute
--   over them (but you can substitute over <tt>OpenUnitId</tt>). See also
--   <a>Distribution.Backpack.FullUnitId</a> for a mechanism for expanding
--   an instantiated <a>UnitId</a> to retrieve its mapping.
--   
--   Backwards compatibility note: if you need to get the string
--   representation of a UnitId to pass, e.g., as a <tt>-package-id</tt>
--   flag, use the <a>display</a> function, which will work on all versions
--   of Cabal.
data UnitId
type InstalledPackageId = UnitId

-- | A <a>UnitId</a> for a definite package. The <a>DefUnitId</a> invariant
--   says that a <a>UnitId</a> identified this way is definite; i.e., it
--   has no unfilled holes.
data DefUnitId

-- | Type alias so we can use the shorter name PackageId.
type PackageId = PackageIdentifier

-- | The name and version of a package.
data PackageIdentifier
PackageIdentifier :: PackageName -> Version -> PackageIdentifier

-- | The name of this package, eg. foo
[pkgName] :: PackageIdentifier -> PackageName

-- | the version of this package, eg 1.2
[pkgVersion] :: PackageIdentifier -> Version

-- | Construct a <a>PackageName</a> from a <a>String</a>
--   
--   <a>mkPackageName</a> is the inverse to <a>unPackageName</a>
--   
--   Note: No validations are performed to ensure that the resulting
--   <a>PackageName</a> is valid
mkPackageName :: String -> PackageName

-- | Convert <a>PackageName</a> to <a>String</a>
unPackageName :: PackageName -> String

-- | A package name.
--   
--   Use <a>mkPackageName</a> and <a>unPackageName</a> to convert from/to a
--   <a>String</a>.
--   
--   This type is opaque since <tt>Cabal-2.0</tt>
data PackageName

-- | Make a CompilerInfo of which only the known information is its
--   CompilerId, its AbiTag and that it does not claim to be compatible
--   with other compiler id's.
unknownCompilerInfo :: CompilerId -> AbiTag -> CompilerInfo
abiTagString :: AbiTag -> String

-- | The default compiler flavour to pick when compiling stuff. This
--   defaults to the compiler used to build the Cabal lib.
--   
--   However if it's not a recognised compiler then it's <a>Nothing</a> and
--   the user will have to specify which compiler they want.
defaultCompilerFlavor :: Maybe CompilerFlavor
buildCompilerId :: CompilerId
buildCompilerFlavor :: CompilerFlavor

-- | Like <a>classifyCompilerFlavor</a> but compatible with the old ReadS
--   parser.
--   
--   It is compatible in the sense that it accepts only the same strings,
--   eg <a>GHC</a> but not "ghc". However other strings get mapped to
--   <a>OtherCompiler</a>. The point of this is that we do not allow extra
--   valid values that would upset older Cabal versions that had a stricter
--   parser however we cope with new values more gracefully so that we'll
--   be able to introduce new value in future without breaking things so
--   much.
parseCompilerFlavorCompat :: () => ReadP r CompilerFlavor
classifyCompilerFlavor :: String -> CompilerFlavor
knownCompilerFlavors :: [CompilerFlavor]
data CompilerFlavor
GHC :: CompilerFlavor
GHCJS :: CompilerFlavor
NHC :: CompilerFlavor
YHC :: CompilerFlavor
Hugs :: CompilerFlavor
HBC :: CompilerFlavor
Helium :: CompilerFlavor
JHC :: CompilerFlavor
LHC :: CompilerFlavor
UHC :: CompilerFlavor
Eta :: CompilerFlavor
HaskellSuite :: String -> CompilerFlavor
OtherCompiler :: String -> CompilerFlavor
data CompilerId
CompilerId :: CompilerFlavor -> Version -> CompilerId

-- | Compiler information used for resolving configurations. Some fields
--   can be set to Nothing to indicate that the information is unknown.
data CompilerInfo
CompilerInfo :: CompilerId -> AbiTag -> Maybe [CompilerId] -> Maybe [Language] -> Maybe [Extension] -> CompilerInfo

-- | Compiler flavour and version.
[compilerInfoId] :: CompilerInfo -> CompilerId

-- | Tag for distinguishing incompatible ABI's on the same architecture/os.
[compilerInfoAbiTag] :: CompilerInfo -> AbiTag

-- | Other implementations that this compiler claims to be compatible with,
--   if known.
[compilerInfoCompat] :: CompilerInfo -> Maybe [CompilerId]

-- | Supported language standards, if known.
[compilerInfoLanguages] :: CompilerInfo -> Maybe [Language]

-- | Supported extensions, if known.
[compilerInfoExtensions] :: CompilerInfo -> Maybe [Extension]
data AbiTag
NoAbiTag :: AbiTag
AbiTag :: String -> AbiTag
classifyExtension :: String -> Extension

-- | Extensions that have been deprecated, possibly paired with another
--   extension that replaces it.
deprecatedExtensions :: [(Extension, Maybe Extension)]
knownExtensions :: [KnownExtension]
classifyLanguage :: String -> Language
knownLanguages :: [Language]

-- | This represents a Haskell language dialect.
--   
--   Language <a>Extension</a>s are interpreted relative to one of these
--   base languages.
data Language

-- | The Haskell 98 language as defined by the Haskell 98 report.
--   <a>http://haskell.org/onlinereport/</a>
Haskell98 :: Language

-- | The Haskell 2010 language as defined by the Haskell 2010 report.
--   <a>http://www.haskell.org/onlinereport/haskell2010</a>
Haskell2010 :: Language

-- | An unknown language, identified by its name.
UnknownLanguage :: String -> Language

-- | This represents language extensions beyond a base <a>Language</a>
--   definition (such as <a>Haskell98</a>) that are supported by some
--   implementations, usually in some special mode.
--   
--   Where applicable, references are given to an implementation's official
--   documentation.
data Extension

-- | Enable a known extension
EnableExtension :: KnownExtension -> Extension

-- | Disable a known extension
DisableExtension :: KnownExtension -> Extension

-- | An unknown extension, identified by the name of its <tt>LANGUAGE</tt>
--   pragma.
UnknownExtension :: String -> Extension
data KnownExtension

-- | Allow overlapping class instances, provided there is a unique most
--   specific instance for each use.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XOverlappingInstances</a></li>
--   </ul>
OverlappingInstances :: KnownExtension

-- | Ignore structural rules guaranteeing the termination of class instance
--   resolution. Termination is guaranteed by a fixed-depth recursion
--   stack, and compilation may fail if this depth is exceeded.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XUndecidableInstances</a></li>
--   </ul>
UndecidableInstances :: KnownExtension

-- | Implies <a>OverlappingInstances</a>. Allow the implementation to
--   choose an instance even when it is possible that further instantiation
--   of types will lead to a more specific instance being applicable.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XIncoherentInstances</a></li>
--   </ul>
IncoherentInstances :: KnownExtension

-- | <i>(deprecated)</i> Deprecated in favour of <a>RecursiveDo</a>.
--   
--   Old description: Allow recursive bindings in <tt>do</tt> blocks, using
--   the <tt>rec</tt> keyword. See also <a>RecursiveDo</a>.
DoRec :: KnownExtension

-- | Allow recursive bindings in <tt>do</tt> blocks, using the <tt>rec</tt>
--   keyword, or <tt>mdo</tt>, a variant of <tt>do</tt>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XRecursiveDo</a></li>
--   </ul>
RecursiveDo :: KnownExtension

-- | Provide syntax for writing list comprehensions which iterate over
--   several lists together, like the <a>zipWith</a> family of functions.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XParallelListComp</a></li>
--   </ul>
ParallelListComp :: KnownExtension

-- | Allow multiple parameters in a type class.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XMultiParamTypeClasses</a></li>
--   </ul>
MultiParamTypeClasses :: KnownExtension

-- | Enable the dreaded monomorphism restriction.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XNoMonomorphismRestriction</a></li>
--   </ul>
MonomorphismRestriction :: KnownExtension

-- | Allow a specification attached to a multi-parameter type class which
--   indicates that some parameters are entirely determined by others. The
--   implementation will check that this property holds for the declared
--   instances, and will use this property to reduce ambiguity in instance
--   resolution.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XFunctionalDependencies</a></li>
--   </ul>
FunctionalDependencies :: KnownExtension

-- | <i>(deprecated)</i> A synonym for <a>RankNTypes</a>.
--   
--   Old description: Like <a>RankNTypes</a> but does not allow a
--   higher-rank type to itself appear on the left of a function arrow.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XRank2Types</a></li>
--   </ul>
Rank2Types :: KnownExtension

-- | Allow a universally-quantified type to occur on the left of a function
--   arrow.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XRankNTypes</a></li>
--   </ul>
RankNTypes :: KnownExtension

-- | <i>(deprecated)</i> A synonym for <a>RankNTypes</a>.
--   
--   Old description: Allow data constructors to have polymorphic
--   arguments. Unlike <a>RankNTypes</a>, does not allow this for ordinary
--   functions.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#arbitrary-rank-polymorphism</a></li>
--   </ul>
PolymorphicComponents :: KnownExtension

-- | Allow existentially-quantified data constructors.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XExistentialQuantification</a></li>
--   </ul>
ExistentialQuantification :: KnownExtension

-- | Cause a type variable in a signature, which has an explicit
--   <tt>forall</tt> quantifier, to scope over the definition of the
--   accompanying value declaration.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XScopedTypeVariables</a></li>
--   </ul>
ScopedTypeVariables :: KnownExtension

-- | Deprecated, use <a>ScopedTypeVariables</a> instead.
PatternSignatures :: KnownExtension

-- | Enable implicit function parameters with dynamic scope.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XImplicitParams</a></li>
--   </ul>
ImplicitParams :: KnownExtension

-- | Relax some restrictions on the form of the context of a type
--   signature.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XFlexibleContexts</a></li>
--   </ul>
FlexibleContexts :: KnownExtension

-- | Relax some restrictions on the form of the context of an instance
--   declaration.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XFlexibleInstances</a></li>
--   </ul>
FlexibleInstances :: KnownExtension

-- | Allow data type declarations with no constructors.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XEmptyDataDecls</a></li>
--   </ul>
EmptyDataDecls :: KnownExtension

-- | Run the C preprocessor on Haskell source code.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#language-pragma</a></li>
--   </ul>
CPP :: KnownExtension

-- | Allow an explicit kind signature giving the kind of types over which a
--   type variable ranges.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XKindSignatures</a></li>
--   </ul>
KindSignatures :: KnownExtension

-- | Enable a form of pattern which forces evaluation before an attempted
--   match, and a form of strict <tt>let</tt>/<tt>where</tt> binding.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XBangPatterns</a></li>
--   </ul>
BangPatterns :: KnownExtension

-- | Allow type synonyms in instance heads.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XTypeSynonymInstances</a></li>
--   </ul>
TypeSynonymInstances :: KnownExtension

-- | Enable Template Haskell, a system for compile-time metaprogramming.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XTemplateHaskell</a></li>
--   </ul>
TemplateHaskell :: KnownExtension

-- | Enable the Foreign Function Interface. In GHC, implements the standard
--   Haskell 98 Foreign Function Interface Addendum, plus some GHC-specific
--   extensions.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#language-pragma</a></li>
--   </ul>
ForeignFunctionInterface :: KnownExtension

-- | Enable arrow notation.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XArrows</a></li>
--   </ul>
Arrows :: KnownExtension

-- | <i>(deprecated)</i> Enable generic type classes, with default
--   instances defined in terms of the algebraic structure of a type.
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#generic-classes</a></li>
--   </ul>
Generics :: KnownExtension

-- | Enable the implicit importing of the module <a>Prelude</a>. When
--   disabled, when desugaring certain built-in syntax into ordinary
--   identifiers, use whatever is in scope rather than the <a>Prelude</a>
--   -- version.
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#rebindable-syntax-and-the-implicit-prelude-import</a></li>
--   </ul>
ImplicitPrelude :: KnownExtension

-- | Enable syntax for implicitly binding local names corresponding to the
--   field names of a record. Puns bind specific names, unlike
--   <a>RecordWildCards</a>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XNamedFieldPuns</a></li>
--   </ul>
NamedFieldPuns :: KnownExtension

-- | Enable a form of guard which matches a pattern and binds variables.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XPatternGuards</a></li>
--   </ul>
PatternGuards :: KnownExtension

-- | Allow a type declared with <tt>newtype</tt> to use <tt>deriving</tt>
--   for any class with an instance for the underlying type.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XGeneralizedNewtypeDeriving</a></li>
--   </ul>
GeneralizedNewtypeDeriving :: KnownExtension

-- | Enable the "Trex" extensible records system.
--   
--   <ul>
--   
--   <li><a>http://haskell.org/hugs/pages/users_guide/hugs-only.html#TREX</a></li>
--   </ul>
ExtensibleRecords :: KnownExtension

-- | Enable type synonyms which are transparent in some definitions and
--   opaque elsewhere, as a way of implementing abstract datatypes.
--   
--   <ul>
--   
--   <li><a>http://haskell.org/hugs/pages/users_guide/restricted-synonyms.html</a></li>
--   </ul>
RestrictedTypeSynonyms :: KnownExtension

-- | Enable an alternate syntax for string literals, with string
--   templating.
--   
--   <ul>
--   
--   <li><a>http://haskell.org/hugs/pages/users_guide/here-documents.html</a></li>
--   </ul>
HereDocuments :: KnownExtension

-- | Allow the character <tt>#</tt> as a postfix modifier on identifiers.
--   Also enables literal syntax for unboxed values.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XMagicHash</a></li>
--   </ul>
MagicHash :: KnownExtension

-- | Allow data types and type synonyms which are indexed by types, i.e.
--   ad-hoc polymorphism for types.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XTypeFamilies</a></li>
--   </ul>
TypeFamilies :: KnownExtension

-- | Allow a standalone declaration which invokes the type class
--   <tt>deriving</tt> mechanism.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XStandaloneDeriving</a></li>
--   </ul>
StandaloneDeriving :: KnownExtension

-- | Allow certain Unicode characters to stand for certain ASCII character
--   sequences, e.g. keywords and punctuation.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XUnicodeSyntax</a></li>
--   </ul>
UnicodeSyntax :: KnownExtension

-- | Allow the use of unboxed types as foreign types, e.g. in <tt>foreign
--   import</tt> and <tt>foreign export</tt>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#language-options</a></li>
--   </ul>
UnliftedFFITypes :: KnownExtension

-- | Enable interruptible FFI.
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/latest/html/users_guide/ffi-chap.html#interruptible-foreign-calls</a></li>
--   </ul>
InterruptibleFFI :: KnownExtension

-- | Allow use of CAPI FFI calling convention (<tt>foreign import
--   capi</tt>).
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/latest/html/users_guide/ffi-chap.html#the-capi-calling-convention</a></li>
--   </ul>
CApiFFI :: KnownExtension

-- | Defer validity checking of types until after expanding type synonyms,
--   relaxing the constraints on how synonyms may be used.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XLiberalTypeSynonyms</a></li>
--   </ul>
LiberalTypeSynonyms :: KnownExtension

-- | Allow the name of a type constructor, type class, or type variable to
--   be an infix operator. *
--   <a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XTypeOperators</a>
TypeOperators :: KnownExtension

-- | Enable syntax for implicitly binding local names corresponding to the
--   field names of a record. A wildcard binds all unmentioned names,
--   unlike <a>NamedFieldPuns</a>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XRecordWildCards</a></li>
--   </ul>
RecordWildCards :: KnownExtension

-- | Deprecated, use <a>NamedFieldPuns</a> instead.
RecordPuns :: KnownExtension

-- | Allow a record field name to be disambiguated by the type of the
--   record it's in.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDisambiguateRecordFields</a></li>
--   </ul>
DisambiguateRecordFields :: KnownExtension

-- | Enable traditional record syntax (as supported by Haskell 98)
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#traditional-record-syntax</a></li>
--   </ul>
TraditionalRecordSyntax :: KnownExtension

-- | Enable overloading of string literals using a type class, much like
--   integer literals.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XOverloadedStrings</a></li>
--   </ul>
OverloadedStrings :: KnownExtension

-- | Enable generalized algebraic data types, in which type variables may
--   be instantiated on a per-constructor basis. Implies <a>GADTSyntax</a>.
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#generalised-algebraic-data-types-gadts</a></li>
--   </ul>
GADTs :: KnownExtension

-- | Enable GADT syntax for declaring ordinary algebraic datatypes.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XGADTSyntax</a></li>
--   </ul>
GADTSyntax :: KnownExtension

-- | <i>(deprecated)</i> Has no effect.
--   
--   Old description: Make pattern bindings monomorphic.
--   
--   <ul>
--   
--   <li><a>https://downloads.haskell.org/~ghc/7.6.3/docs/html/users_guide/monomorphism.html</a></li>
--   </ul>
MonoPatBinds :: KnownExtension

-- | Relax the requirements on mutually-recursive polymorphic functions.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XRelaxedPolyRec</a></li>
--   </ul>
RelaxedPolyRec :: KnownExtension

-- | Allow default instantiation of polymorphic types in more situations.
--   
--   <ul>
--   
--   <li><a>http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#type-defaulting-in-ghci</a></li>
--   </ul>
ExtendedDefaultRules :: KnownExtension

-- | Enable unboxed tuples.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XUnboxedTuples</a></li>
--   </ul>
UnboxedTuples :: KnownExtension

-- | Enable <tt>deriving</tt> for classes <a>Typeable</a> and <a>Data</a>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveDataTypeable</a></li>
--   </ul>
DeriveDataTypeable :: KnownExtension

-- | Enable <tt>deriving</tt> for <a>Generic</a> and <a>Generic1</a>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveGeneric</a></li>
--   </ul>
DeriveGeneric :: KnownExtension

-- | Enable support for default signatures.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDefaultSignatures</a></li>
--   </ul>
DefaultSignatures :: KnownExtension

-- | Allow type signatures to be specified in instance declarations.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XInstanceSigs</a></li>
--   </ul>
InstanceSigs :: KnownExtension

-- | Allow a class method's type to place additional constraints on a class
--   type variable.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XConstrainedClassMethods</a></li>
--   </ul>
ConstrainedClassMethods :: KnownExtension

-- | Allow imports to be qualified by the package name the module is
--   intended to be imported from, e.g.
--   
--   <pre>
--   import "network" Network.Socket
--   </pre>
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XPackageImports</a></li>
--   </ul>
PackageImports :: KnownExtension

-- | <i>(deprecated)</i> Allow a type variable to be instantiated at a
--   polymorphic type.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XImpredicativeTypes</a></li>
--   </ul>
ImpredicativeTypes :: KnownExtension

-- | <i>(deprecated)</i> Change the syntax for qualified infix operators.
--   
--   <ul>
--   
--   <li><a>http://www.haskell.org/ghc/docs/6.12.3/html/users_guide/syntax-extns.html#new-qualified-operators</a></li>
--   </ul>
NewQualifiedOperators :: KnownExtension

-- | Relax the interpretation of left operator sections to allow unary
--   postfix operators.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XPostfixOperators</a></li>
--   </ul>
PostfixOperators :: KnownExtension

-- | Enable quasi-quotation, a mechanism for defining new concrete syntax
--   for expressions and patterns.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XQuasiQuotes</a></li>
--   </ul>
QuasiQuotes :: KnownExtension

-- | Enable generalized list comprehensions, supporting operations such as
--   sorting and grouping.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XTransformListComp</a></li>
--   </ul>
TransformListComp :: KnownExtension

-- | Enable monad comprehensions, which generalise the list comprehension
--   syntax to work for any monad.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XMonadComprehensions</a></li>
--   </ul>
MonadComprehensions :: KnownExtension

-- | Enable view patterns, which match a value by applying a function and
--   matching on the result.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XViewPatterns</a></li>
--   </ul>
ViewPatterns :: KnownExtension

-- | Allow concrete XML syntax to be used in expressions and patterns, as
--   per the Haskell Server Pages extension language:
--   <a>http://www.haskell.org/haskellwiki/HSP</a>. The ideas behind it are
--   discussed in the paper "Haskell Server Pages through Dynamic Loading"
--   by Niklas Broberg, from Haskell Workshop '05.
XmlSyntax :: KnownExtension

-- | Allow regular pattern matching over lists, as discussed in the paper
--   "Regular Expression Patterns" by Niklas Broberg, Andreas Farre and
--   Josef Svenningsson, from ICFP '04.
RegularPatterns :: KnownExtension

-- | Enable the use of tuple sections, e.g. <tt>(, True)</tt> desugars into
--   <tt>x -&gt; (x, True)</tt>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XTupleSections</a></li>
--   </ul>
TupleSections :: KnownExtension

-- | Allow GHC primops, written in C--, to be imported into a Haskell file.
GHCForeignImportPrim :: KnownExtension

-- | Support for patterns of the form <tt>n + k</tt>, where <tt>k</tt> is
--   an integer literal.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XNPlusKPatterns</a></li>
--   </ul>
NPlusKPatterns :: KnownExtension

-- | Improve the layout rule when <tt>if</tt> expressions are used in a
--   <tt>do</tt> block.
DoAndIfThenElse :: KnownExtension

-- | Enable support for multi-way <tt>if</tt>-expressions.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XMultiWayIf</a></li>
--   </ul>
MultiWayIf :: KnownExtension

-- | Enable support lambda-<tt>case</tt> expressions.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XLambdaCase</a></li>
--   </ul>
LambdaCase :: KnownExtension

-- | Makes much of the Haskell sugar be desugared into calls to the
--   function with a particular name that is in scope.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XRebindableSyntax</a></li>
--   </ul>
RebindableSyntax :: KnownExtension

-- | Make <tt>forall</tt> a keyword in types, which can be used to give the
--   generalisation explicitly.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XExplicitForAll</a></li>
--   </ul>
ExplicitForAll :: KnownExtension

-- | Allow contexts to be put on datatypes, e.g. the <tt>Eq a</tt> in
--   <tt>data Eq a =&gt; Set a = NilSet | ConsSet a (Set a)</tt>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDatatypeContexts</a></li>
--   </ul>
DatatypeContexts :: KnownExtension

-- | Local (<tt>let</tt> and <tt>where</tt>) bindings are monomorphic.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XMonoLocalBinds</a></li>
--   </ul>
MonoLocalBinds :: KnownExtension

-- | Enable <tt>deriving</tt> for the <a>Functor</a> class.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveFunctor</a></li>
--   </ul>
DeriveFunctor :: KnownExtension

-- | Enable <tt>deriving</tt> for the <a>Traversable</a> class.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveTraversable</a></li>
--   </ul>
DeriveTraversable :: KnownExtension

-- | Enable <tt>deriving</tt> for the <a>Foldable</a> class.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveFoldable</a></li>
--   </ul>
DeriveFoldable :: KnownExtension

-- | Enable non-decreasing indentation for <tt>do</tt> blocks.
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/latest/html/users_guide/bugs.html#context-free-syntax</a></li>
--   </ul>
NondecreasingIndentation :: KnownExtension

-- | Allow imports to be qualified with a safe keyword that requires the
--   imported module be trusted as according to the Safe Haskell definition
--   of trust.
--   
--   <pre>
--   import safe Network.Socket
--   </pre>
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#safe-imports</a></li>
--   </ul>
SafeImports :: KnownExtension

-- | Compile a module in the Safe, Safe Haskell mode -- a restricted form
--   of the Haskell language to ensure type safety.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/safe_haskell.html#ghc-flag--XSafe</a></li>
--   </ul>
Safe :: KnownExtension

-- | Compile a module in the Trustworthy, Safe Haskell mode -- no
--   restrictions apply but the module is marked as trusted as long as the
--   package the module resides in is trusted.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/safe_haskell.html#ghc-flag--XTrustworthy</a></li>
--   </ul>
Trustworthy :: KnownExtension

-- | Compile a module in the Unsafe, Safe Haskell mode so that modules
--   compiled using Safe, Safe Haskell mode can't import it.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/safe_haskell.html#ghc-flag--XUnsafe</a></li>
--   </ul>
Unsafe :: KnownExtension

-- | Allow type class<i>implicit parameter</i>equality constraints to be
--   used as types with the special kind constraint. Also generalise the
--   <tt>(ctxt =&gt; ty)</tt> syntax so that any type of kind constraint
--   can occur before the arrow.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XConstraintKinds</a></li>
--   </ul>
ConstraintKinds :: KnownExtension

-- | Enable kind polymorphism.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XPolyKinds</a></li>
--   </ul>
PolyKinds :: KnownExtension

-- | Enable datatype promotion.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDataKinds</a></li>
--   </ul>
DataKinds :: KnownExtension

-- | Enable parallel arrays syntax (<tt>[:</tt>, <tt>:]</tt>) for <i>Data
--   Parallel Haskell</i>.
--   
--   <ul>
--   
--   <li><a>http://www.haskell.org/haskellwiki/GHC/Data_Parallel_Haskell</a></li>
--   </ul>
ParallelArrays :: KnownExtension

-- | Enable explicit role annotations, like in (<tt>type role Foo
--   representational representational</tt>).
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XRoleAnnotations</a></li>
--   </ul>
RoleAnnotations :: KnownExtension

-- | Enable overloading of list literals, arithmetic sequences and list
--   patterns using the <tt>IsList</tt> type class.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XOverloadedLists</a></li>
--   </ul>
OverloadedLists :: KnownExtension

-- | Enable case expressions that have no alternatives. Also applies to
--   lambda-case expressions if they are enabled.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XEmptyCase</a></li>
--   </ul>
EmptyCase :: KnownExtension

-- | <i>(deprecated)</i> Deprecated in favour of <a>DeriveDataTypeable</a>.
--   
--   Old description: Triggers the generation of derived <a>Typeable</a>
--   instances for every datatype and type class declaration.
--   
--   <ul>
--   
--   <li><a>https://haskell.org/ghc/docs/7.8.4/html/users_guide/deriving.html#auto-derive-typeable</a></li>
--   </ul>
AutoDeriveTypeable :: KnownExtension

-- | Desugars negative literals directly (without using negate).
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XNegativeLiterals</a></li>
--   </ul>
NegativeLiterals :: KnownExtension

-- | Allow the use of binary integer literal syntax (e.g.
--   <tt>0b11001001</tt> to denote <tt>201</tt>).
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XBinaryLiterals</a></li>
--   </ul>
BinaryLiterals :: KnownExtension

-- | Allow the use of floating literal syntax for all instances of
--   <a>Num</a>, including <a>Int</a> and <a>Integer</a>.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XNumDecimals</a></li>
--   </ul>
NumDecimals :: KnownExtension

-- | Enable support for type classes with no type parameter.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XNullaryTypeClasses</a></li>
--   </ul>
NullaryTypeClasses :: KnownExtension

-- | Enable explicit namespaces in module import/export lists.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XExplicitNamespaces</a></li>
--   </ul>
ExplicitNamespaces :: KnownExtension

-- | Allow the user to write ambiguous types, and the type inference engine
--   to infer them.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XAllowAmbiguousTypes</a></li>
--   </ul>
AllowAmbiguousTypes :: KnownExtension

-- | Enable <tt>foreign import javascript</tt>.
JavaScriptFFI :: KnownExtension

-- | Allow giving names to and abstracting over patterns.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XPatternSynonyms</a></li>
--   </ul>
PatternSynonyms :: KnownExtension

-- | Allow anonymous placeholders (underscore) inside type signatures. The
--   type inference engine will generate a message describing the type
--   inferred at the hole's location.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XPartialTypeSignatures</a></li>
--   </ul>
PartialTypeSignatures :: KnownExtension

-- | Allow named placeholders written with a leading underscore inside type
--   signatures. Wildcards with the same name unify to the same type.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XNamedWildCards</a></li>
--   </ul>
NamedWildCards :: KnownExtension

-- | Enable <tt>deriving</tt> for any class.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveAnyClass</a></li>
--   </ul>
DeriveAnyClass :: KnownExtension

-- | Enable <tt>deriving</tt> for the <a>Lift</a> class.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XDeriveLift</a></li>
--   </ul>
DeriveLift :: KnownExtension

-- | Enable support for 'static pointers' (and the <tt>static</tt> keyword)
--   to refer to globally stable names, even across different programs.
--   
--   <ul>
--   
--   <li><a>https://www.haskell.org/ghc/docs/latest/html/users_guide/glasgow_exts.html#ghc-flag--XStaticPointers</a></li>
--   </ul>
StaticPointers :: KnownExtension

-- | Switches data type declarations to be strict by default (as if they
--   had a bang using <tt>BangPatterns</tt>), and allow opt-in field
--   laziness using <tt>~</tt>.
--   
--   <ul>
--   
--   <li><a>https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XStrictData</a></li>
--   </ul>
StrictData :: KnownExtension

-- | Switches all pattern bindings to be strict by default (as if they had
--   a bang using <tt>BangPatterns</tt>), ordinary patterns are recovered
--   using <tt>~</tt>. Implies <tt>StrictData</tt>.
--   
--   <ul>
--   
--   <li><a>https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#ghc-flag--XStrict</a></li>
--   </ul>
Strict :: KnownExtension

-- | Allows <tt>do</tt>-notation for types that are
--   <tt><a>Applicative</a></tt> as well as <tt><a>Monad</a></tt>. When
--   enabled, desugaring <tt>do</tt> notation tries to use
--   <tt>(<a>*</a>)</tt> and <tt><a>fmap</a></tt> and
--   <tt><tt>join</tt></tt> as far as possible.
ApplicativeDo :: KnownExtension

-- | Allow records to use duplicated field labels for accessors.
DuplicateRecordFields :: KnownExtension

-- | Enable explicit type applications with the syntax <tt>id @Int</tt>.
TypeApplications :: KnownExtension

-- | Dissolve the distinction between types and kinds, allowing the
--   compiler to reason about kind equality and therefore enabling GADTs to
--   be promoted to the type-level.
TypeInType :: KnownExtension

-- | Allow recursive (and therefore undecideable) super-class
--   relationships.
UndecidableSuperClasses :: KnownExtension

-- | A temporary extension to help library authors check if their code will
--   compile with the new planned desugaring of fail.
MonadFailDesugaring :: KnownExtension

-- | A subset of <tt>TemplateHaskell</tt> including only quoting.
TemplateHaskellQuotes :: KnownExtension

-- | Allows use of the <tt>#label</tt> syntax.
OverloadedLabels :: KnownExtension

-- | Allow functional dependency annotations on type families to declare
--   them as injective.
TypeFamilyDependencies :: KnownExtension

-- | Allow multiple <tt>deriving</tt> clauses, each optionally qualified
--   with a <i>strategy</i>.
DerivingStrategies :: KnownExtension

-- | Enable the use of unboxed sum syntax.
UnboxedSums :: KnownExtension

-- | Allow use of hexadecimal literal notation for floating-point values.
HexFloatLiterals :: KnownExtension

-- | Allow <tt>do</tt> blocks etc. in argument position.
BlockArguments :: KnownExtension

-- | Allow use of underscores in numeric literals.
NumericUnderscores :: KnownExtension

-- | Allow <tt>forall</tt> in constraints.
QuantifiedConstraints :: KnownExtension

-- | Have <tt>*</tt> refer to <tt>Type</tt>.
StarIsType :: KnownExtension

-- | Convert <a>License</a> to <a>License</a>,
--   
--   This is lossy conversion. We try our best.
--   
--   <pre>
--   &gt;&gt;&gt; licenseFromSPDX . licenseToSPDX $ BSD3
--   BSD3
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; licenseFromSPDX . licenseToSPDX $ GPL (Just (mkVersion [3]))
--   GPL (Just (mkVersion [3]))
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; licenseFromSPDX . licenseToSPDX $ PublicDomain
--   UnknownLicense "LicenseRefPublicDomain"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; licenseFromSPDX $ SPDX.License $ SPDX.simpleLicenseExpression SPDX.EUPL_1_1
--   UnknownLicense "EUPL-1.1"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; licenseFromSPDX . licenseToSPDX $ AllRightsReserved
--   AllRightsReserved
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; licenseFromSPDX &lt;$&gt; simpleParsec "BSD-3-Clause OR GPL-3.0-only"
--   Just (UnknownLicense "BSD3ClauseORGPL30only")
--   </pre>
licenseFromSPDX :: License -> License

-- | Convert old <a>License</a> to SPDX <a>License</a>. Non-SPDX licenses
--   are converted to <a>LicenseRef</a>.
licenseToSPDX :: License -> License

-- | The list of all currently recognised licenses.
knownLicenses :: [License]

-- | Indicates the license under which a package's source code is released.
--   Versions of the licenses not listed here will be rejected by Hackage
--   and cause <tt>cabal check</tt> to issue a warning.
data License

-- | GNU General Public License, <a>version 2</a> or <a>version 3</a>.
GPL :: Maybe Version -> License

-- | <a>GNU Affero General Public License, version 3</a>.
AGPL :: Maybe Version -> License

-- | GNU Lesser General Public License, <a>version 2.1</a> or <a>version
--   3</a>.
LGPL :: Maybe Version -> License

-- | <a>2-clause BSD license</a>.
BSD2 :: License

-- | <a>3-clause BSD license</a>.
BSD3 :: License

-- | <a>4-clause BSD license</a>. This license has not been approved by the
--   OSI and is incompatible with the GNU GPL. It is provided for
--   historical reasons and should be avoided.
BSD4 :: License

-- | <a>MIT license</a>.
MIT :: License

-- | <a>ISC license</a>
ISC :: License

-- | <a>Mozilla Public License, version 2.0</a>.
MPL :: Version -> License

-- | <a>Apache License, version 2.0</a>.
Apache :: Maybe Version -> License

-- | The author of a package disclaims any copyright to its source code and
--   dedicates it to the public domain. This is not a software license.
--   Please note that it is not possible to dedicate works to the public
--   domain in every jurisdiction, nor is a work that is in the public
--   domain in one jurisdiction necessarily in the public domain elsewhere.
PublicDomain :: License

-- | Explicitly 'All Rights Reserved', eg for proprietary software. The
--   package may not be legally modified or redistributed by anyone but the
--   rightsholder.
AllRightsReserved :: License

-- | No license specified which legally defaults to 'All Rights Reserved'.
--   The package may not be legally modified or redistributed by anyone but
--   the rightsholder.
UnspecifiedLicense :: License

-- | Any other software license.
OtherLicense :: License

-- | Indicates an erroneous license name.
UnknownLicense :: String -> License

-- | An extended variant of <a>foldVersionRange</a> that also provides a
--   view of the expression in which the syntactic sugar <tt>"&gt;=
--   v"</tt>, <tt>"&lt;= v"</tt> and <tt>"== v.*"</tt> is presented
--   explicitly rather than in terms of the other basic syntax.
foldVersionRange' :: () => a -> (Version -> a) -> (Version -> a) -> (Version -> a) -> (Version -> a) -> (Version -> a) -> (Version -> Version -> a) -> (Version -> Version -> a) -> (a -> a -> a) -> (a -> a -> a) -> (a -> a) -> VersionRange -> a
betweenVersionsInclusive :: Version -> Version -> VersionRange

-- | Given a version range, remove the lowest lower bound. Example:
--   <tt>(&gt;= 1 &amp;&amp; <a>|| (</a>= 4 &amp;&amp; &lt; 5)</tt> is
--   converted to <tt>(&gt;= 0 &amp;&amp; <a>|| (</a>= 4 &amp;&amp; &lt;
--   5)</tt>.
removeLowerBound :: VersionRange -> VersionRange

-- | Given a version range, remove the highest upper bound. Example:
--   <tt>(&gt;= 1 &amp;&amp; &lt; 3) || (&gt;= 4 &amp;&amp; &lt; 5)</tt> is
--   converted to <tt>(&gt;= 1 &amp;&amp; <a>|| (</a>= 4)</tt>.
removeUpperBound :: VersionRange -> VersionRange

-- | The inverse of a version range
--   
--   <pre>
--     withinRange v' (invertVersionRange vr)
--   = not (withinRange v' vr)
--   </pre>
invertVersionRange :: VersionRange -> VersionRange

-- | The difference of two version ranges
--   
--   <pre>
--     withinRange v' (differenceVersionRanges vr1 vr2)
--   = withinRange v' vr1 &amp;&amp; not (withinRange v' vr2)
--   </pre>
differenceVersionRanges :: VersionRange -> VersionRange -> VersionRange

-- | Simplify a <a>VersionRange</a> expression. For non-empty version
--   ranges this produces a canonical form. Empty or inconsistent version
--   ranges are left as-is because that provides more information.
--   
--   If you need a canonical form use <tt>fromVersionIntervals .
--   toVersionIntervals</tt>
--   
--   It satisfies the following properties:
--   
--   <pre>
--   withinRange v (simplifyVersionRange r) = withinRange v r
--   </pre>
--   
--   <pre>
--       withinRange v r = withinRange v r'
--   ==&gt; simplifyVersionRange r = simplifyVersionRange r'
--    || isNoVersion r
--    || isNoVersion r'
--   </pre>
simplifyVersionRange :: VersionRange -> VersionRange

-- | Is this version range in fact just a specific version?
--   
--   For example the version range <tt>"&gt;= 3 &amp;&amp; &lt;= 3"</tt>
--   contains only the version <tt>3</tt>.
isSpecificVersion :: VersionRange -> Maybe Version

-- | This is the converse of <a>isAnyVersion</a>. It check if the version
--   range is empty, if there is no possible version that satisfies the
--   version range.
--   
--   For example this is <tt>True</tt> (for all <tt>v</tt>):
--   
--   <pre>
--   isNoVersion (EarlierVersion v `IntersectVersionRanges` LaterVersion v)
--   </pre>
isNoVersion :: VersionRange -> Bool

-- | Does this <a>VersionRange</a> place any restriction on the
--   <a>Version</a> or is it in fact equivalent to <a>AnyVersion</a>.
--   
--   Note this is a semantic check, not simply a syntactic check. So for
--   example the following is <tt>True</tt> (for all <tt>v</tt>).
--   
--   <pre>
--   isAnyVersion (EarlierVersion v `UnionVersionRanges` orLaterVersion v)
--   </pre>
isAnyVersion :: VersionRange -> Bool

-- | Convert <a>AbiHash</a> to <a>String</a>
mkAbiHash :: String -> AbiHash

-- | Construct a <a>AbiHash</a> from a <a>String</a>
--   
--   <a>mkAbiHash</a> is the inverse to <a>unAbiHash</a>
--   
--   Note: No validations are performed to ensure that the resulting
--   <a>AbiHash</a> is valid
unAbiHash :: AbiHash -> String

-- | ABI Hashes
--   
--   Use <a>mkAbiHash</a> and <a>unAbiHash</a> to convert from/to a
--   <a>String</a>.
--   
--   This type is opaque since <tt>Cabal-2.0</tt>
data AbiHash

-- | Convert <a>ComponentId</a> to <a>String</a>
unComponentId :: ComponentId -> String

-- | Construct a <a>ComponentId</a> from a <a>String</a>
--   
--   <a>mkComponentId</a> is the inverse to <a>unComponentId</a>
--   
--   Note: No validations are performed to ensure that the resulting
--   <a>ComponentId</a> is valid
mkComponentId :: String -> ComponentId

-- | A <a>ComponentId</a> uniquely identifies the transitive source code
--   closure of a component (i.e. libraries, executables).
--   
--   For non-Backpack components, this corresponds one to one with the
--   <tt>UnitId</tt>, which serves as the basis for install paths, linker
--   symbols, etc.
--   
--   Use <a>mkComponentId</a> and <a>unComponentId</a> to convert from/to a
--   <a>String</a>.
--   
--   This type is opaque since <tt>Cabal-2.0</tt>
data ComponentId

-- | Construct a <a>PkgconfigName</a> from a <a>String</a>
--   
--   <a>mkPkgconfigName</a> is the inverse to <a>unPkgconfigName</a>
--   
--   Note: No validations are performed to ensure that the resulting
--   <a>PkgconfigName</a> is valid
mkPkgconfigName :: String -> PkgconfigName

-- | Convert <a>PkgconfigName</a> to <a>String</a>
unPkgconfigName :: PkgconfigName -> String

-- | A pkg-config library name
--   
--   This is parsed as any valid argument to the pkg-config utility.
data PkgconfigName
invertVersionIntervals :: VersionIntervals -> VersionIntervals
intersectVersionIntervals :: VersionIntervals -> VersionIntervals -> VersionIntervals
unionVersionIntervals :: VersionIntervals -> VersionIntervals -> VersionIntervals

-- | Convert a <a>VersionIntervals</a> value back into a
--   <a>VersionRange</a> expression representing the version intervals.
fromVersionIntervals :: VersionIntervals -> VersionRange

-- | Convert a <a>VersionRange</a> to a sequence of version intervals.
toVersionIntervals :: VersionRange -> VersionIntervals

-- | Test if a version falls within the version intervals.
--   
--   It exists mostly for completeness and testing. It satisfies the
--   following properties:
--   
--   <pre>
--   withinIntervals v (toVersionIntervals vr) = withinRange v vr
--   withinIntervals v ivs = withinRange v (fromVersionIntervals ivs)
--   </pre>
withinIntervals :: Version -> VersionIntervals -> Bool

-- | Directly construct a <a>VersionIntervals</a> from a list of intervals.
--   
--   In <tt>Cabal-2.2</tt> the <a>Maybe</a> is dropped from the result
--   type.
mkVersionIntervals :: [VersionInterval] -> VersionIntervals

-- | Inspect the list of version intervals.
versionIntervals :: VersionIntervals -> [VersionInterval]

-- | View a <a>VersionRange</a> as a union of intervals.
--   
--   This provides a canonical view of the semantics of a
--   <a>VersionRange</a> as opposed to the syntax of the expression used to
--   define it. For the syntactic view use <a>foldVersionRange</a>.
--   
--   Each interval is non-empty. The sequence is in increasing order and no
--   intervals overlap or touch. Therefore only the first and last can be
--   unbounded. The sequence can be empty if the range is empty (e.g. a
--   range expression like <tt><a>&amp;&amp;</a> 2</tt>).
--   
--   Other checks are trivial to implement using this view. For example:
--   
--   <pre>
--   isNoVersion vr | [] &lt;- asVersionIntervals vr = True
--                  | otherwise                   = False
--   </pre>
--   
--   <pre>
--   isSpecificVersion vr
--      | [(LowerBound v  InclusiveBound
--         ,UpperBound v' InclusiveBound)] &lt;- asVersionIntervals vr
--      , v == v'   = Just v
--      | otherwise = Nothing
--   </pre>
asVersionIntervals :: VersionRange -> [VersionInterval]

-- | A complementary representation of a <a>VersionRange</a>. Instead of a
--   boolean version predicate it uses an increasing sequence of
--   non-overlapping, non-empty intervals.
--   
--   The key point is that this representation gives a canonical
--   representation for the semantics of <a>VersionRange</a>s. This makes
--   it easier to check things like whether a version range is empty,
--   covers all versions, or requires a certain minimum or maximum version.
--   It also makes it easy to check equality or containment. It also makes
--   it easier to identify 'simple' version predicates for translation into
--   foreign packaging systems that do not support complex version range
--   expressions.
data VersionIntervals
type VersionInterval = (LowerBound, UpperBound)
data LowerBound
LowerBound :: Version -> !Bound -> LowerBound
data UpperBound
NoUpperBound :: UpperBound
UpperBound :: Version -> !Bound -> UpperBound
data Bound
ExclusiveBound :: Bound
InclusiveBound :: Bound

-- | Does the version range have an explicit lower bound?
--   
--   Note: this function only considers the user-specified lower bounds,
--   but not the implicit &gt;=0 lower bound.
hasLowerBound :: VersionRange -> Bool

-- | Does the version range have an upper bound?
hasUpperBound :: VersionRange -> Bool

-- | Compute next greater major version to be used as upper bound
--   
--   Example: <tt>0.4.1</tt> produces the version <tt>0.5</tt> which then
--   can be used to construct a range <tt>&gt;= 0.4.1 &amp;&amp; &lt;
--   0.5</tt>
majorUpperBound :: Version -> Version

wildcardUpperBound :: Version -> Version

-- | Does this version fall within the given range?
--   
--   This is the evaluation function for the <a>VersionRange</a> type.
withinRange :: Version -> VersionRange -> Bool

-- | Remove <a>VersionRangeParens</a> constructors.
stripParensVersionRange :: VersionRange -> VersionRange

-- | Normalise <a>VersionRange</a>.
--   
--   In particular collapse <tt>(== v || &gt; v)</tt> into <tt>&gt;=
--   v</tt>, and so on.
normaliseVersionRange :: VersionRange -> VersionRange

-- | Refold <a>VersionRange</a>
hyloVersionRange :: (VersionRangeF VersionRange -> VersionRange) -> (VersionRange -> VersionRangeF VersionRange) -> VersionRange -> VersionRange

-- | Fold over the basic syntactic structure of a <a>VersionRange</a>.
--   
--   This provides a syntactic view of the expression defining the version
--   range. The syntactic sugar <tt>"&gt;= v"</tt>, <tt>"&lt;= v"</tt> and
--   <tt>"== v.*"</tt> is presented in terms of the other basic syntax.
--   
--   For a semantic view use <tt>asVersionIntervals</tt>.
foldVersionRange :: () => a -> (Version -> a) -> (Version -> a) -> (Version -> a) -> (a -> a -> a) -> (a -> a -> a) -> VersionRange -> a

-- | Unfold <a>VersionRange</a>.
anaVersionRange :: () => (a -> VersionRangeF a) -> a -> VersionRange

embedVersionRange :: VersionRangeF VersionRange -> VersionRange

-- | Fold <a>VersionRange</a>.
cataVersionRange :: () => (VersionRangeF a -> a) -> VersionRange -> a

projectVersionRange :: VersionRange -> VersionRangeF VersionRange

-- | The version range <tt>^&gt;= v</tt>.
--   
--   For example, for version <tt>1.2.3.4</tt>, the version range
--   <tt>^&gt;= 1.2.3.4</tt> is the same as <tt>&gt;= 1.2.3.4 &amp;&amp;
--   &lt; 1.3</tt>.
--   
--   Note that <tt>^&gt;= 1</tt> is equivalent to <tt>&gt;= 1 &amp;&amp;
--   &lt; 1.1</tt>.
majorBoundVersion :: Version -> VersionRange

-- | The version range <tt>== v.*</tt>.
--   
--   For example, for version <tt>1.2</tt>, the version range <tt>==
--   1.2.*</tt> is the same as <tt>&gt;= 1.2 &amp;&amp; &lt; 1.3</tt>
--   
--   <pre>
--   withinRange v' (laterVersion v) = v' &gt;= v &amp;&amp; v' &lt; upper v
--     where
--       upper (Version lower t) = Version (init lower ++ [last lower + 1]) t
--   </pre>
withinVersion :: Version -> VersionRange

-- | The version range <tt>vr1 &amp;&amp; vr2</tt>
--   
--   <pre>
--     withinRange v' (intersectVersionRanges vr1 vr2)
--   = withinRange v' vr1 &amp;&amp; withinRange v' vr2
--   </pre>
intersectVersionRanges :: VersionRange -> VersionRange -> VersionRange

-- | The version range <tt>vr1 || vr2</tt>
--   
--   <pre>
--     withinRange v' (unionVersionRanges vr1 vr2)
--   = withinRange v' vr1 || withinRange v' vr2
--   </pre>
unionVersionRanges :: VersionRange -> VersionRange -> VersionRange

-- | The version range <tt>&lt;= v</tt>
--   
--   <pre>
--   withinRange v' (orEarlierVersion v) = v' &lt;= v
--   </pre>
orEarlierVersion :: Version -> VersionRange

-- | The version range <tt>&lt; v</tt>
--   
--   <pre>
--   withinRange v' (earlierVersion v) = v' &lt; v
--   </pre>
earlierVersion :: Version -> VersionRange

-- | The version range <tt>&gt;= v</tt>
--   
--   <pre>
--   withinRange v' (orLaterVersion v) = v' &gt;= v
--   </pre>
orLaterVersion :: Version -> VersionRange

-- | The version range <tt>&gt; v</tt>
--   
--   <pre>
--   withinRange v' (laterVersion v) = v' &gt; v
--   </pre>
laterVersion :: Version -> VersionRange

-- | The version range <tt><a>||</a> v</tt>
--   
--   <pre>
--   withinRange v' (notThisVersion v) = v' /= v
--   </pre>
notThisVersion :: Version -> VersionRange

-- | The version range <tt>== v</tt>
--   
--   <pre>
--   withinRange v' (thisVersion v) = v' == v
--   </pre>
thisVersion :: Version -> VersionRange

-- | The empty version range, that is a version range containing no
--   versions.
--   
--   This can be constructed using any unsatisfiable version range
--   expression, for example <tt>&gt; 1 &amp;&amp; &lt; 1</tt>.
--   
--   <pre>
--   withinRange v noVersion = False
--   </pre>
noVersion :: VersionRange

-- | The version range <tt>-any</tt>. That is, a version range containing
--   all versions.
--   
--   <pre>
--   withinRange v anyVersion = True
--   </pre>
anyVersion :: VersionRange
data VersionRange
AnyVersion :: VersionRange
ThisVersion :: Version -> VersionRange
LaterVersion :: Version -> VersionRange
OrLaterVersion :: Version -> VersionRange
EarlierVersion :: Version -> VersionRange
OrEarlierVersion :: Version -> VersionRange
WildcardVersion :: Version -> VersionRange
MajorBoundVersion :: Version -> VersionRange
UnionVersionRanges :: VersionRange -> VersionRange -> VersionRange
IntersectVersionRanges :: VersionRange -> VersionRange -> VersionRange
VersionRangeParens :: VersionRange -> VersionRange

-- | F-Algebra of <a>VersionRange</a>. See <a>cataVersionRange</a>.
data VersionRangeF a
AnyVersionF :: VersionRangeF a
ThisVersionF :: Version -> VersionRangeF a
LaterVersionF :: Version -> VersionRangeF a
OrLaterVersionF :: Version -> VersionRangeF a
EarlierVersionF :: Version -> VersionRangeF a
OrEarlierVersionF :: Version -> VersionRangeF a
WildcardVersionF :: Version -> VersionRangeF a
MajorBoundVersionF :: Version -> VersionRangeF a
UnionVersionRangesF :: a -> a -> VersionRangeF a
IntersectVersionRangesF :: a -> a -> VersionRangeF a
VersionRangeParensF :: a -> VersionRangeF a
showVersion :: Version -> String

-- | Apply function to list of version number components
--   
--   <pre>
--   alterVersion f == mkVersion . f . versionNumbers
--   </pre>
alterVersion :: ([Int] -> [Int]) -> Version -> Version

-- | Constant representing the special <i>null</i> <a>Version</a>
--   
--   The <a>nullVersion</a> compares (via <a>Ord</a>) as less than every
--   proper <a>Version</a> value.
nullVersion :: Version

-- | Unpack <a>Version</a> into list of version number components.
--   
--   This is the inverse to <a>mkVersion</a>, so the following holds:
--   
--   <pre>
--   (versionNumbers . mkVersion) vs == vs
--   </pre>
versionNumbers :: Version -> [Int]

-- | Variant of <a>mkVersion</a> which converts a <a>Data.Version</a>
--   <a>Version</a> into Cabal's <a>Version</a> type.
mkVersion' :: Version -> Version

-- | Version 0. A lower bound of <a>Version</a>.
version0 :: Version

-- | Construct <a>Version</a> from list of version number components.
--   
--   For instance, <tt>mkVersion [3,2,1]</tt> constructs a <a>Version</a>
--   representing the version <tt>3.2.1</tt>.
--   
--   All version components must be non-negative. <tt>mkVersion []</tt>
--   currently represents the special <i>null</i> version; see also
--   <a>nullVersion</a>.
mkVersion :: [Int] -> Version

-- | A <a>Version</a> represents the version of a software entity.
--   
--   Instances of <a>Eq</a> and <a>Ord</a> are provided, which gives exact
--   equality and lexicographic ordering of the version number components
--   (i.e. 2.1 &gt; 2.0, 1.2.3 &gt; 1.2.2, etc.).
--   
--   This type is opaque and distinct from the <a>Version</a> type in
--   <a>Data.Version</a> since <tt>Cabal-2.0</tt>. The difference extends
--   to the <a>Binary</a> instance using a different (and more compact)
--   encoding.
data Version


module Data.Array.Accelerate.LLVM.Native.Foreign
data ForeignAcc f
[ForeignAcc] :: String -> (a -> Par Native (Future b)) -> ForeignAcc (a -> b)
data ForeignExp f
[ForeignExp] :: String -> IRFun1 Native () (x -> y) -> ForeignExp (x -> y)

-- | The LLVM monad, for executing array computations. This consists of a
--   stack for the LLVM execution context as well as the per-execution
--   target specific state <tt>target</tt>.
data LLVM target a

-- | Native machine code JIT execution target
data Native
Native :: !LinkCache -> !Workers -> !Bool -> Native
[linkCache] :: Native -> !LinkCache
[workers] :: Native -> !Workers
[segmentOffset] :: Native -> !Bool

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => IO a -> m a

-- | Copy an array into a newly allocated array. This uses <a>memcpy</a>.
cloneArray :: (Shape sh, Elt e) => Array sh e -> LLVM Native (Array sh e)
class Monad Par arch => Async arch where {
    
    -- | The monad parallel computations will be executed in. Presumably a
    --   stack with the LLVM monad at the base.
    data family Par arch a :: Type;
    
    -- | Parallel computations can communicate via futures.
    type family FutureR arch :: Type -> Type;
}

-- | Create a new (empty) promise, to be fulfilled at some future point.
new :: Async arch => Par arch (FutureR arch a)

-- | The future is here. Multiple <a>put</a>s to the same future are not
--   allowed and (presumably) result in a runtime error.
put :: Async arch => FutureR arch a -> a -> Par arch ()

-- | Read the value stored in a future, once it is available. It is _not_
--   required that this is a blocking operation on the host, only that it
--   is blocking with respect to computations on the remote device.
get :: Async arch => FutureR arch a -> Par arch a

-- | Fork a computation to happen in parallel. The forked computation may
--   exchange values with other computations using Futures.
fork :: Async arch => Par arch () -> Par arch ()

-- | Read a value stored in a future, once it is available. This is
--   blocking with respect to both the host and remote device.
block :: Async arch => FutureR arch a -> Par arch a

-- | Evaluate a computation in a new thread/context. This might be
--   implemented more efficiently than the default implementation.
spawn :: Async arch => Par arch (FutureR arch a) -> Par arch (FutureR arch a)

-- | Create a new "future" where the value is available immediately. This
--   might be implemented more efficiently than the default implementation.
newFull :: Async arch => a -> Par arch (FutureR arch a)
data Future a
Future :: {-# UNPACK #-} !IORef (IVar a) -> Future a
data IVar a
Full :: !a -> IVar a
Blocked :: !Seq (a -> IO ()) -> IVar a
Empty :: IVar a

-- | Evaluate a parallel computation
--   
--   The worker threads execute the computation, while the calling thread
--   effectively sleeps waiting for the result.
evalPar :: Par Native a -> LLVM Native a

-- | Lift an operation from the base LLVM monad into the Par monad
liftPar :: LLVM Native a -> Par Native a

-- | The value represented by a future is now available. Push any blocked
--   continuations to the worker threads.
putIO :: Workers -> Future a -> a -> IO ()
instance Data.Array.Accelerate.LLVM.Foreign.Foreign Data.Array.Accelerate.LLVM.Native.Target.Native
instance Data.Array.Accelerate.Array.Sugar.Foreign Data.Array.Accelerate.LLVM.Native.Foreign.ForeignExp
instance Data.Array.Accelerate.Array.Sugar.Foreign Data.Array.Accelerate.LLVM.Native.Foreign.ForeignAcc


-- | This module implements a backend for the <i>Accelerate</i> language
--   targeting multicore CPUs. Expressions are on-line translated into LLVM
--   code, which is just-in-time executed in parallel over the available
--   CPUs. Functions are automatically parallelised over all available
--   cores, unless you set the environment variable
--   'ACCELERATE_LLVM_NATIVE_THREADS=N', in which case <tt>N</tt> threads
--   will be used.
--   
--   Programs must be compiled with '-threaded', otherwise you will get a
--   "Blocked indefinitely on MVar" error.
module Data.Array.Accelerate.LLVM.Native

-- | Accelerate is an <i>embedded language</i> that distinguishes between
--   vanilla arrays (e.g. in Haskell memory on the CPU) and embedded arrays
--   (e.g. in device memory on a GPU), as well as the computations on both
--   of these. Since Accelerate is an embedded language, programs written
--   in Accelerate are not compiled by the Haskell compiler (GHC). Rather,
--   each Accelerate backend is a <i>runtime compiler</i> which generates
--   and executes parallel SIMD code of the target language at application
--   <i>runtime</i>.
--   
--   The type constructor <a>Acc</a> represents embedded collective array
--   operations. A term of type <tt>Acc a</tt> is an Accelerate program
--   which, once executed, will produce a value of type <tt>a</tt> (an
--   <a>Array</a> or a tuple of <a>Arrays</a>). Collective operations of
--   type <tt>Acc a</tt> comprise many <i>scalar expressions</i>, wrapped
--   in type constructor <a>Exp</a>, which will be executed in parallel.
--   Although collective operations comprise many scalar operations
--   executed in parallel, scalar operations <i>cannot</i> initiate new
--   collective operations: this stratification between scalar operations
--   in <a>Exp</a> and array operations in <a>Acc</a> helps statically
--   exclude <i>nested data parallelism</i>, which is difficult to execute
--   efficiently on constrained hardware such as GPUs.
--   
--   <ul>
--   <li><i><i>A simple example</i></i></li>
--   </ul>
--   
--   As a simple example, to compute a vector dot product we can write:
--   
--   <pre>
--   dotp :: Num a =&gt; Vector a -&gt; Vector a -&gt; Acc (Scalar a)
--   dotp xs ys =
--     let
--         xs' = use xs
--         ys' = use ys
--     in
--     fold (+) 0 ( zipWith (*) xs' ys' )
--   </pre>
--   
--   The function <tt>dotp</tt> consumes two one-dimensional arrays
--   (<a>Vector</a>s) of values, and produces a single (<a>Scalar</a>)
--   result as output. As the return type is wrapped in the type
--   <a>Acc</a>, we see that it is an embedded Accelerate computation - it
--   will be evaluated in the <i>object</i> language of dynamically
--   generated parallel code, rather than the <i>meta</i> language of
--   vanilla Haskell.
--   
--   As the arguments to <tt>dotp</tt> are plain Haskell arrays, to make
--   these available to Accelerate computations they must be embedded with
--   the <a>use</a> function.
--   
--   An Accelerate backend is used to evaluate the embedded computation and
--   return the result back to vanilla Haskell. Calling the <tt>run</tt>
--   function of a backend will generate code for the target architecture,
--   compile, and execute it. For example, the following backends are
--   available:
--   
--   <ul>
--   <li><a>accelerate-llvm-native</a>: for execution on multicore
--   CPUs</li>
--   <li><a>accelerate-llvm-ptx</a>: for execution on NVIDIA CUDA-capable
--   GPUs</li>
--   </ul>
--   
--   See also <a>Exp</a>, which encapsulates embedded <i>scalar</i>
--   computations.
--   
--   <ul>
--   <li><i><i>Avoiding nested parallelism</i></i></li>
--   </ul>
--   
--   As mentioned above, embedded scalar computations of type <a>Exp</a>
--   can not initiate further collective operations.
--   
--   Suppose we wanted to extend our above <tt>dotp</tt> function to
--   matrix-vector multiplication. First, let's rewrite our <tt>dotp</tt>
--   function to take <a>Acc</a> arrays as input (which is typically what
--   we want):
--   
--   <pre>
--   dotp :: Num a =&gt; Acc (Vector a) -&gt; Acc (Vector a) -&gt; Acc (Scalar a)
--   dotp xs ys = fold (+) 0 ( zipWith (*) xs ys )
--   </pre>
--   
--   We might then be inclined to lift our dot-product program to the
--   following (incorrect) matrix-vector product, by applying <tt>dotp</tt>
--   to each row of the input matrix:
--   
--   <pre>
--   mvm_ndp :: Num a =&gt; Acc (Matrix a) -&gt; Acc (Vector a) -&gt; Acc (Vector a)
--   mvm_ndp mat vec =
--     let Z :. rows :. cols  = unlift (shape mat)  :: Z :. Exp Int :. Exp Int
--     in  generate (index1 rows)
--                  (\row -&gt; the $ dotp vec (slice mat (lift (row :. All))))
--   </pre>
--   
--   Here, we use <a>generate</a> to create a one-dimensional vector by
--   applying at each index a function to <a>slice</a> out the
--   corresponding <tt>row</tt> of the matrix to pass to the <tt>dotp</tt>
--   function. However, since both <a>generate</a> and <a>slice</a> are
--   data-parallel operations, and moreover that <a>slice</a> <i>depends
--   on</i> the argument <tt>row</tt> given to it by the <a>generate</a>
--   function, this definition requires nested data-parallelism, and is
--   thus not permitted. The clue that this definition is invalid is that
--   in order to create a program which will be accepted by the type
--   checker, we must use the function <a>the</a> to retrieve the result of
--   the <tt>dotp</tt> operation, effectively concealing that <tt>dotp</tt>
--   is a collective array computation in order to match the type expected
--   by <a>generate</a>, which is that of scalar expressions. Additionally,
--   since we have fooled the type-checker, this problem will only be
--   discovered at program runtime.
--   
--   In order to avoid this problem, we can make use of the fact that
--   operations in Accelerate are <i>rank polymorphic</i>. The <a>fold</a>
--   operation reduces along the innermost dimension of an array of
--   arbitrary rank, reducing the rank (dimensionality) of the array by
--   one. Thus, we can <a>replicate</a> the input vector to as many
--   <tt>rows</tt> there are in the input matrix, and perform the
--   dot-product of the vector with every row simultaneously:
--   
--   <pre>
--   mvm :: A.Num a =&gt; Acc (Matrix a) -&gt; Acc (Vector a) -&gt; Acc (Vector a)
--   mvm mat vec =
--     let Z :. rows :. cols = unlift (shape mat) :: Z :. Exp Int :. Exp Int
--         vec'              = A.replicate (lift (Z :. rows :. All)) vec
--     in
--     A.fold (+) 0 ( A.zipWith (*) mat vec' )
--   </pre>
--   
--   Note that the intermediate, replicated array <tt>vec'</tt> is never
--   actually created in memory; it will be fused directly into the
--   operation which consumes it. We discuss fusion next.
--   
--   <ul>
--   <li><i><i>Fusion</i></i></li>
--   </ul>
--   
--   Array computations of type <a>Acc</a> will be subject to <i>array
--   fusion</i>; Accelerate will combine individual <a>Acc</a> computations
--   into a single computation, which reduces the number of traversals over
--   the input data and thus improves performance. As such, it is often
--   useful to have some intuition on when fusion should occur.
--   
--   The main idea is to first partition array operations into two
--   categories:
--   
--   <ol>
--   <li>Element-wise operations, such as <a>map</a>, <a>generate</a>, and
--   <a>backpermute</a>. Each element of these operations can be computed
--   independently of all others.</li>
--   <li>Collective operations such as <a>fold</a>, <a>scanl</a>, and
--   <a>stencil</a>. To compute each output element of these operations
--   requires reading multiple elements from the input array(s).</li>
--   </ol>
--   
--   Element-wise operations fuse together whenever the consumer operation
--   uses a single element of the input array. Element-wise operations can
--   both fuse their inputs into themselves, as well be fused into later
--   operations. Both these examples should fuse into a single loop:
--   
--   
--   
--   If the consumer operation uses more than one element of the input
--   array (typically, via <a>generate</a> indexing an array multiple
--   times), then the input array will be completely evaluated first; no
--   fusion occurs in this case, because fusing the first operation into
--   the second implies duplicating work.
--   
--   On the other hand, collective operations can fuse their input arrays
--   into themselves, but on output always evaluate to an array; collective
--   operations will not be fused into a later step. For example:
--   
--   
--   Here the element-wise sequence (<a>use</a> + <a>generate</a> +
--   <a>zipWith</a>) will fuse into a single operation, which then fuses
--   into the collective <a>fold</a> operation. At this point in the
--   program the <a>fold</a> must now be evaluated. In the final step the
--   <a>map</a> reads in the array produced by <a>fold</a>. As there is no
--   fusion between the <a>fold</a> and <a>map</a> steps, this program
--   consists of two "loops"; one for the <a>use</a> + <a>generate</a> +
--   <a>zipWith</a> + <a>fold</a> step, and one for the final <a>map</a>
--   step.
--   
--   You can see how many operations will be executed in the fused program
--   by <a>Show</a>-ing the <a>Acc</a> program, or by using the debugging
--   option <tt>-ddump-dot</tt> to save the program as a graphviz DOT file.
--   
--   As a special note, the operations <a>unzip</a> and <a>reshape</a>,
--   when applied to a real array, are executed in constant time, so in
--   this situation these operations will not be fused.
--   
--   <ul>
--   <li><i><i>Tips</i></i></li>
--   </ul>
--   
--   <ul>
--   <li>Since <a>Acc</a> represents embedded computations that will only
--   be executed when evaluated by a backend, we can programatically
--   generate these computations using the meta language Haskell; for
--   example, unrolling loops or embedding input values into the generated
--   code.</li>
--   <li>It is usually best to keep all intermediate computations in
--   <a>Acc</a>, and only <tt>run</tt> the computation at the very end to
--   produce the final result. This enables optimisations between
--   intermediate results (e.g. array fusion) and, if the target
--   architecture has a separate memory space, as is the case of GPUs, to
--   prevent excessive data transfers.</li>
--   </ul>
data Acc a

-- | The <a>Arrays</a> class characterises the types which can appear in
--   collective Accelerate computations of type <a>Acc</a>.
--   
--   <a>Arrays</a> consists of nested tuples of individual <a>Array</a>s,
--   currently up to 16-elements wide. Accelerate computations can thereby
--   return multiple results.
class (Typeable a, Typeable ArrRepr a) => Arrays a
class Afunction f
type family AfunctionR f :: Type

-- | Compile and run a complete embedded array program.
--   
--   <i>NOTE:</i> it is recommended to use <a>runN</a> or <a>runQ</a>
--   whenever possible.
run :: Arrays a => Acc a -> a

-- | As <a>run</a>, but execute using the specified target (thread gang).
runWith :: Arrays a => Native -> Acc a -> a

-- | This is <a>runN</a>, specialised to an array program of one argument.
run1 :: (Arrays a, Arrays b) => (Acc a -> Acc b) -> a -> b

-- | As <a>run1</a>, but execute using the specified target (thread gang).
run1With :: (Arrays a, Arrays b) => Native -> (Acc a -> Acc b) -> a -> b

-- | Prepare and execute an embedded array program.
--   
--   This function can be used to improve performance in cases where the
--   array program is constant between invocations, because it enables us
--   to bypass front-end conversion stages and move directly to the
--   execution phase. If you have a computation applied repeatedly to
--   different input data, use this, specifying any changing aspects of the
--   computation via the input parameters. If the function is only
--   evaluated once, this is equivalent to <a>run</a>.
--   
--   In order to use <a>runN</a> you must express your Accelerate program
--   as a function of array terms:
--   
--   <pre>
--   f :: (Arrays a, Arrays b, ... Arrays c) =&gt; Acc a -&gt; Acc b -&gt; ... -&gt; Acc c
--   </pre>
--   
--   This function then returns the compiled version of <tt>f</tt>:
--   
--   <pre>
--   runN f :: (Arrays a, Arrays b, ... Arrays c) =&gt; a -&gt; b -&gt; ... -&gt; c
--   </pre>
--   
--   At an example, rather than:
--   
--   <pre>
--   step :: Acc (Vector a) -&gt; Acc (Vector b)
--   step = ...
--   
--   simulate :: Vector a -&gt; Vector b
--   simulate xs = run $ step (use xs)
--   </pre>
--   
--   Instead write:
--   
--   <pre>
--   simulate = runN step
--   </pre>
--   
--   You can use the debugging options to check whether this is working
--   successfully. For example, running with the <tt>-ddump-phases</tt>
--   flag should show that the compilation steps only happen once, not on
--   the second and subsequent invocations of <tt>simulate</tt>. Note that
--   this typically relies on GHC knowing that it can lift out the function
--   returned by <a>runN</a> and reuse it.
--   
--   See the programs in the 'accelerate-examples' package for examples.
--   
--   See also <a>runQ</a>, which compiles the Accelerate program at
--   _Haskell_ compile time, thus eliminating the runtime overhead
--   altogether.
runN :: Afunction f => f -> AfunctionR f

-- | As <a>runN</a>, but execute using the specified target (thread gang).
runNWith :: Afunction f => Native -> f -> AfunctionR f

-- | Stream a lazily read list of input arrays through the given program,
--   collecting results as we go.
stream :: (Arrays a, Arrays b) => (Acc a -> Acc b) -> [a] -> [b]

-- | As <a>stream</a>, but execute using the specified target (thread
--   gang).
streamWith :: (Arrays a, Arrays b) => Native -> (Acc a -> Acc b) -> [a] -> [b]
data Async a

-- | Block the calling thread until the computation completes, then return
--   the result.
wait :: () => Async a -> IO a

-- | Test whether the asynchronous computation has already completed. If
--   so, return the result, else <a>Nothing</a>.
poll :: () => Async a -> IO (Maybe a)

-- | Cancel a running asynchronous computation.
cancel :: () => Async a -> IO ()

-- | As <a>run</a>, but allow the computation to run asynchronously and
--   return immediately without waiting for the result. The status of the
--   computation can be queried using <a>wait</a>, <a>poll</a>, and
--   <a>cancel</a>.
runAsync :: Arrays a => Acc a -> IO (Async a)

-- | As <a>runAsync</a>, but execute using the specified target (thread
--   gang).
runAsyncWith :: Arrays a => Native -> Acc a -> IO (Async a)

-- | As <a>run1</a>, but execute asynchronously.
run1Async :: (Arrays a, Arrays b) => (Acc a -> Acc b) -> a -> IO (Async b)

-- | As <a>run1Async</a>, but execute using the specified target (thread
--   gang).
run1AsyncWith :: (Arrays a, Arrays b) => Native -> (Acc a -> Acc b) -> a -> IO (Async b)

-- | As <a>runN</a>, but execute asynchronously.
runNAsync :: (Afunction f, RunAsync r, AfunctionR f ~ RunAsyncR r) => f -> r

-- | As <a>runNWith</a>, but execute asynchronously.
runNAsyncWith :: (Afunction f, RunAsync r, AfunctionR f ~ RunAsyncR r) => Native -> f -> r

-- | Ahead-of-time compilation for an embedded array program.
--   
--   This function will generate, compile, and link into the final
--   executable, code to execute the given Accelerate computation <i>at
--   Haskell compile time</i>. This eliminates any runtime overhead
--   associated with the other <tt>run*</tt> operations. The generated code
--   will be optimised for the compiling architecture.
--   
--   Since the Accelerate program will be generated at Haskell compile
--   time, construction of the Accelerate program, in particular via
--   meta-programming, will be limited to operations available to that
--   phase. Also note that any arrays which are embedded into the program
--   via <a>use</a> will be stored as part of the final executable.
--   
--   Usage of this function in your program is similar to that of
--   <a>runN</a>. First, express your Accelerate program as a function of
--   array terms:
--   
--   <pre>
--   f :: (Arrays a, Arrays b, ... Arrays c) =&gt; Acc a -&gt; Acc b -&gt; ... -&gt; Acc c
--   </pre>
--   
--   This function then returns a compiled version of <tt>f</tt> as a
--   Template Haskell splice, to be added into your program at Haskell
--   compile time:
--   
--   <pre>
--   {-# LANGUAGE TemplateHaskell #-}
--   
--   f' :: a -&gt; b -&gt; ... -&gt; c
--   f' = $( runQ f )
--   </pre>
--   
--   Note that at the splice point the usage of <tt>f</tt> must
--   monomorphic; i.e. the types <tt>a</tt>, <tt>b</tt> and <tt>c</tt> must
--   be at some known concrete type.
--   
--   See the <a>lulesh-accelerate</a> project for an example.
--   
--   <ul>
--   <li><i><i>Note:</i></i></li>
--   </ul>
--   
--   It is recommended to use GHC-8.6 or later. Earlier GHC versions can
--   successfully build executables utilising <a>runQ</a>, but fail to
--   correctly link libraries containing this function.
--   
--   <ul>
--   <li><i><i>Note:</i></i></li>
--   </ul>
--   
--   Due to <a>GHC#13587</a>, this currently must be as an <i>untyped</i>
--   splice.
--   
--   The correct type of this function is similar to that of <a>runN</a>:
--   
--   <pre>
--   runQ :: Afunction f =&gt; f -&gt; Q (TExp (AfunctionR f))
--   </pre>
runQ :: Afunction f => f -> ExpQ

-- | Ahead-of-time analogue of <a>runNWith</a>. See <a>runQ</a> for more
--   information.
--   
--   The correct type of this function is:
--   
--   <pre>
--   runQWith :: Afunction f =&gt; f -&gt; Q (TExp (Native -&gt; AfunctionR f))
--   </pre>
runQWith :: Afunction f => f -> ExpQ

-- | Ahead-of-time analogue of <a>runNAsync</a>. See <a>runQ</a> for more
--   information.
--   
--   The correct type of this function is:
--   
--   <pre>
--   runQAsync :: (Afunction f, RunAsync r, AfunctionR f ~ RunAsyncR r) =&gt; f -&gt; Q (TExp r)
--   </pre>
runQAsync :: Afunction f => f -> ExpQ

-- | Ahead-of-time analogue of <a>runNAsyncWith</a>. See <a>runQ</a> for
--   more information.
--   
--   The correct type of this function is:
--   
--   <pre>
--   runQAsyncWith :: (Afunction f, RunAsync r, AfunctionR f ~ RunAsyncR r) =&gt; f -&gt; Q (TExp (Native -&gt; r))
--   </pre>
runQAsyncWith :: Afunction f => f -> ExpQ

-- | Native machine code JIT execution target
data Native

-- | Create a Native execution target by spawning a worker thread on each
--   of the given capabilities.
createTarget :: [Int] -> IO Native
instance Data.Array.Accelerate.LLVM.Native.RunAsync b => Data.Array.Accelerate.LLVM.Native.RunAsync (a -> b)
instance Data.Array.Accelerate.LLVM.Native.RunAsync (GHC.Types.IO (Data.Array.Accelerate.Async.Async b))
