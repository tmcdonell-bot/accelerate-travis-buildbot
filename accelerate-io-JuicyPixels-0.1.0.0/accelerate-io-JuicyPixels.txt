-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read and write Accelerate arrays in various formats
--   
--   This package provides efficient conversion routines between a range of
--   array types and Accelerate arrays.
--   
--   Refer to the main <i>Accelerate</i> package for more information:
--   <a>http://hackage.haskell.org/package/accelerate</a>
@package accelerate-io-JuicyPixels
@version 0.1.0.0


module Data.Array.Accelerate.IO.Codec.Picture.Types

-- | The main type of this package, one that most functions work on, is
--   Image.
--   
--   Parameterized by the underlying pixel format it forms a rigid type. If
--   you wish to store images of different or unknown pixel formats use
--   <a>DynamicImage</a>.
--   
--   Image is essentially a rectangular pixel buffer of specified width and
--   height. The coordinates are assumed to start from the upper-left
--   corner of the image, with the horizontal position first and vertical
--   second.
data Image a
Image :: {-# UNPACK #-} !Int -> {-# UNPACK #-} !Int -> Vector (PixelBaseComponent a) -> Image a

-- | Width of the image in pixels
[imageWidth] :: Image a -> {-# UNPACK #-} !Int

-- | Height of the image in pixels.
[imageHeight] :: Image a -> {-# UNPACK #-} !Int

-- | Image pixel data. To extract pixels at a given position you should use
--   the helper functions.
--   
--   Internally pixel data is stored as consecutively packed lines from top
--   to bottom, scanned from left to right within individual lines, from
--   first to last color component within each pixel.
[imageData] :: Image a -> Vector (PixelBaseComponent a)

-- | Definition of pixels used in images. Each pixel has a color space, and
--   a representative component (Word8 or Float).
class (Storable PixelBaseComponent a, Num PixelBaseComponent a, Eq a) => Pixel a where {
    
    -- | Type of the pixel component, "classical" images would have Word8 type
    --   as their PixelBaseComponent, HDR image would have Float for instance
    type family PixelBaseComponent a :: Type;
}

-- | Type alias for 8bit greyscale pixels. For simplicity, greyscale pixels
--   use plain numbers instead of a separate type.
type Pixel8 = Word8

-- | Type alias for 16bit greyscale pixels.
type Pixel16 = Word16

-- | Type alias for 32bit greyscale pixels.
type Pixel32 = Word32

-- | Type alias for 32bit floating point greyscale pixels. The standard
--   bounded value range is mapped to the closed interval [0,1] i.e.
--   
--   <pre>
--   map promotePixel [0, 1 .. 255 :: Pixel8] == [0/255, 1/255 .. 1.0 :: PixelF]
--   </pre>
type PixelF = Float

-- | Pixel type storing 8bit Luminance (Y) and alpha (A) information.
--   Values are stored in the following order:
--   
--   <ul>
--   <li>Luminance</li>
--   <li>Alpha</li>
--   </ul>
data PixelYA8
PixelYA8 :: {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> PixelYA8
pattern PixelYA8_ :: Exp Pixel8 -> Exp Pixel8 -> Exp PixelYA8

-- | Pixel type storing 16bit Luminance (Y) and alpha (A) information.
--   Values are stored in the following order:
--   
--   <ul>
--   <li>Luminance</li>
--   <li>Alpha</li>
--   </ul>
data PixelYA16
PixelYA16 :: {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> PixelYA16
pattern PixelYA16_ :: Exp Pixel16 -> Exp Pixel16 -> Exp PixelYA16

-- | Classic pixel type storing 8bit red, green and blue (RGB) information.
--   Values are stored in the following order:
--   
--   <ul>
--   <li>Red</li>
--   <li>Green</li>
--   <li>Blue</li>
--   </ul>
data PixelRGB8
PixelRGB8 :: {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> PixelRGB8
pattern PixelRGB8_ :: Exp Pixel8 -> Exp Pixel8 -> Exp Pixel8 -> Exp PixelRGB8

-- | Pixel type storing 16bit red, green and blue (RGB) information. Values
--   are stored in the following order:
--   
--   <ul>
--   <li>Red</li>
--   <li>Green</li>
--   <li>Blue</li>
--   </ul>
data PixelRGB16
PixelRGB16 :: {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> PixelRGB16
pattern PixelRGB16_ :: Exp Pixel16 -> Exp Pixel16 -> Exp Pixel16 -> Exp PixelRGB16

-- | HDR pixel type storing floating point 32bit red, green and blue (RGB)
--   information. Same value range and comments apply as for <a>PixelF</a>.
--   Values are stored in the following order:
--   
--   <ul>
--   <li>Red</li>
--   <li>Green</li>
--   <li>Blue</li>
--   </ul>
data PixelRGBF
PixelRGBF :: {-# UNPACK #-} !PixelF -> {-# UNPACK #-} !PixelF -> {-# UNPACK #-} !PixelF -> PixelRGBF
pattern PixelRGBF_ :: Exp PixelF -> Exp PixelF -> Exp PixelF -> Exp PixelRGBF

-- | Classical pixel type storing 8bit red, green, blue and alpha (RGBA)
--   information. Values are stored in the following order:
--   
--   <ul>
--   <li>Red</li>
--   <li>Green</li>
--   <li>Blue</li>
--   <li>Alpha</li>
--   </ul>
data PixelRGBA8
PixelRGBA8 :: {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> PixelRGBA8
pattern PixelRGBA8_ :: Exp Pixel8 -> Exp Pixel8 -> Exp Pixel8 -> Exp Pixel8 -> Exp PixelRGBA8

-- | Pixel type storing 16bit red, green, blue and alpha (RGBA)
--   information. Values are stored in the following order:
--   
--   <ul>
--   <li>Red</li>
--   <li>Green</li>
--   <li>Blue</li>
--   <li>Alpha</li>
--   </ul>
data PixelRGBA16
PixelRGBA16 :: {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> PixelRGBA16
pattern PixelRGBA16_ :: Exp Pixel16 -> Exp Pixel16 -> Exp Pixel16 -> Exp Pixel16 -> Exp PixelRGBA16

-- | Pixel type storing 8bit cyan, magenta, yellow and black (CMYK)
--   information. Values are stored in the following order:
--   
--   <ul>
--   <li>Cyan</li>
--   <li>Magenta</li>
--   <li>Yellow</li>
--   <li>Black</li>
--   </ul>
data PixelCMYK8
PixelCMYK8 :: {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> PixelCMYK8
pattern PixelCMYK8_ :: Exp Pixel8 -> Exp Pixel8 -> Exp Pixel8 -> Exp Pixel8 -> Exp PixelCMYK8

-- | Pixel type storing 16bit cyan, magenta, yellow and black (CMYK)
--   information. Values are stored in the following order:
--   
--   <ul>
--   <li>Cyan</li>
--   <li>Magenta</li>
--   <li>Yellow</li>
--   <li>Black</li>
--   </ul>
data PixelCMYK16
PixelCMYK16 :: {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> {-# UNPACK #-} !Pixel16 -> PixelCMYK16
pattern PixelCMYK16_ :: Exp Pixel16 -> Exp Pixel16 -> Exp Pixel16 -> Exp Pixel16 -> Exp PixelCMYK16

-- | Pixel type storing 8bit luminance, blue difference and red difference
--   (YCbCr) information. Values are stored in the following order:
--   
--   <ul>
--   <li>Y (luminance)</li>
--   <li>Cb</li>
--   <li>Cr</li>
--   </ul>
data PixelYCbCr8
PixelYCbCr8 :: {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> PixelYCbCr8
pattern PixelYCbCr8_ :: Exp Pixel8 -> Exp Pixel8 -> Exp Pixel8 -> Exp PixelYCbCr8

-- | Pixel type storing value for the YCCK color space:
--   
--   <ul>
--   <li>Y (Luminance)</li>
--   <li>Cb</li>
--   <li>Cr</li>
--   <li>Black</li>
--   </ul>
data PixelYCbCrK8
PixelYCbCrK8 :: {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> {-# UNPACK #-} !Pixel8 -> PixelYCbCrK8
pattern PixelYCbCrK8_ :: Exp Pixel8 -> Exp Pixel8 -> Exp Pixel8 -> Exp Pixel8 -> Exp PixelYCbCrK8
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelYA8
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelYA16
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGB8
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGB16
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGBF
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGBA8
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGBA16
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelCMYK8
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelCMYK16
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelYCbCr8
instance Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelYCbCrK8
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelYA8
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelYA16
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGB8
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGB16
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGBF
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGBA8
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelRGBA16
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelCMYK8
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelCMYK16
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelYCbCr8
instance Data.Array.Accelerate.Product.IsProduct Data.Array.Accelerate.Array.Sugar.Elt Codec.Picture.Types.PixelYCbCrK8


module Data.Array.Accelerate.IO.Codec.Picture

-- | <i>O(1)</i>. Convert an Accelerate <a>Array</a> into an <a>Image</a>.
imageOfArray :: (Elt pixel, Vector (PixelBaseComponent pixel) ~ Vectors (EltRepr pixel)) => Array DIM2 pixel -> Image pixel

-- | <i>O(1)</i>. Convert an <a>Image</a> into an Accelerate <a>Array</a>.
arrayOfImage :: (Elt pixel, Vector (PixelBaseComponent pixel) ~ Vectors (EltRepr pixel)) => Image pixel -> Array DIM2 pixel
