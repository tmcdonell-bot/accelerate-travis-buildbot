-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Tools for working with derived `Show` instances and generic
--   inspection of values.
--   
--   We provide a library and an executable for working with derived
--   <a>Show</a> instances. By using the library, we can parse derived
--   <a>Show</a> instances into a generic data structure. The <tt>ppsh</tt>
--   tool uses the library to produce human-readable versions of
--   <a>Show</a> instances, which can be quite handy for debugging Haskell
--   programs. We can also render complex generic values into an
--   interactive Html page, for easier examination.
@package pretty-show
@version 1.9.5


-- | Functions for human-readable derived <a>Show</a> instances.
module Text.Show.Pretty

-- | Generic Haskell values. <tt>NaN</tt> and <tt>Infinity</tt> are
--   represented as constructors. The <a>Value</a> in the literals is the
--   text for the literals "as is".
--   
--   A chain of infix constructors means that they appeared in the input
--   string without parentheses, i.e
--   
--   <tt>1 :+: 2 :*: 3</tt> is represented with <tt>InfixCons 1
--   [(":+:",2),(":*:",3)]</tt>, whereas
--   
--   <tt>1 :+: (2 :*: 3)</tt> is represented with <tt>InfixCons 1
--   [(":+:",InfixCons 2 [(":*:",3)])]</tt>.
data Value

-- | Data constructor
Con :: Name -> [Value] -> Value

-- | Infix data constructor chain
InfixCons :: Value -> [(Name, Value)] -> Value

-- | Record value
Rec :: Name -> [(Name, Value)] -> Value

-- | Tuple
Tuple :: [Value] -> Value

-- | List
List :: [Value] -> Value

-- | Negated value
Neg :: Value -> Value

-- | Rational
Ratio :: Value -> Value -> Value

-- | Non-negative integer
Integer :: String -> Value

-- | Non-negative floating num.
Float :: String -> Value

-- | Character
Char :: String -> Value

-- | String
String :: String -> Value

-- | A name.
type Name = String

-- | Pretty print a generic value. Our intention is that the result is
--   equivalent to the <a>Show</a> instance for the original value, except
--   possibly easier to understand by a human.
valToStr :: Value -> String

-- | Pretty print a generic value. Our intention is that the result is
--   equivalent to the <a>Show</a> instance for the original value, except
--   possibly easier to understand by a human.
valToDoc :: Value -> Doc

-- | Make an Html page representing the given value.
valToHtmlPage :: HtmlOpts -> Value -> String
parseValue :: String -> Maybe Value
reify :: Show a => a -> Maybe Value

-- | Try to show a value, prettily. If we do not understand the value, then
--   we just use its standard <a>Show</a> instance.
ppDoc :: Show a => a -> Doc

-- | Convert a generic value into a pretty <a>Value</a>, if possible.
ppShow :: Show a => a -> String

-- | Pretty print a generic value to stdout. This is particularly useful in
--   the GHCi interactive environment.
pPrint :: Show a => a -> IO ()

-- | Pretty print something that may be converted to a list as a list. Each
--   entry is on a separate line, which means that we don't do clever
--   pretty printing, and so this works well for large strucutures.
ppDocList :: (Foldable f, Show a) => f a -> Doc

-- | Pretty print something that may be converted to a list as a list. Each
--   entry is on a separate line, which means that we don't do clever
--   pretty printing, and so this works well for large strucutures.
ppShowList :: (Foldable f, Show a) => f a -> String

-- | Pretty print something that may be converted to a list as a list. Each
--   entry is on a separate line, which means that we don't do clever
--   pretty printing, and so this works well for large strucutures.
pPrintList :: (Foldable f, Show a) => f a -> IO ()

-- | Render a value in the <a>PrettyVal</a> class to a <a>Doc</a>. The
--   benefit of this function is that <a>PrettyVal</a> instances may be
--   derived automatically using generics.
dumpDoc :: PrettyVal a => a -> Doc

-- | Render a value in the <a>PrettyVal</a> class to a <a>Value</a>. The
--   benefit of this function is that <a>PrettyVal</a> instances may be
--   derived automatically using generics.
dumpStr :: PrettyVal a => a -> String

-- | Render a value using the <a>PrettyVal</a> class and show it to
--   standard out.
dumpIO :: PrettyVal a => a -> IO ()

-- | A class for types that may be reified into a value. Instances of this
--   class may be derived automatically, for datatypes that support
--   <tt>Generics</tt>.
class PrettyVal a
prettyVal :: PrettyVal a => a -> Value
prettyVal :: (PrettyVal a, GDump (Rep a), Generic a) => a -> Value

-- | Convert a value into an Html fragment.
valToHtml :: HtmlOpts -> Value -> Html

-- | Options on how to generate Html (more to come).
data HtmlOpts
HtmlOpts :: FilePath -> Int -> HtmlOpts

-- | Path for extra files. If empty, we look in directory <tt>style</tt>,
--   relative to document.
[dataDir] :: HtmlOpts -> FilePath

-- | Max. number of columns in wide lists.
[wideListWidth] :: HtmlOpts -> Int

-- | Default options.
defaultHtmlOpts :: HtmlOpts

-- | Wrap an Html fragment to make an Html page.
htmlPage :: HtmlOpts -> Html -> String
newtype Html
Html :: String -> Html
[exportHtml] :: Html -> String
getDataDir :: IO FilePath

-- | This type is used to allow pre-processing of values before showing
--   them.
data PreProc a
PreProc :: (Value -> Value) -> a -> PreProc a

-- | Hide the given constructors when showing a value.
ppHide :: (Name -> Bool) -> a -> PreProc a

-- | Hide the given constructors when showing a value. In addition, hide
--   values if all of their children were hidden.
ppHideNested :: (Name -> Bool) -> a -> PreProc a

-- | Hide constrcutros matching the given predicate. If the hidden value is
--   in a record, we also hide the corresponding record field.
--   
--   If the boolean flag is true, then we also hide constructors all of
--   whose fields were hidden.
hideCon :: Bool -> (Name -> Bool) -> Value -> Value

-- | <i>Deprecated: Please use <a>valToDoc</a> instead.</i>
ppValue :: Value -> Doc
instance GHC.Show.Show a => GHC.Show.Show (Text.Show.Pretty.PreProc a)
