-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read and write Accelerate arrays in various formats
--   
--   This package provides efficient conversion routines between a range of
--   array types and Accelerate arrays.
--   
--   Refer to the main <i>Accelerate</i> package for more information:
--   <a>http://hackage.haskell.org/package/accelerate</a>
@package accelerate-io-array
@version 0.1.0.0


-- | Convert between immutable <a>IArray</a>s and Accelerate <a>Array</a>s.
module Data.Array.Accelerate.IO.Data.Array.IArray
type family IxShapeRepr e

-- | <i>O(n)</i>. Convert an <a>IArray</a> to an Accelerate <a>Array</a>.
--   
--   The index type <tt>ix</tt> of the <a>IArray</a> corresponds to the
--   shape <tt>sh</tt> of the Accelerate <a>Array</a> in the following way:
--   
--   <pre>
--   DIM0 ~ ()
--   DIM1 ~ Int
--   DIM2 ~ (Int,Int)
--   DIM3 ~ (Int,Int,Int)
--   </pre>
--   
--   ...and so forth.
fromIArray :: (IxShapeRepr (EltRepr ix) ~ EltRepr sh, IArray a e, Ix ix, Shape sh, Elt ix, Elt e) => a ix e -> Array sh e

-- | <i>O(n)</i>. Convert an Accelerate <a>Array</a> to an <a>IArray</a>.
--   
--   See <a>fromIArray</a> for a discussion on the expected shape types.
toIArray :: forall ix sh a e. (IxShapeRepr (EltRepr ix) ~ EltRepr sh, IArray a e, Ix ix, Shape sh, Elt e, Elt ix) => Maybe ix -> Array sh e -> a ix e


-- | Efficient conversion between immutable unboxed <a>IArray</a>s and
--   Accelerate <a>Array</a>s.
module Data.Array.Accelerate.IO.Data.Array.Unboxed
type family IxShapeRepr e

-- | <i>O(n)</i>. Convert an unboxed <a>UArray</a> into an Accelerate
--   array.
--   
--   See <a>fromIArray</a> for more information about the array index type.
--   
--   If the underlying vectors are pinned then this can be done without
--   copying.
--   
--   See also: <a>https://ghc.haskell.org/trac/ghc/ticket/5556</a>
--   
--   <pre>
--   since 1.1.0.0
--   </pre>
fromUArray :: forall ix sh e. (IxShapeRepr (EltRepr ix) ~ EltRepr sh, IArray UArray e, Ix ix, Shape sh, Elt ix, Elt e) => UArray ix e -> Array sh e

-- | <i>O(1)</i> (typically). Convert an Accelerate <a>Array</a> to an
--   unboxed <a>UArray</a>.
--   
--   See <a>fromIArray</a> for more information about the array index type.
--   
--   If the array data was allocated by Accelerate, this can typically be
--   done without copying.
--   
--   <pre>
--   since 1.1.0.0
--   </pre>
toUArray :: forall ix sh e. (IxShapeRepr (EltRepr ix) ~ EltRepr sh, IArray UArray e, Ix ix, Shape sh, Elt e, Elt ix) => Maybe ix -> Array sh e -> UArray ix e
